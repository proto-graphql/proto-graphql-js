// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`createInputObjectTypeCode > protobuf-es > generates code for a simple input object 1`] = `
"import { InputObjectRef } from "@pothos/core";
import { Primitives } from "@testapis/protobuf-es/testapis/primitives/primitives_pb";
import { builder } from "../../../../builder";

export type PrimitivesInput$Shape = {
  requiredDoubleValue: Primitives["requiredDoubleValue"];
  requiredFloatValue: Primitives["requiredFloatValue"];
  requiredInt32Value: Primitives["requiredInt32Value"];
  requiredInt64Value: Primitives["requiredInt64Value"];
  requiredUint32Value: Primitives["requiredUint32Value"];
  requiredUint64Value: Primitives["requiredUint64Value"];
  requiredSint32Value: Primitives["requiredSint32Value"];
  requiredSint64Value: Primitives["requiredSint64Value"];
  requiredFixed32Value: Primitives["requiredFixed32Value"];
  requiredFixed64Value: Primitives["requiredFixed64Value"];
  requiredSfixed32Value: Primitives["requiredSfixed32Value"];
  requiredSfixed64Value: Primitives["requiredSfixed64Value"];
  requiredBoolValue: Primitives["requiredBoolValue"];
  requiredStringValue: Primitives["requiredStringValue"];
  requiredBytesValue: Primitives["requiredBytesValue"];
  requiredDoubleValues: Primitives["requiredDoubleValues"];
  requiredFloatValues: Primitives["requiredFloatValues"];
  requiredInt32Values: Primitives["requiredInt32Values"];
  requiredInt64Values: Primitives["requiredInt64Values"];
  requiredUint32Values: Primitives["requiredUint32Values"];
  requiredUint64Values: Primitives["requiredUint64Values"];
  requiredSint32Values: Primitives["requiredSint32Values"];
  requiredSint64Values: Primitives["requiredSint64Values"];
  requiredFixed32Values: Primitives["requiredFixed32Values"];
  requiredFixed64Values: Primitives["requiredFixed64Values"];
  requiredSfixed32Values: Primitives["requiredSfixed32Values"];
  requiredSfixed64Values: Primitives["requiredSfixed64Values"];
  requiredBoolValues: Primitives["requiredBoolValues"];
  requiredStringValues: Primitives["requiredStringValues"];
  requiredBytesValues: Primitives["requiredBytesValues"];
};

export const PrimitivesInput$Ref: InputObjectRef<PrimitivesInput$Shape> = builder.inputRef<PrimitivesInput$Shape>(
  "PrimitivesInput",
).implement({
  "fields": (t) => ({
    requiredDoubleValue: t.field({
      "type": "Float",
      "required": true,
      "extensions": { "protobufField": { "name": "required_double_value", "typeFullName": "double" } },
    }),
    requiredFloatValue: t.field({
      "type": "Float",
      "required": true,
      "extensions": { "protobufField": { "name": "required_float_value", "typeFullName": "float" } },
    }),
    requiredInt32Value: t.field({
      "type": "Int",
      "required": true,
      "extensions": { "protobufField": { "name": "required_int32_value", "typeFullName": "int32" } },
    }),
    requiredInt64Value: t.field({
      "type": "Int64",
      "required": true,
      "extensions": { "protobufField": { "name": "required_int64_value", "typeFullName": "int64" } },
    }),
    requiredUint32Value: t.field({
      "type": "Int",
      "required": true,
      "extensions": { "protobufField": { "name": "required_uint32_value", "typeFullName": "uint32" } },
    }),
    requiredUint64Value: t.field({
      "type": "Int64",
      "required": true,
      "extensions": { "protobufField": { "name": "required_uint64_value", "typeFullName": "uint64" } },
    }),
    requiredSint32Value: t.field({
      "type": "Int",
      "required": true,
      "extensions": { "protobufField": { "name": "required_sint32_value", "typeFullName": "sint32" } },
    }),
    requiredSint64Value: t.field({
      "type": "Int64",
      "required": true,
      "extensions": { "protobufField": { "name": "required_sint64_value", "typeFullName": "sint64" } },
    }),
    requiredFixed32Value: t.field({
      "type": "Int",
      "required": true,
      "extensions": { "protobufField": { "name": "required_fixed32_value", "typeFullName": "fixed32" } },
    }),
    requiredFixed64Value: t.field({
      "type": "Int64",
      "required": true,
      "extensions": { "protobufField": { "name": "required_fixed64_value", "typeFullName": "fixed64" } },
    }),
    requiredSfixed32Value: t.field({
      "type": "Int",
      "required": true,
      "extensions": { "protobufField": { "name": "required_sfixed32_value", "typeFullName": "sfixed32" } },
    }),
    requiredSfixed64Value: t.field({
      "type": "Int64",
      "required": true,
      "extensions": { "protobufField": { "name": "required_sfixed64_value", "typeFullName": "sfixed64" } },
    }),
    requiredBoolValue: t.field({
      "type": "Boolean",
      "required": true,
      "extensions": { "protobufField": { "name": "required_bool_value", "typeFullName": "bool" } },
    }),
    requiredStringValue: t.field({
      "type": "String",
      "required": true,
      "extensions": { "protobufField": { "name": "required_string_value", "typeFullName": "string" } },
    }),
    requiredBytesValue: t.field({
      "type": "Byte",
      "required": true,
      "extensions": { "protobufField": { "name": "required_bytes_value", "typeFullName": "bytes" } },
    }),
    requiredDoubleValues: t.field({
      "type": ["Float"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_double_values", "typeFullName": "double" } },
    }),
    requiredFloatValues: t.field({
      "type": ["Float"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_float_values", "typeFullName": "float" } },
    }),
    requiredInt32Values: t.field({
      "type": ["Int"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_int32_values", "typeFullName": "int32" } },
    }),
    requiredInt64Values: t.field({
      "type": ["Int64"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_int64_values", "typeFullName": "int64" } },
    }),
    requiredUint32Values: t.field({
      "type": ["Int"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_uint32_values", "typeFullName": "uint32" } },
    }),
    requiredUint64Values: t.field({
      "type": ["Int64"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_uint64_values", "typeFullName": "uint64" } },
    }),
    requiredSint32Values: t.field({
      "type": ["Int"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_sint32_values", "typeFullName": "sint32" } },
    }),
    requiredSint64Values: t.field({
      "type": ["Int64"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_sint64_values", "typeFullName": "sint64" } },
    }),
    requiredFixed32Values: t.field({
      "type": ["Int"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_fixed32_values", "typeFullName": "fixed32" } },
    }),
    requiredFixed64Values: t.field({
      "type": ["Int64"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_fixed64_values", "typeFullName": "fixed64" } },
    }),
    requiredSfixed32Values: t.field({
      "type": ["Int"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_sfixed32_values", "typeFullName": "sfixed32" } },
    }),
    requiredSfixed64Values: t.field({
      "type": ["Int64"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_sfixed64_values", "typeFullName": "sfixed64" } },
    }),
    requiredBoolValues: t.field({
      "type": ["Boolean"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_bool_values", "typeFullName": "bool" } },
    }),
    requiredStringValues: t.field({
      "type": ["String"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_string_values", "typeFullName": "string" } },
    }),
    requiredBytesValues: t.field({
      "type": ["Byte"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_bytes_values", "typeFullName": "bytes" } },
    }),
  }),
  "extensions": {
    "protobufMessage": {
      "fullName": "testapis.primitives.Primitives",
      "name": "Primitives",
      "package": "testapis.primitives",
    },
  },
});

export function PrimitivesInput$toProto(input: PrimitivesInput$Shape | null | undefined): Primitives {
  return new Primitives({
    requiredDoubleValue: input?.requiredDoubleValue ?? undefined,
    requiredFloatValue: input?.requiredFloatValue ?? undefined,
    requiredInt32Value: input?.requiredInt32Value ?? undefined,
    requiredInt64Value: input?.requiredInt64Value ?? undefined,
    requiredUint32Value: input?.requiredUint32Value ?? undefined,
    requiredUint64Value: input?.requiredUint64Value ?? undefined,
    requiredSint32Value: input?.requiredSint32Value ?? undefined,
    requiredSint64Value: input?.requiredSint64Value ?? undefined,
    requiredFixed32Value: input?.requiredFixed32Value ?? undefined,
    requiredFixed64Value: input?.requiredFixed64Value ?? undefined,
    requiredSfixed32Value: input?.requiredSfixed32Value ?? undefined,
    requiredSfixed64Value: input?.requiredSfixed64Value ?? undefined,
    requiredBoolValue: input?.requiredBoolValue ?? undefined,
    requiredStringValue: input?.requiredStringValue ?? undefined,
    requiredBytesValue: input?.requiredBytesValue ?? undefined,
    requiredDoubleValues: input?.requiredDoubleValues ?? undefined,
    requiredFloatValues: input?.requiredFloatValues ?? undefined,
    requiredInt32Values: input?.requiredInt32Values ?? undefined,
    requiredInt64Values: input?.requiredInt64Values ?? undefined,
    requiredUint32Values: input?.requiredUint32Values ?? undefined,
    requiredUint64Values: input?.requiredUint64Values ?? undefined,
    requiredSint32Values: input?.requiredSint32Values ?? undefined,
    requiredSint64Values: input?.requiredSint64Values ?? undefined,
    requiredFixed32Values: input?.requiredFixed32Values ?? undefined,
    requiredFixed64Values: input?.requiredFixed64Values ?? undefined,
    requiredSfixed32Values: input?.requiredSfixed32Values ?? undefined,
    requiredSfixed64Values: input?.requiredSfixed64Values ?? undefined,
    requiredBoolValues: input?.requiredBoolValues ?? undefined,
    requiredStringValues: input?.requiredStringValues ?? undefined,
    requiredBytesValues: input?.requiredBytesValues ?? undefined,
  });
}
"
`;

exports[`createInputObjectTypeCode > protobuf-es > generates code for an input object with nested fields 1`] = `
"import { InputObjectRef } from "@pothos/core";
import { Message } from "@testapis/protobuf-es/testapis/primitives/primitives_pb";
import { builder } from "../../../../builder";

export type MessageInput$Shape = {
  requiredPrimitives: PrimitivesInput$Shape;
  optionalPrimitives?: PrimitivesInput$Shape | null;
  requiredPrimitivesList: Array<PrimitivesInput$Shape>;
  optionalPrimitivesList?: Array<PrimitivesInput$Shape> | null;
};

export const MessageInput$Ref: InputObjectRef<MessageInput$Shape> = builder.inputRef<MessageInput$Shape>("MessageInput")
  .implement({
    "fields": (t) => ({
      requiredPrimitives: t.field({
        "type": PrimitivesInput$Ref,
        "required": true,
        "description": "Required.",
        "extensions": {
          "protobufField": { "name": "required_primitives", "typeFullName": "testapis.primitives.Primitives" },
        },
      }),
      optionalPrimitives: t.field({
        "type": PrimitivesInput$Ref,
        "required": false,
        "description": "Optional.",
        "extensions": {
          "protobufField": { "name": "optional_primitives", "typeFullName": "testapis.primitives.Primitives" },
        },
      }),
      requiredPrimitivesList: t.field({
        "type": [PrimitivesInput$Ref],
        "required": { "list": true, "items": true },
        "description": "Required.",
        "extensions": {
          "protobufField": { "name": "required_primitives_list", "typeFullName": "testapis.primitives.Primitives" },
        },
      }),
      optionalPrimitivesList: t.field({
        "type": [PrimitivesInput$Ref],
        "required": { "list": false, "items": true },
        "description": "Optional.",
        "extensions": {
          "protobufField": { "name": "optional_primitives_list", "typeFullName": "testapis.primitives.Primitives" },
        },
      }),
    }),
    "extensions": {
      "protobufMessage": {
        "fullName": "testapis.primitives.Message",
        "name": "Message",
        "package": "testapis.primitives",
      },
    },
  });

export function MessageInput$toProto(input: MessageInput$Shape | null | undefined): Message {
  return new Message({
    requiredPrimitives: input?.requiredPrimitives ? PrimitivesInput$toProto(input.requiredPrimitives) : undefined,
    optionalPrimitives: input?.optionalPrimitives ? PrimitivesInput$toProto(input.optionalPrimitives) : undefined,
    requiredPrimitivesList: input?.requiredPrimitivesList?.map((v) => PrimitivesInput$toProto(v)),
    optionalPrimitivesList: input?.optionalPrimitivesList?.map((v) => PrimitivesInput$toProto(v)),
  });
}
"
`;

exports[`createInputObjectTypeCode > protobuf-es > generates code for an input object with oneof fields 1`] = `
"import { InputObjectRef } from "@pothos/core";
import { OneofParent } from "@testapis/protobuf-es/testapis/oneof/oneof_pb";
import { builder } from "../../../../builder";

export type OneofParentInput$Shape = {
  normalField: OneofParent["normalField"];
  requiredMessage1?: OneofMemberMessage1Input$Shape | null;
  requiredMessage2?: OneofMemberMessage2Input$Shape | null;
  optoinalMessage1?: OneofMemberMessage1Input$Shape | null;
  optoinalMessage2?: OneofMemberMessage2Input$Shape | null;
};

export const OneofParentInput$Ref: InputObjectRef<OneofParentInput$Shape> = builder.inputRef<OneofParentInput$Shape>(
  "OneofParentInput",
).implement({
  "fields": (t) => ({
    normalField: t.field({
      "type": "String",
      "required": true,
      "extensions": { "protobufField": { "name": "normal_field", "typeFullName": "string" } },
    }),
    requiredMessage1: t.field({
      "type": OneofMemberMessage1Input$Ref,
      "required": false,
      "extensions": {
        "protobufField": { "name": "required_message1", "typeFullName": "testapis.oneof.OneofMemberMessage1" },
      },
    }),
    requiredMessage2: t.field({
      "type": OneofMemberMessage2Input$Ref,
      "required": false,
      "extensions": {
        "protobufField": { "name": "required_message2", "typeFullName": "testapis.oneof.OneofMemberMessage2" },
      },
    }),
    optoinalMessage1: t.field({
      "type": OneofMemberMessage1Input$Ref,
      "required": false,
      "extensions": {
        "protobufField": { "name": "optoinal_message1", "typeFullName": "testapis.oneof.OneofMemberMessage1" },
      },
    }),
    optoinalMessage2: t.field({
      "type": OneofMemberMessage2Input$Ref,
      "required": false,
      "extensions": {
        "protobufField": { "name": "optoinal_message2", "typeFullName": "testapis.oneof.OneofMemberMessage2" },
      },
    }),
  }),
  "extensions": {
    "protobufMessage": { "fullName": "testapis.oneof.OneofParent", "name": "OneofParent", "package": "testapis.oneof" },
  },
});

export function OneofParentInput$toProto(input: OneofParentInput$Shape | null | undefined): OneofParent {
  return new OneofParent({
    normalField: input?.normalField ?? undefined,
    requiredOneofMembers: input?.requiredMessage1
      ? { case: "requiredMessage1", value: OneofMemberMessage1Input$toProto(input.requiredMessage1) }
      : input?.requiredMessage2
      ? { case: "requiredMessage2", value: OneofMemberMessage2Input$toProto(input.requiredMessage2) }
      : undefined,
    optionalOneofMembers: input?.optoinalMessage1
      ? { case: "optoinalMessage1", value: OneofMemberMessage1Input$toProto(input.optoinalMessage1) }
      : input?.optoinalMessage2
      ? { case: "optoinalMessage2", value: OneofMemberMessage2Input$toProto(input.optoinalMessage2) }
      : undefined,
  });
}
"
`;

exports[`createInputObjectTypeCode > protobuf-es > generates code for empty input object 1`] = `
"import { InputObjectRef } from "@pothos/core";
import { EmptyMessage } from "@testapis/protobuf-es/testapis/empty_types/empty_pb";
import { builder } from "../../../../builder";

export type EmptyMessageInput$Shape = {};

export const EmptyMessageInput$Ref: InputObjectRef<EmptyMessageInput$Shape> = builder.inputRef<EmptyMessageInput$Shape>(
  "EmptyMessageInput",
).implement({
  "fields": (t) => ({ _: t.field({ type: "Boolean", required: false, description: "noop field" }) }),
  "extensions": {
    "protobufMessage": {
      "fullName": "testapis.empty_types.EmptyMessage",
      "name": "EmptyMessage",
      "package": "testapis.empty_types",
    },
  },
});

export function EmptyMessageInput$toProto(input: EmptyMessageInput$Shape | null | undefined): EmptyMessage {
  return new EmptyMessage({});
}
"
`;

exports[`createInputObjectTypeCode > ts-proto > generates code for a simple input object 1`] = `
"import { InputObjectRef } from "@pothos/core";
import { Primitives } from "@testapis/ts-proto/testapis/primitives/primitives";
import { builder } from "../../../../builder";

export type PrimitivesInput$Shape = {
  requiredDoubleValue: Primitives["requiredDoubleValue"];
  requiredFloatValue: Primitives["requiredFloatValue"];
  requiredInt32Value: Primitives["requiredInt32Value"];
  requiredInt64Value: Primitives["requiredInt64Value"];
  requiredUint32Value: Primitives["requiredUint32Value"];
  requiredUint64Value: Primitives["requiredUint64Value"];
  requiredSint32Value: Primitives["requiredSint32Value"];
  requiredSint64Value: Primitives["requiredSint64Value"];
  requiredFixed32Value: Primitives["requiredFixed32Value"];
  requiredFixed64Value: Primitives["requiredFixed64Value"];
  requiredSfixed32Value: Primitives["requiredSfixed32Value"];
  requiredSfixed64Value: Primitives["requiredSfixed64Value"];
  requiredBoolValue: Primitives["requiredBoolValue"];
  requiredStringValue: Primitives["requiredStringValue"];
  requiredBytesValue: Primitives["requiredBytesValue"];
  requiredDoubleValues: Primitives["requiredDoubleValues"];
  requiredFloatValues: Primitives["requiredFloatValues"];
  requiredInt32Values: Primitives["requiredInt32Values"];
  requiredInt64Values: Primitives["requiredInt64Values"];
  requiredUint32Values: Primitives["requiredUint32Values"];
  requiredUint64Values: Primitives["requiredUint64Values"];
  requiredSint32Values: Primitives["requiredSint32Values"];
  requiredSint64Values: Primitives["requiredSint64Values"];
  requiredFixed32Values: Primitives["requiredFixed32Values"];
  requiredFixed64Values: Primitives["requiredFixed64Values"];
  requiredSfixed32Values: Primitives["requiredSfixed32Values"];
  requiredSfixed64Values: Primitives["requiredSfixed64Values"];
  requiredBoolValues: Primitives["requiredBoolValues"];
  requiredStringValues: Primitives["requiredStringValues"];
  requiredBytesValues: Primitives["requiredBytesValues"];
};

export const PrimitivesInput$Ref: InputObjectRef<PrimitivesInput$Shape> = builder.inputRef<PrimitivesInput$Shape>(
  "PrimitivesInput",
).implement({
  "fields": (t) => ({
    requiredDoubleValue: t.field({
      "type": "Float",
      "required": true,
      "extensions": { "protobufField": { "name": "required_double_value", "typeFullName": "double" } },
    }),
    requiredFloatValue: t.field({
      "type": "Float",
      "required": true,
      "extensions": { "protobufField": { "name": "required_float_value", "typeFullName": "float" } },
    }),
    requiredInt32Value: t.field({
      "type": "Int",
      "required": true,
      "extensions": { "protobufField": { "name": "required_int32_value", "typeFullName": "int32" } },
    }),
    requiredInt64Value: t.field({
      "type": "String",
      "required": true,
      "extensions": { "protobufField": { "name": "required_int64_value", "typeFullName": "int64" } },
    }),
    requiredUint32Value: t.field({
      "type": "Int",
      "required": true,
      "extensions": { "protobufField": { "name": "required_uint32_value", "typeFullName": "uint32" } },
    }),
    requiredUint64Value: t.field({
      "type": "String",
      "required": true,
      "extensions": { "protobufField": { "name": "required_uint64_value", "typeFullName": "uint64" } },
    }),
    requiredSint32Value: t.field({
      "type": "Int",
      "required": true,
      "extensions": { "protobufField": { "name": "required_sint32_value", "typeFullName": "sint32" } },
    }),
    requiredSint64Value: t.field({
      "type": "String",
      "required": true,
      "extensions": { "protobufField": { "name": "required_sint64_value", "typeFullName": "sint64" } },
    }),
    requiredFixed32Value: t.field({
      "type": "Int",
      "required": true,
      "extensions": { "protobufField": { "name": "required_fixed32_value", "typeFullName": "fixed32" } },
    }),
    requiredFixed64Value: t.field({
      "type": "String",
      "required": true,
      "extensions": { "protobufField": { "name": "required_fixed64_value", "typeFullName": "fixed64" } },
    }),
    requiredSfixed32Value: t.field({
      "type": "Int",
      "required": true,
      "extensions": { "protobufField": { "name": "required_sfixed32_value", "typeFullName": "sfixed32" } },
    }),
    requiredSfixed64Value: t.field({
      "type": "String",
      "required": true,
      "extensions": { "protobufField": { "name": "required_sfixed64_value", "typeFullName": "sfixed64" } },
    }),
    requiredBoolValue: t.field({
      "type": "Boolean",
      "required": true,
      "extensions": { "protobufField": { "name": "required_bool_value", "typeFullName": "bool" } },
    }),
    requiredStringValue: t.field({
      "type": "String",
      "required": true,
      "extensions": { "protobufField": { "name": "required_string_value", "typeFullName": "string" } },
    }),
    requiredBytesValue: t.field({
      "type": "Byte",
      "required": true,
      "extensions": { "protobufField": { "name": "required_bytes_value", "typeFullName": "bytes" } },
    }),
    requiredDoubleValues: t.field({
      "type": ["Float"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_double_values", "typeFullName": "double" } },
    }),
    requiredFloatValues: t.field({
      "type": ["Float"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_float_values", "typeFullName": "float" } },
    }),
    requiredInt32Values: t.field({
      "type": ["Int"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_int32_values", "typeFullName": "int32" } },
    }),
    requiredInt64Values: t.field({
      "type": ["String"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_int64_values", "typeFullName": "int64" } },
    }),
    requiredUint32Values: t.field({
      "type": ["Int"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_uint32_values", "typeFullName": "uint32" } },
    }),
    requiredUint64Values: t.field({
      "type": ["String"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_uint64_values", "typeFullName": "uint64" } },
    }),
    requiredSint32Values: t.field({
      "type": ["Int"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_sint32_values", "typeFullName": "sint32" } },
    }),
    requiredSint64Values: t.field({
      "type": ["String"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_sint64_values", "typeFullName": "sint64" } },
    }),
    requiredFixed32Values: t.field({
      "type": ["Int"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_fixed32_values", "typeFullName": "fixed32" } },
    }),
    requiredFixed64Values: t.field({
      "type": ["String"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_fixed64_values", "typeFullName": "fixed64" } },
    }),
    requiredSfixed32Values: t.field({
      "type": ["Int"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_sfixed32_values", "typeFullName": "sfixed32" } },
    }),
    requiredSfixed64Values: t.field({
      "type": ["String"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_sfixed64_values", "typeFullName": "sfixed64" } },
    }),
    requiredBoolValues: t.field({
      "type": ["Boolean"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_bool_values", "typeFullName": "bool" } },
    }),
    requiredStringValues: t.field({
      "type": ["String"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_string_values", "typeFullName": "string" } },
    }),
    requiredBytesValues: t.field({
      "type": ["Byte"],
      "required": { "list": true, "items": true },
      "extensions": { "protobufField": { "name": "required_bytes_values", "typeFullName": "bytes" } },
    }),
  }),
  "extensions": {
    "protobufMessage": {
      "fullName": "testapis.primitives.Primitives",
      "name": "Primitives",
      "package": "testapis.primitives",
    },
  },
});
"
`;

exports[`createInputObjectTypeCode > ts-proto > generates code for an input object with nested fields 1`] = `
"import { InputObjectRef } from "@pothos/core";
import { builder } from "../../../../builder";

export type MessageInput$Shape = {
  requiredPrimitives: PrimitivesInput$Shape;
  optionalPrimitives?: PrimitivesInput$Shape | null;
  requiredPrimitivesList: Array<PrimitivesInput$Shape>;
  optionalPrimitivesList?: Array<PrimitivesInput$Shape> | null;
};

export const MessageInput$Ref: InputObjectRef<MessageInput$Shape> = builder.inputRef<MessageInput$Shape>("MessageInput")
  .implement({
    "fields": (t) => ({
      requiredPrimitives: t.field({
        "type": PrimitivesInput$Ref,
        "required": true,
        "description": "Required.",
        "extensions": {
          "protobufField": { "name": "required_primitives", "typeFullName": "testapis.primitives.Primitives" },
        },
      }),
      optionalPrimitives: t.field({
        "type": PrimitivesInput$Ref,
        "required": false,
        "description": "Optional.",
        "extensions": {
          "protobufField": { "name": "optional_primitives", "typeFullName": "testapis.primitives.Primitives" },
        },
      }),
      requiredPrimitivesList: t.field({
        "type": [PrimitivesInput$Ref],
        "required": { "list": true, "items": true },
        "description": "Required.",
        "extensions": {
          "protobufField": { "name": "required_primitives_list", "typeFullName": "testapis.primitives.Primitives" },
        },
      }),
      optionalPrimitivesList: t.field({
        "type": [PrimitivesInput$Ref],
        "required": { "list": false, "items": true },
        "description": "Optional.",
        "extensions": {
          "protobufField": { "name": "optional_primitives_list", "typeFullName": "testapis.primitives.Primitives" },
        },
      }),
    }),
    "extensions": {
      "protobufMessage": {
        "fullName": "testapis.primitives.Message",
        "name": "Message",
        "package": "testapis.primitives",
      },
    },
  });
"
`;

exports[`createInputObjectTypeCode > ts-proto > generates code for an input object with oneof fields 1`] = `
"import { InputObjectRef } from "@pothos/core";
import { OneofParent } from "@testapis/ts-proto/testapis/oneof/oneof";
import { builder } from "../../../../builder";

export type OneofParentInput$Shape = {
  normalField: OneofParent["normalField"];
  requiredMessage1?: OneofMemberMessage1Input$Shape | null;
  requiredMessage2?: OneofMemberMessage2Input$Shape | null;
  optoinalMessage1?: OneofMemberMessage1Input$Shape | null;
  optoinalMessage2?: OneofMemberMessage2Input$Shape | null;
};

export const OneofParentInput$Ref: InputObjectRef<OneofParentInput$Shape> = builder.inputRef<OneofParentInput$Shape>(
  "OneofParentInput",
).implement({
  "fields": (t) => ({
    normalField: t.field({
      "type": "String",
      "required": true,
      "extensions": { "protobufField": { "name": "normal_field", "typeFullName": "string" } },
    }),
    requiredMessage1: t.field({
      "type": OneofMemberMessage1Input$Ref,
      "required": false,
      "extensions": {
        "protobufField": { "name": "required_message1", "typeFullName": "testapis.oneof.OneofMemberMessage1" },
      },
    }),
    requiredMessage2: t.field({
      "type": OneofMemberMessage2Input$Ref,
      "required": false,
      "extensions": {
        "protobufField": { "name": "required_message2", "typeFullName": "testapis.oneof.OneofMemberMessage2" },
      },
    }),
    optoinalMessage1: t.field({
      "type": OneofMemberMessage1Input$Ref,
      "required": false,
      "extensions": {
        "protobufField": { "name": "optoinal_message1", "typeFullName": "testapis.oneof.OneofMemberMessage1" },
      },
    }),
    optoinalMessage2: t.field({
      "type": OneofMemberMessage2Input$Ref,
      "required": false,
      "extensions": {
        "protobufField": { "name": "optoinal_message2", "typeFullName": "testapis.oneof.OneofMemberMessage2" },
      },
    }),
  }),
  "extensions": {
    "protobufMessage": { "fullName": "testapis.oneof.OneofParent", "name": "OneofParent", "package": "testapis.oneof" },
  },
});
"
`;

exports[`createInputObjectTypeCode > ts-proto > generates code for empty input object 1`] = `
"import { InputObjectRef } from "@pothos/core";
import { builder } from "../../../../builder";

export type EmptyMessageInput$Shape = {};

export const EmptyMessageInput$Ref: InputObjectRef<EmptyMessageInput$Shape> = builder.inputRef<EmptyMessageInput$Shape>(
  "EmptyMessageInput",
).implement({
  "fields": (t) => ({ _: t.field({ type: "Boolean", required: false, description: "noop field" }) }),
  "extensions": {
    "protobufMessage": {
      "fullName": "testapis.empty_types.EmptyMessage",
      "name": "EmptyMessage",
      "package": "testapis.empty_types",
    },
  },
});
"
`;

exports[`createInputObjectTypeCode > ts-proto > generates code for nested input types 1`] = `
"import { InputObjectRef } from "@pothos/core";
import { ParentMessage } from "@testapis/ts-proto/testapis/nested/nested";
import { builder } from "../../../../builder";

export type ParentMessageInput$Shape = {
  body: ParentMessage["body"];
  nested?: ParentMessageNestedMessageInput$Shape | null;
  nestedEnum?: ParentMessage["nestedEnum"] | null;
};

export const ParentMessageInput$Ref: InputObjectRef<ParentMessageInput$Shape> = builder.inputRef<
  ParentMessageInput$Shape
>("ParentMessageInput").implement({
  "fields": (t) => ({
    body: t.field({
      "type": "String",
      "required": true,
      "extensions": { "protobufField": { "name": "body", "typeFullName": "string" } },
    }),
    nested: t.field({
      "type": ParentMessageNestedMessageInput$Ref,
      "required": false,
      "extensions": {
        "protobufField": { "name": "nested", "typeFullName": "testapis.nested.ParentMessage.NestedMessage" },
      },
    }),
    nestedEnum: t.field({
      "type": ParentMessageNestedEnum$Ref,
      "required": false,
      "extensions": {
        "protobufField": { "name": "nested_enum", "typeFullName": "testapis.nested.ParentMessage.NestedEnum" },
      },
    }),
  }),
  "extensions": {
    "protobufMessage": {
      "fullName": "testapis.nested.ParentMessage",
      "name": "ParentMessage",
      "package": "testapis.nested",
    },
  },
});
"
`;

exports[`createInputObjectTypeCode > with partial inputs > generates code for partial input types 1`] = `
"import { InputObjectRef } from "@pothos/core";
import { builder } from "../../../../builder";

export type MessagePartialInput$Shape = {
  requiredPrimitives?: PrimitivesPartialInput$Shape | null;
  optionalPrimitives?: PrimitivesPartialInput$Shape | null;
  requiredPrimitivesList?: Array<PrimitivesPartialInput$Shape> | null;
  optionalPrimitivesList?: Array<PrimitivesPartialInput$Shape> | null;
};

export const MessagePartialInput$Ref: InputObjectRef<MessagePartialInput$Shape> = builder.inputRef<
  MessagePartialInput$Shape
>("MessagePartialInput").implement({
  "fields": (t) => ({
    requiredPrimitives: t.field({
      "type": PrimitivesPartialInput$Ref,
      "required": false,
      "description": "Required.",
      "extensions": {
        "protobufField": { "name": "required_primitives", "typeFullName": "testapis.primitives.Primitives" },
      },
    }),
    optionalPrimitives: t.field({
      "type": PrimitivesPartialInput$Ref,
      "required": false,
      "description": "Optional.",
      "extensions": {
        "protobufField": { "name": "optional_primitives", "typeFullName": "testapis.primitives.Primitives" },
      },
    }),
    requiredPrimitivesList: t.field({
      "type": [PrimitivesPartialInput$Ref],
      "required": { "list": false, "items": true },
      "description": "Required.",
      "extensions": {
        "protobufField": { "name": "required_primitives_list", "typeFullName": "testapis.primitives.Primitives" },
      },
    }),
    optionalPrimitivesList: t.field({
      "type": [PrimitivesPartialInput$Ref],
      "required": { "list": false, "items": true },
      "description": "Optional.",
      "extensions": {
        "protobufField": { "name": "optional_primitives_list", "typeFullName": "testapis.primitives.Primitives" },
      },
    }),
  }),
  "extensions": {
    "protobufMessage": {
      "fullName": "testapis.primitives.Message",
      "name": "Message",
      "package": "testapis.primitives",
    },
  },
});
"
`;
