// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`'testapis.custom_types' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/date.proto

/* eslint-disable */

import { Date as Date1 } from "@testapis/proto/testapis/custom_types/date_pb";
import { nonNull, objectType } from "nexus";

export type testapis$custom_types$Date = Date1;
export const Date = objectType({
  name: "Date",
  definition: (t) => {
    t.field("year", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getYear();
        return value;
      },
      extensions: { protobufField: { name: "year", typeFullName: "uint32" } },
    });
    t.field("month", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getMonth();
        return value;
      },
      extensions: { protobufField: { name: "month", typeFullName: "uint32" } },
    });
    t.field("day", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getDay();
        return value;
      },
      extensions: { protobufField: { name: "day", typeFullName: "uint32" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Date1;
  },
  sourceType: { module: __filename, export: "testapis$custom_types$Date" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.custom_types.Date",
      name: "Date",
      package: "testapis.custom_types",
    },
  },
});
",
    "name": "testapis/custom_types/Date.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/date.proto

/* eslint-disable */

import { Date } from "@testapis/proto/testapis/custom_types/date_pb";
import { inputObjectType, nonNull } from "nexus";

export const DateInput = Object.assign(
  inputObjectType({
    name: "DateInput",
    definition: (t) => {
      t.field("year", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "year", typeFullName: "uint32" } },
      });
      t.field("month", {
        type: nonNull("Int"),
        extensions: {
          protobufField: { name: "month", typeFullName: "uint32" },
        },
      });
      t.field("day", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "day", typeFullName: "uint32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Date",
        name: "Date",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["DateInput"]): Date => {
      const output = new Date();
      output.setYear(input.year);
      output.setMonth(input.month);
      output.setDay(input.day);
      return output;
    },
    _protoNexus: {
      fields: {
        year: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "year", typeFullName: "uint32" },
          },
        },
        month: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "month", typeFullName: "uint32" },
          },
        },
        day: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "day", typeFullName: "uint32" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/custom_types/DateInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/post.proto

/* eslint-disable */

import { Post as Post1 } from "@testapis/proto/testapis/custom_types/post_pb";
import { nonNull, nullable, objectType } from "nexus";
import { Date } from "./Date.nexus";

export type testapis$custom_types$Post = Post1;
export const Post = objectType({
  name: "Post",
  definition: (t) => {
    t.field("title", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getTitle();
        return value;
      },
      extensions: { protobufField: { name: "title", typeFullName: "string" } },
    });
    t.field("publishedDate", {
      type: nullable(Date),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getPublishedDate();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "published_date",
          typeFullName: "testapis.custom_types.Date",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Post1;
  },
  sourceType: { module: __filename, export: "testapis$custom_types$Post" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.custom_types.Post",
      name: "Post",
      package: "testapis.custom_types",
    },
  },
});
",
    "name": "testapis/custom_types/Post.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/post.proto

/* eslint-disable */

import { Post } from "@testapis/proto/testapis/custom_types/post_pb";
import { inputObjectType, nonNull, nullable } from "nexus";
import { DateInput } from "./DateInput.nexus";

export const PostInput = Object.assign(
  inputObjectType({
    name: "PostInput",
    definition: (t) => {
      t.field("title", {
        type: nonNull("String"),
        description: "Required.",
        extensions: {
          protobufField: { name: "title", typeFullName: "string" },
        },
      });
      t.field("publishedDate", {
        type: nullable(DateInput),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "published_date",
            typeFullName: "testapis.custom_types.Date",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Post",
        name: "Post",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["PostInput"]): Post => {
      const output = new Post();
      output.setTitle(input.title);
      if (input.publishedDate != null) {
        output.setPublishedDate(DateInput.toProto(input.publishedDate));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        title: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "title", typeFullName: "string" },
          },
        },
        publishedDate: {
          type: nullable(DateInput),
          extensions: {
            protobufField: {
              name: "published_date",
              typeFullName: "testapis.custom_types.Date",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/custom_types/PostInput.nexus.ts",
  },
]
`;

exports[`'testapis.custom_types' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/date.proto

/* eslint-disable */

import { Date as Date1 } from "@testapis/proto/testapis/custom_types/date_pb";
import { inputObjectType, nonNull, objectType } from "nexus";

export type testapis$custom_types$Date = Date1;
export const Date = objectType({
  name: "Date",
  definition: (t) => {
    t.field("year", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getYear();
        return value;
      },
      extensions: { protobufField: { name: "year", typeFullName: "uint32" } },
    });
    t.field("month", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getMonth();
        return value;
      },
      extensions: { protobufField: { name: "month", typeFullName: "uint32" } },
    });
    t.field("day", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getDay();
        return value;
      },
      extensions: { protobufField: { name: "day", typeFullName: "uint32" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Date1;
  },
  sourceType: { module: __filename, export: "testapis$custom_types$Date" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.custom_types.Date",
      name: "Date",
      package: "testapis.custom_types",
    },
  },
});

export const DateInput = Object.assign(
  inputObjectType({
    name: "DateInput",
    definition: (t) => {
      t.field("year", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "year", typeFullName: "uint32" } },
      });
      t.field("month", {
        type: nonNull("Int"),
        extensions: {
          protobufField: { name: "month", typeFullName: "uint32" },
        },
      });
      t.field("day", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "day", typeFullName: "uint32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Date",
        name: "Date",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["DateInput"]): Date1 => {
      const output = new Date1();
      output.setYear(input.year);
      output.setMonth(input.month);
      output.setDay(input.day);
      return output;
    },
    _protoNexus: {
      fields: {
        year: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "year", typeFullName: "uint32" },
          },
        },
        month: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "month", typeFullName: "uint32" },
          },
        },
        day: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "day", typeFullName: "uint32" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/custom_types/date_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/post.proto

/* eslint-disable */

import { Post as Post1 } from "@testapis/proto/testapis/custom_types/post_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { DateInput } from "./date_pb_nexus";

export type testapis$custom_types$Post = Post1;
export const Post = objectType({
  name: "Post",
  definition: (t) => {
    t.field("title", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getTitle();
        return value;
      },
      extensions: { protobufField: { name: "title", typeFullName: "string" } },
    });
    t.field("publishedDate", {
      type: nullable("Date"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getPublishedDate();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "published_date",
          typeFullName: "testapis.custom_types.Date",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Post1;
  },
  sourceType: { module: __filename, export: "testapis$custom_types$Post" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.custom_types.Post",
      name: "Post",
      package: "testapis.custom_types",
    },
  },
});

export const PostInput = Object.assign(
  inputObjectType({
    name: "PostInput",
    definition: (t) => {
      t.field("title", {
        type: nonNull("String"),
        description: "Required.",
        extensions: {
          protobufField: { name: "title", typeFullName: "string" },
        },
      });
      t.field("publishedDate", {
        type: nullable("DateInput"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "published_date",
            typeFullName: "testapis.custom_types.Date",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Post",
        name: "Post",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["PostInput"]): Post1 => {
      const output = new Post1();
      output.setTitle(input.title);
      if (input.publishedDate != null) {
        output.setPublishedDate(DateInput.toProto(input.publishedDate));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        title: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "title", typeFullName: "string" },
          },
        },
        publishedDate: {
          type: nullable("DateInput"),
          extensions: {
            protobufField: {
              name: "published_date",
              typeFullName: "testapis.custom_types.Date",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/custom_types/post_pb_nexus.ts",
  },
]
`;

exports[`'testapis.custom_types' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/date.proto

/* eslint-disable */

import { Date as Date1 } from "@testapis/proto/testapis/custom_types/date_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";

export type testapis$custom_types$Date = Date1;
export const Date = objectType({
  name: "Date",
  definition: (t) => {
    t.field("year", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getYear();
        return value;
      },
      extensions: { protobufField: { name: "year", typeFullName: "uint32" } },
    });
    t.field("month", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getMonth();
        return value;
      },
      extensions: { protobufField: { name: "month", typeFullName: "uint32" } },
    });
    t.field("day", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getDay();
        return value;
      },
      extensions: { protobufField: { name: "day", typeFullName: "uint32" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Date1;
  },
  sourceType: { module: __filename, export: "testapis$custom_types$Date" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.custom_types.Date",
      name: "Date",
      package: "testapis.custom_types",
    },
  },
});

export const DateInput = Object.assign(
  inputObjectType({
    name: "DateInput",
    definition: (t) => {
      t.field("year", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "year", typeFullName: "uint32" } },
      });
      t.field("month", {
        type: nonNull("Int"),
        extensions: {
          protobufField: { name: "month", typeFullName: "uint32" },
        },
      });
      t.field("day", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "day", typeFullName: "uint32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Date",
        name: "Date",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["DateInput"]): Date1 => {
      const output = new Date1();
      output.setYear(input.year);
      output.setMonth(input.month);
      output.setDay(input.day);
      return output;
    },
    _protoNexus: {
      fields: {
        year: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "year", typeFullName: "uint32" },
          },
        },
        month: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "month", typeFullName: "uint32" },
          },
        },
        day: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "day", typeFullName: "uint32" },
          },
        },
      },
    },
  },
);

export const DatePartialInput = Object.assign(
  inputObjectType({
    name: "DatePartialInput",
    definition: (t) => {
      t.field("year", {
        type: nullable("Int"),
        extensions: { protobufField: { name: "year", typeFullName: "uint32" } },
      });
      t.field("month", {
        type: nullable("Int"),
        extensions: {
          protobufField: { name: "month", typeFullName: "uint32" },
        },
      });
      t.field("day", {
        type: nullable("Int"),
        extensions: { protobufField: { name: "day", typeFullName: "uint32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Date",
        name: "Date",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["DatePartialInput"]): Date1 => {
      const output = new Date1();
      if (input.year != null) {
        output.setYear(input.year);
      }
      if (input.month != null) {
        output.setMonth(input.month);
      }
      if (input.day != null) {
        output.setDay(input.day);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        year: {
          type: nullable("Int"),
          extensions: {
            protobufField: { name: "year", typeFullName: "uint32" },
          },
        },
        month: {
          type: nullable("Int"),
          extensions: {
            protobufField: { name: "month", typeFullName: "uint32" },
          },
        },
        day: {
          type: nullable("Int"),
          extensions: {
            protobufField: { name: "day", typeFullName: "uint32" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/custom_types/date_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/post.proto

/* eslint-disable */

import { Post as Post1 } from "@testapis/proto/testapis/custom_types/post_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { DateInput, DatePartialInput } from "./date_pb_nexus";

export type testapis$custom_types$Post = Post1;
export const Post = objectType({
  name: "Post",
  definition: (t) => {
    t.field("title", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getTitle();
        return value;
      },
      extensions: { protobufField: { name: "title", typeFullName: "string" } },
    });
    t.field("publishedDate", {
      type: nullable("Date"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getPublishedDate();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "published_date",
          typeFullName: "testapis.custom_types.Date",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Post1;
  },
  sourceType: { module: __filename, export: "testapis$custom_types$Post" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.custom_types.Post",
      name: "Post",
      package: "testapis.custom_types",
    },
  },
});

export const PostInput = Object.assign(
  inputObjectType({
    name: "PostInput",
    definition: (t) => {
      t.field("title", {
        type: nonNull("String"),
        description: "Required.",
        extensions: {
          protobufField: { name: "title", typeFullName: "string" },
        },
      });
      t.field("publishedDate", {
        type: nullable("DateInput"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "published_date",
            typeFullName: "testapis.custom_types.Date",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Post",
        name: "Post",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["PostInput"]): Post1 => {
      const output = new Post1();
      output.setTitle(input.title);
      if (input.publishedDate != null) {
        output.setPublishedDate(DateInput.toProto(input.publishedDate));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        title: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "title", typeFullName: "string" },
          },
        },
        publishedDate: {
          type: nullable("DateInput"),
          extensions: {
            protobufField: {
              name: "published_date",
              typeFullName: "testapis.custom_types.Date",
            },
          },
        },
      },
    },
  },
);

export const PostPartialInput = Object.assign(
  inputObjectType({
    name: "PostPartialInput",
    definition: (t) => {
      t.field("title", {
        type: nullable("String"),
        description: "Required.",
        extensions: {
          protobufField: { name: "title", typeFullName: "string" },
        },
      });
      t.field("publishedDate", {
        type: nullable("DatePartialInput"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "published_date",
            typeFullName: "testapis.custom_types.Date",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Post",
        name: "Post",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["PostPartialInput"]): Post1 => {
      const output = new Post1();
      if (input.title != null) {
        output.setTitle(input.title);
      }
      if (input.publishedDate != null) {
        output.setPublishedDate(DatePartialInput.toProto(input.publishedDate));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        title: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "title", typeFullName: "string" },
          },
        },
        publishedDate: {
          type: nullable("DatePartialInput"),
          extensions: {
            protobufField: {
              name: "published_date",
              typeFullName: "testapis.custom_types.Date",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/custom_types/post_pb_nexus.ts",
  },
]
`;

exports[`'testapis.custom_types' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/date.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/custom_types";
import { inputObjectType, nonNull, objectType } from "nexus";

export type testapis$custom_types$Date = testapis.custom_types.Date;
export const Date = objectType({
  name: "Date",
  definition: (t) => {
    t.field("year", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.year;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "year", typeFullName: "uint32" } },
    });
    t.field("month", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.month;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "month", typeFullName: "uint32" } },
    });
    t.field("day", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.day;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "day", typeFullName: "uint32" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.custom_types.Date;
  },
  sourceType: { module: __filename, export: "testapis$custom_types$Date" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.custom_types.Date",
      name: "Date",
      package: "testapis.custom_types",
    },
  },
});

export const DateInput = Object.assign(
  inputObjectType({
    name: "DateInput",
    definition: (t) => {
      t.field("year", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "year", typeFullName: "uint32" } },
      });
      t.field("month", {
        type: nonNull("Int"),
        extensions: {
          protobufField: { name: "month", typeFullName: "uint32" },
        },
      });
      t.field("day", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "day", typeFullName: "uint32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Date",
        name: "Date",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DateInput"],
    ): testapis.custom_types.Date => {
      const output = new testapis.custom_types.Date();
      output.year = input.year;
      output.month = input.month;
      output.day = input.day;
      return output;
    },
    _protoNexus: {
      fields: {
        year: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "year", typeFullName: "uint32" },
          },
        },
        month: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "month", typeFullName: "uint32" },
          },
        },
        day: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "day", typeFullName: "uint32" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/custom_types/date_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/post.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/custom_types";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { DateInput } from "./date_pb_nexus";

export type testapis$custom_types$Post = testapis.custom_types.Post;
export const Post = objectType({
  name: "Post",
  definition: (t) => {
    t.field("title", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.title;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "title", typeFullName: "string" } },
    });
    t.field("publishedDate", {
      type: nullable("Date"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.publishedDate;
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "published_date",
          typeFullName: "testapis.custom_types.Date",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.custom_types.Post;
  },
  sourceType: { module: __filename, export: "testapis$custom_types$Post" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.custom_types.Post",
      name: "Post",
      package: "testapis.custom_types",
    },
  },
});

export const PostInput = Object.assign(
  inputObjectType({
    name: "PostInput",
    definition: (t) => {
      t.field("title", {
        type: nonNull("String"),
        description: "Required.",
        extensions: {
          protobufField: { name: "title", typeFullName: "string" },
        },
      });
      t.field("publishedDate", {
        type: nullable("DateInput"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "published_date",
            typeFullName: "testapis.custom_types.Date",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Post",
        name: "Post",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PostInput"],
    ): testapis.custom_types.Post => {
      const output = new testapis.custom_types.Post();
      output.title = input.title;
      if (input.publishedDate != null) {
        output.publishedDate = DateInput.toProto(input.publishedDate);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        title: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "title", typeFullName: "string" },
          },
        },
        publishedDate: {
          type: nullable("DateInput"),
          extensions: {
            protobufField: {
              name: "published_date",
              typeFullName: "testapis.custom_types.Date",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/custom_types/post_pb_nexus.ts",
  },
]
`;

exports[`'testapis.custom_types' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/date.proto

/* eslint-disable */

import { inputObjectType, nonNull, objectType } from "nexus";
import { Date as Date1 } from "./testapis/custom_types/date_pb";

export type testapis$custom_types$Date = Date1;
export const Date = objectType({
  name: "Date",
  definition: (t) => {
    t.field("year", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getYear();
        return value;
      },
      extensions: { protobufField: { name: "year", typeFullName: "uint32" } },
    });
    t.field("month", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getMonth();
        return value;
      },
      extensions: { protobufField: { name: "month", typeFullName: "uint32" } },
    });
    t.field("day", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getDay();
        return value;
      },
      extensions: { protobufField: { name: "day", typeFullName: "uint32" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Date1;
  },
  sourceType: { module: __filename, export: "testapis$custom_types$Date" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.custom_types.Date",
      name: "Date",
      package: "testapis.custom_types",
    },
  },
});

export const DateInput = Object.assign(
  inputObjectType({
    name: "DateInput",
    definition: (t) => {
      t.field("year", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "year", typeFullName: "uint32" } },
      });
      t.field("month", {
        type: nonNull("Int"),
        extensions: {
          protobufField: { name: "month", typeFullName: "uint32" },
        },
      });
      t.field("day", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "day", typeFullName: "uint32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Date",
        name: "Date",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["DateInput"]): Date1 => {
      const output = new Date1();
      output.setYear(input.year);
      output.setMonth(input.month);
      output.setDay(input.day);
      return output;
    },
    _protoNexus: {
      fields: {
        year: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "year", typeFullName: "uint32" },
          },
        },
        month: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "month", typeFullName: "uint32" },
          },
        },
        day: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "day", typeFullName: "uint32" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/custom_types/date_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/custom_types/post.proto

/* eslint-disable */

import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { DateInput } from "./date_pb_nexus";
import { Post as Post1 } from "./testapis/custom_types/post_pb";

export type testapis$custom_types$Post = Post1;
export const Post = objectType({
  name: "Post",
  definition: (t) => {
    t.field("title", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getTitle();
        return value;
      },
      extensions: { protobufField: { name: "title", typeFullName: "string" } },
    });
    t.field("publishedDate", {
      type: nullable("Date"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getPublishedDate();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "published_date",
          typeFullName: "testapis.custom_types.Date",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Post1;
  },
  sourceType: { module: __filename, export: "testapis$custom_types$Post" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.custom_types.Post",
      name: "Post",
      package: "testapis.custom_types",
    },
  },
});

export const PostInput = Object.assign(
  inputObjectType({
    name: "PostInput",
    definition: (t) => {
      t.field("title", {
        type: nonNull("String"),
        description: "Required.",
        extensions: {
          protobufField: { name: "title", typeFullName: "string" },
        },
      });
      t.field("publishedDate", {
        type: nullable("DateInput"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "published_date",
            typeFullName: "testapis.custom_types.Date",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.custom_types.Post",
        name: "Post",
        package: "testapis.custom_types",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["PostInput"]): Post1 => {
      const output = new Post1();
      output.setTitle(input.title);
      if (input.publishedDate != null) {
        output.setPublishedDate(DateInput.toProto(input.publishedDate));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        title: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "title", typeFullName: "string" },
          },
        },
        publishedDate: {
          type: nullable("DateInput"),
          extensions: {
            protobufField: {
              name: "published_date",
              typeFullName: "testapis.custom_types.Date",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/custom_types/post_pb_nexus.ts",
  },
]
`;

exports[`'testapis.deprecation' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import {
  DeprecatedMessage as DeprecatedMessage1,
  NotDeprecatedEnum as NotDeprecatedEnum2,
} from "@testapis/proto/testapis/deprecation/deprecation_pb";
import { nonNull, nullable, objectType } from "nexus";
import { NotDeprecatedEnum } from "./NotDeprecatedEnum.nexus";

export type testapis$deprecation$DeprecatedMessage = DeprecatedMessage1;
export const DeprecatedMessage = objectType({
  name: "DeprecatedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("enum", {
      type: nullable(NotDeprecatedEnum),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === NotDeprecatedEnum2.NOT_DEPRECATED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.NotDeprecatedEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedMessage",
      name: "DeprecatedMessage",
      package: "testapis.deprecation",
      options: { deprecated: true },
    },
  },
});
",
    "name": "testapis/deprecation/DeprecatedMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import {
  DeprecatedEnum as DeprecatedEnum2,
  NotDeprecatedMessage as NotDeprecatedMessage1,
} from "@testapis/proto/testapis/deprecation/deprecation_pb";
import { nonNull, nullable, objectType } from "nexus";
import { DeprecatedEnum } from "./DeprecatedEnum.nexus";

export type testapis$deprecation$NotDeprecatedMessage = NotDeprecatedMessage1;
export const NotDeprecatedMessage = objectType({
  name: "NotDeprecatedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: {
        protobufField: {
          name: "body",
          typeFullName: "string",
          options: { deprecated: true },
        },
      },
    });
    t.field("enum", {
      type: nullable(DeprecatedEnum),
      deprecation:
        "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === DeprecatedEnum2.DEPRECATED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.DeprecatedEnum",
        },
      },
    });
    t.field("notDeprecatedOneof", {
      type: nullable(NotDeprecatedMessageNotDeprecatedOneof),
      resolve: (source) => {
        const value = source;
        switch (value.getNotDeprecatedOneofCase()) {
          case NotDeprecatedMessage1.NotDeprecatedOneofCase.MSG1: {
            return value.getMsg1()!;
          }

          case NotDeprecatedMessage1.NotDeprecatedOneofCase.MSG2: {
            return value.getMsg2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "not_deprecated_oneof" } },
    });
    t.field("deprecatedOneof", {
      type: nullable(NotDeprecatedMessageDeprecatedOneof),
      deprecation:
        "testapis.deprecation.NotDeprecatedMessage.deprecated_oneof is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source;
        switch (value.getDeprecatedOneofCase()) {
          case NotDeprecatedMessage1.DeprecatedOneofCase.MSG3: {
            return value.getMsg3()!;
          }

          case NotDeprecatedMessage1.DeprecatedOneofCase.MSG4: {
            return value.getMsg4()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "deprecated_oneof" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage",
      name: "NotDeprecatedMessage",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/NotDeprecatedMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { DeprecatedMessage } from "@testapis/proto/testapis/deprecation/deprecation_pb";
import { nonNull, objectType } from "nexus";

export type testapis$deprecation$DeprecatedMessage$InnerMessage =
  DeprecatedMessage.InnerMessage;
export const DeprecatedMessageInnerMessage = objectType({
  name: "DeprecatedMessageInnerMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedMessage.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/DeprecatedMessageInnerMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { NotDeprecatedMessage } from "@testapis/proto/testapis/deprecation/deprecation_pb";
import { nonNull, objectType } from "nexus";

export type testapis$deprecation$NotDeprecatedMessage$InnerMessage1 =
  NotDeprecatedMessage.InnerMessage1;
export const NotDeprecatedMessageInnerMessage1 = objectType({
  name: "NotDeprecatedMessageInnerMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage.InnerMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage$InnerMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      name: "InnerMessage1",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/NotDeprecatedMessageInnerMessage1.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { NotDeprecatedMessage } from "@testapis/proto/testapis/deprecation/deprecation_pb";
import { nonNull, objectType } from "nexus";

export type testapis$deprecation$NotDeprecatedMessage$InnerMessage2 =
  NotDeprecatedMessage.InnerMessage2;
export const NotDeprecatedMessageInnerMessage2 = objectType({
  name: "NotDeprecatedMessageInnerMessage2",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage.InnerMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage$InnerMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      name: "InnerMessage2",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/NotDeprecatedMessageInnerMessage2.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { DeprecatedMessage } from "@testapis/proto/testapis/deprecation/deprecation_pb";
import { inputObjectType, nullable } from "nexus";
import { NotDeprecatedEnum } from "./NotDeprecatedEnum.nexus";

export const DeprecatedMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable(NotDeprecatedEnum),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.NotDeprecatedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage",
        name: "DeprecatedMessage",
        package: "testapis.deprecation",
        options: { deprecated: true },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedMessageInput"],
    ): DeprecatedMessage => {
      const output = new DeprecatedMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable(NotDeprecatedEnum),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.NotDeprecatedEnum",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/deprecation/DeprecatedMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { NotDeprecatedMessage } from "@testapis/proto/testapis/deprecation/deprecation_pb";
import { inputObjectType, nullable } from "nexus";
import { DeprecatedEnum } from "./DeprecatedEnum.nexus";
import { NotDeprecatedMessageInnerMessage1Input } from "./NotDeprecatedMessageInnerMessage1Input.nexus";
import { NotDeprecatedMessageInnerMessage2Input } from "./NotDeprecatedMessageInnerMessage2Input.nexus";

export const NotDeprecatedMessageInput = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "body",
            typeFullName: "string",
            options: { deprecated: true },
          },
        },
      });
      t.field("enum", {
        type: nullable(DeprecatedEnum),
        deprecation:
          "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedEnum",
          },
        },
      });
      t.field("msg1", {
        type: nullable(NotDeprecatedMessageInnerMessage1Input),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg1 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg2", {
        type: nullable(NotDeprecatedMessageInnerMessage2Input),
        extensions: {
          protobufField: {
            name: "msg2",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
          },
        },
      });
      t.field("msg3", {
        type: nullable(NotDeprecatedMessageInnerMessage1Input),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg3 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg3",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg4", {
        type: nullable(NotDeprecatedMessageInnerMessage2Input),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg4 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg4",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            options: { deprecated: true },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage",
        name: "NotDeprecatedMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInput"],
    ): NotDeprecatedMessage => {
      const output = new NotDeprecatedMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      if (input.msg1 != null) {
        output.setMsg1(
          NotDeprecatedMessageInnerMessage1Input.toProto(input.msg1),
        );
      }
      if (input.msg2 != null) {
        output.setMsg2(
          NotDeprecatedMessageInnerMessage2Input.toProto(input.msg2),
        );
      }
      if (input.msg3 != null) {
        output.setMsg3(
          NotDeprecatedMessageInnerMessage1Input.toProto(input.msg3),
        );
      }
      if (input.msg4 != null) {
        output.setMsg4(
          NotDeprecatedMessageInnerMessage2Input.toProto(input.msg4),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "body",
              typeFullName: "string",
              options: { deprecated: true },
            },
          },
        },
        enum: {
          type: nullable(DeprecatedEnum),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedEnum",
            },
          },
        },
        msg1: {
          type: nullable(NotDeprecatedMessageInnerMessage1Input),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg2: {
          type: nullable(NotDeprecatedMessageInnerMessage2Input),
          extensions: {
            protobufField: {
              name: "msg2",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            },
          },
        },
        msg3: {
          type: nullable(NotDeprecatedMessageInnerMessage1Input),
          extensions: {
            protobufField: {
              name: "msg3",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg4: {
          type: nullable(NotDeprecatedMessageInnerMessage2Input),
          extensions: {
            protobufField: {
              name: "msg4",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
              options: { deprecated: true },
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/deprecation/NotDeprecatedMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { DeprecatedMessage } from "@testapis/proto/testapis/deprecation/deprecation_pb";
import { inputObjectType, nullable } from "nexus";

export const DeprecatedMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessageInnerMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedMessageInnerMessageInput"],
    ): DeprecatedMessage.InnerMessage => {
      const output = new DeprecatedMessage.InnerMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/deprecation/DeprecatedMessageInnerMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { NotDeprecatedMessage } from "@testapis/proto/testapis/deprecation/deprecation_pb";
import { inputObjectType, nonNull } from "nexus";

export const NotDeprecatedMessageInnerMessage1Input = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
        name: "InnerMessage1",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage1Input"],
    ): NotDeprecatedMessage.InnerMessage1 => {
      const output = new NotDeprecatedMessage.InnerMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/deprecation/NotDeprecatedMessageInnerMessage1Input.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { NotDeprecatedMessage } from "@testapis/proto/testapis/deprecation/deprecation_pb";
import { inputObjectType, nonNull } from "nexus";

export const NotDeprecatedMessageInnerMessage2Input = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage2Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage2Input"],
    ): NotDeprecatedMessage.InnerMessage2 => {
      const output = new NotDeprecatedMessage.InnerMessage2();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/deprecation/NotDeprecatedMessageInnerMessage2Input.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { unionType } from "nexus";
import { NotDeprecatedMessageInnerMessage1 } from "./NotDeprecatedMessageInnerMessage1.nexus";
import { NotDeprecatedMessageInnerMessage2 } from "./NotDeprecatedMessageInnerMessage2.nexus";

export const NotDeprecatedMessageNotDeprecatedOneof = unionType({
  name: "NotDeprecatedMessageNotDeprecatedOneof",
  definition: (t) => {
    t.members(
      NotDeprecatedMessageInnerMessage1,
      NotDeprecatedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName:
        "testapis.deprecation.NotDeprecatedMessage.not_deprecated_oneof",
      name: "not_deprecated_oneof",
      messageName: "NotDeprecatedMessage",
      package: "testapis.deprecation",
      fields: [{
        name: "msg1",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      }, {
        name: "msg2",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      }],
    },
  },
});
",
    "name": "testapis/deprecation/NotDeprecatedMessageNotDeprecatedOneof.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { unionType } from "nexus";
import { NotDeprecatedMessageInnerMessage1 } from "./NotDeprecatedMessageInnerMessage1.nexus";
import { NotDeprecatedMessageInnerMessage2 } from "./NotDeprecatedMessageInnerMessage2.nexus";

export const NotDeprecatedMessageDeprecatedOneof = unionType({
  name: "NotDeprecatedMessageDeprecatedOneof",
  definition: (t) => {
    t.members(
      NotDeprecatedMessageInnerMessage1,
      NotDeprecatedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.deprecated_oneof",
      name: "deprecated_oneof",
      messageName: "NotDeprecatedMessage",
      package: "testapis.deprecation",
      fields: [{
        name: "msg3",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      }, {
        name: "msg4",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      }],
    },
  },
});
",
    "name": "testapis/deprecation/NotDeprecatedMessageDeprecatedOneof.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { enumType } from "nexus";

export const NotDeprecatedEnum = enumType({
  name: "NotDeprecatedEnum",
  members: [{
    name: "NOT_DEPRECATED_FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "NOT_DEPRECATED_FOO" } },
  }, {
    name: "DEPRECATED_BAR",
    value: 2,
    deprecation:
      "testapis.deprecation.NotDeprecatedEnum.DEPRECATED_BAR is mark as deprecated in a *.proto file.",
    extensions: {
      protobufEnumValue: {
        name: "DEPRECATED_BAR",
        options: { deprecated: true },
      },
    },
  }],
  extensions: {
    protobufEnum: {
      name: "NotDeprecatedEnum",
      fullName: "testapis.deprecation.NotDeprecatedEnum",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/NotDeprecatedEnum.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { enumType } from "nexus";

export const DeprecatedEnum = enumType({
  name: "DeprecatedEnum",
  members: [{
    name: "DEPRECATED_BAZ",
    value: 1,
    deprecation:
      "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_BAZ" } },
  }, {
    name: "DEPRECATED_QUX",
    value: 2,
    deprecation:
      "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_QUX" } },
  }],
  extensions: {
    protobufEnum: {
      name: "DeprecatedEnum",
      fullName: "testapis.deprecation.DeprecatedEnum",
      package: "testapis.deprecation",
      options: { deprecated: true },
    },
  },
});
",
    "name": "testapis/deprecation/DeprecatedEnum.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

/* eslint-disable */

import {
  DeprecatedFileEnum as DeprecatedFileEnum2,
  DeprecatedFileMessage as DeprecatedFileMessage1,
} from "@testapis/proto/testapis/deprecation/file_deprecation_pb";
import { nonNull, nullable, objectType } from "nexus";
import { DeprecatedFileEnum } from "./DeprecatedFileEnum.nexus";

export type testapis$deprecation$DeprecatedFileMessage = DeprecatedFileMessage1;
export const DeprecatedFileMessage = objectType({
  name: "DeprecatedFileMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("enum", {
      type: nullable(DeprecatedFileEnum),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === DeprecatedFileEnum2.DEPRECATED_FILE_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.DeprecatedFileEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedFileMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedFileMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedFileMessage",
      name: "DeprecatedFileMessage",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/DeprecatedFileMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

/* eslint-disable */

import { DeprecatedFileMessage } from "@testapis/proto/testapis/deprecation/file_deprecation_pb";
import { nonNull, objectType } from "nexus";

export type testapis$deprecation$DeprecatedFileMessage$InnerMessage =
  DeprecatedFileMessage.InnerMessage;
export const DeprecatedFileMessageInnerMessage = objectType({
  name: "DeprecatedFileMessageInnerMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedFileMessage.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedFileMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedFileMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/DeprecatedFileMessageInnerMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

/* eslint-disable */

import { DeprecatedFileMessage } from "@testapis/proto/testapis/deprecation/file_deprecation_pb";
import { inputObjectType, nullable } from "nexus";
import { DeprecatedFileEnum } from "./DeprecatedFileEnum.nexus";

export const DeprecatedFileMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable(DeprecatedFileEnum),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedFileEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage",
        name: "DeprecatedFileMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedFileMessageInput"],
    ): DeprecatedFileMessage => {
      const output = new DeprecatedFileMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable(DeprecatedFileEnum),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedFileEnum",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/deprecation/DeprecatedFileMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

/* eslint-disable */

import { DeprecatedFileMessage } from "@testapis/proto/testapis/deprecation/file_deprecation_pb";
import { inputObjectType, nullable } from "nexus";

export const DeprecatedFileMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessageInnerMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedFileMessageInnerMessageInput"],
    ): DeprecatedFileMessage.InnerMessage => {
      const output = new DeprecatedFileMessage.InnerMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/deprecation/DeprecatedFileMessageInnerMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

/* eslint-disable */

import { enumType } from "nexus";

export const DeprecatedFileEnum = enumType({
  name: "DeprecatedFileEnum",
  members: [{
    name: "DEPRECATED_FILE_FOO",
    value: 1,
    deprecation:
      "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_FILE_FOO" } },
  }, {
    name: "DEPRECATED_FILE_BAR",
    value: 2,
    deprecation:
      "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_FILE_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "DeprecatedFileEnum",
      fullName: "testapis.deprecation.DeprecatedFileEnum",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/DeprecatedFileEnum.nexus.ts",
  },
]
`;

exports[`'testapis.deprecation' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import {
  DeprecatedEnum as DeprecatedEnum4,
  DeprecatedMessage as DeprecatedMessage1,
  NotDeprecatedEnum as NotDeprecatedEnum3,
  NotDeprecatedMessage as NotDeprecatedMessage2,
} from "@testapis/proto/testapis/deprecation/deprecation_pb";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";

export type testapis$deprecation$DeprecatedMessage = DeprecatedMessage1;
export const DeprecatedMessage = objectType({
  name: "DeprecatedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("enum", {
      type: nullable("NotDeprecatedEnum"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === NotDeprecatedEnum3.NOT_DEPRECATED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.NotDeprecatedEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedMessage",
      name: "DeprecatedMessage",
      package: "testapis.deprecation",
      options: { deprecated: true },
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage = NotDeprecatedMessage2;
export const NotDeprecatedMessage = objectType({
  name: "NotDeprecatedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: {
        protobufField: {
          name: "body",
          typeFullName: "string",
          options: { deprecated: true },
        },
      },
    });
    t.field("enum", {
      type: nullable("DeprecatedEnum"),
      deprecation:
        "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === DeprecatedEnum4.DEPRECATED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.DeprecatedEnum",
        },
      },
    });
    t.field("notDeprecatedOneof", {
      type: nullable("NotDeprecatedMessageNotDeprecatedOneof"),
      resolve: (source) => {
        const value = source;
        switch (value.getNotDeprecatedOneofCase()) {
          case NotDeprecatedMessage2.NotDeprecatedOneofCase.MSG1: {
            return value.getMsg1()!;
          }

          case NotDeprecatedMessage2.NotDeprecatedOneofCase.MSG2: {
            return value.getMsg2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "not_deprecated_oneof" } },
    });
    t.field("deprecatedOneof", {
      type: nullable("NotDeprecatedMessageDeprecatedOneof"),
      deprecation:
        "testapis.deprecation.NotDeprecatedMessage.deprecated_oneof is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source;
        switch (value.getDeprecatedOneofCase()) {
          case NotDeprecatedMessage2.DeprecatedOneofCase.MSG3: {
            return value.getMsg3()!;
          }

          case NotDeprecatedMessage2.DeprecatedOneofCase.MSG4: {
            return value.getMsg4()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "deprecated_oneof" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage",
      name: "NotDeprecatedMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$DeprecatedMessage$InnerMessage =
  DeprecatedMessage1.InnerMessage;
export const DeprecatedMessageInnerMessage = objectType({
  name: "DeprecatedMessageInnerMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedMessage1.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage$InnerMessage1 =
  NotDeprecatedMessage2.InnerMessage1;
export const NotDeprecatedMessageInnerMessage1 = objectType({
  name: "NotDeprecatedMessageInnerMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage2.InnerMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage$InnerMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      name: "InnerMessage1",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage$InnerMessage2 =
  NotDeprecatedMessage2.InnerMessage2;
export const NotDeprecatedMessageInnerMessage2 = objectType({
  name: "NotDeprecatedMessageInnerMessage2",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage2.InnerMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage$InnerMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      name: "InnerMessage2",
      package: "testapis.deprecation",
    },
  },
});

export const DeprecatedMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable("NotDeprecatedEnum"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.NotDeprecatedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage",
        name: "DeprecatedMessage",
        package: "testapis.deprecation",
        options: { deprecated: true },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedMessageInput"],
    ): DeprecatedMessage1 => {
      const output = new DeprecatedMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable("NotDeprecatedEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.NotDeprecatedEnum",
            },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInput = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "body",
            typeFullName: "string",
            options: { deprecated: true },
          },
        },
      });
      t.field("enum", {
        type: nullable("DeprecatedEnum"),
        deprecation:
          "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedEnum",
          },
        },
      });
      t.field("msg1", {
        type: nullable("NotDeprecatedMessageInnerMessage1Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg1 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg2", {
        type: nullable("NotDeprecatedMessageInnerMessage2Input"),
        extensions: {
          protobufField: {
            name: "msg2",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
          },
        },
      });
      t.field("msg3", {
        type: nullable("NotDeprecatedMessageInnerMessage1Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg3 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg3",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg4", {
        type: nullable("NotDeprecatedMessageInnerMessage2Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg4 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg4",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            options: { deprecated: true },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage",
        name: "NotDeprecatedMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInput"],
    ): NotDeprecatedMessage2 => {
      const output = new NotDeprecatedMessage2();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      if (input.msg1 != null) {
        output.setMsg1(
          NotDeprecatedMessageInnerMessage1Input.toProto(input.msg1),
        );
      }
      if (input.msg2 != null) {
        output.setMsg2(
          NotDeprecatedMessageInnerMessage2Input.toProto(input.msg2),
        );
      }
      if (input.msg3 != null) {
        output.setMsg3(
          NotDeprecatedMessageInnerMessage1Input.toProto(input.msg3),
        );
      }
      if (input.msg4 != null) {
        output.setMsg4(
          NotDeprecatedMessageInnerMessage2Input.toProto(input.msg4),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "body",
              typeFullName: "string",
              options: { deprecated: true },
            },
          },
        },
        enum: {
          type: nullable("DeprecatedEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedEnum",
            },
          },
        },
        msg1: {
          type: nullable("NotDeprecatedMessageInnerMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg2: {
          type: nullable("NotDeprecatedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "msg2",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            },
          },
        },
        msg3: {
          type: nullable("NotDeprecatedMessageInnerMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg3",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg4: {
          type: nullable("NotDeprecatedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "msg4",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
              options: { deprecated: true },
            },
          },
        },
      },
    },
  },
);

export const DeprecatedMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessageInnerMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedMessageInnerMessageInput"],
    ): DeprecatedMessage1.InnerMessage => {
      const output = new DeprecatedMessage1.InnerMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInnerMessage1Input = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
        name: "InnerMessage1",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage1Input"],
    ): NotDeprecatedMessage2.InnerMessage1 => {
      const output = new NotDeprecatedMessage2.InnerMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInnerMessage2Input = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage2Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage2Input"],
    ): NotDeprecatedMessage2.InnerMessage2 => {
      const output = new NotDeprecatedMessage2.InnerMessage2();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const NotDeprecatedMessageNotDeprecatedOneof = unionType({
  name: "NotDeprecatedMessageNotDeprecatedOneof",
  definition: (t) => {
    t.members(
      NotDeprecatedMessageInnerMessage1,
      NotDeprecatedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName:
        "testapis.deprecation.NotDeprecatedMessage.not_deprecated_oneof",
      name: "not_deprecated_oneof",
      messageName: "NotDeprecatedMessage",
      package: "testapis.deprecation",
      fields: [{
        name: "msg1",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      }, {
        name: "msg2",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      }],
    },
  },
});
export const NotDeprecatedMessageDeprecatedOneof = unionType({
  name: "NotDeprecatedMessageDeprecatedOneof",
  definition: (t) => {
    t.members(
      NotDeprecatedMessageInnerMessage1,
      NotDeprecatedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.deprecated_oneof",
      name: "deprecated_oneof",
      messageName: "NotDeprecatedMessage",
      package: "testapis.deprecation",
      fields: [{
        name: "msg3",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      }, {
        name: "msg4",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      }],
    },
  },
});
export const NotDeprecatedEnum = enumType({
  name: "NotDeprecatedEnum",
  members: [{
    name: "NOT_DEPRECATED_FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "NOT_DEPRECATED_FOO" } },
  }, {
    name: "DEPRECATED_BAR",
    value: 2,
    deprecation:
      "testapis.deprecation.NotDeprecatedEnum.DEPRECATED_BAR is mark as deprecated in a *.proto file.",
    extensions: {
      protobufEnumValue: {
        name: "DEPRECATED_BAR",
        options: { deprecated: true },
      },
    },
  }],
  extensions: {
    protobufEnum: {
      name: "NotDeprecatedEnum",
      fullName: "testapis.deprecation.NotDeprecatedEnum",
      package: "testapis.deprecation",
    },
  },
});
export const DeprecatedEnum = enumType({
  name: "DeprecatedEnum",
  members: [{
    name: "DEPRECATED_BAZ",
    value: 1,
    deprecation:
      "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_BAZ" } },
  }, {
    name: "DEPRECATED_QUX",
    value: 2,
    deprecation:
      "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_QUX" } },
  }],
  extensions: {
    protobufEnum: {
      name: "DeprecatedEnum",
      fullName: "testapis.deprecation.DeprecatedEnum",
      package: "testapis.deprecation",
      options: { deprecated: true },
    },
  },
});
",
    "name": "testapis/deprecation/deprecation_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

/* eslint-disable */

import {
  DeprecatedFileEnum as DeprecatedFileEnum2,
  DeprecatedFileMessage as DeprecatedFileMessage1,
} from "@testapis/proto/testapis/deprecation/file_deprecation_pb";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";

export type testapis$deprecation$DeprecatedFileMessage = DeprecatedFileMessage1;
export const DeprecatedFileMessage = objectType({
  name: "DeprecatedFileMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("enum", {
      type: nullable("DeprecatedFileEnum"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === DeprecatedFileEnum2.DEPRECATED_FILE_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.DeprecatedFileEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedFileMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedFileMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedFileMessage",
      name: "DeprecatedFileMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$DeprecatedFileMessage$InnerMessage =
  DeprecatedFileMessage1.InnerMessage;
export const DeprecatedFileMessageInnerMessage = objectType({
  name: "DeprecatedFileMessageInnerMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedFileMessage1.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedFileMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedFileMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.deprecation",
    },
  },
});

export const DeprecatedFileMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable("DeprecatedFileEnum"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedFileEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage",
        name: "DeprecatedFileMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedFileMessageInput"],
    ): DeprecatedFileMessage1 => {
      const output = new DeprecatedFileMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable("DeprecatedFileEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedFileEnum",
            },
          },
        },
      },
    },
  },
);

export const DeprecatedFileMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessageInnerMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedFileMessageInnerMessageInput"],
    ): DeprecatedFileMessage1.InnerMessage => {
      const output = new DeprecatedFileMessage1.InnerMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const DeprecatedFileEnum = enumType({
  name: "DeprecatedFileEnum",
  members: [{
    name: "DEPRECATED_FILE_FOO",
    value: 1,
    deprecation:
      "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_FILE_FOO" } },
  }, {
    name: "DEPRECATED_FILE_BAR",
    value: 2,
    deprecation:
      "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_FILE_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "DeprecatedFileEnum",
      fullName: "testapis.deprecation.DeprecatedFileEnum",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/file_deprecation_pb_nexus.ts",
  },
]
`;

exports[`'testapis.deprecation' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import {
  DeprecatedEnum as DeprecatedEnum4,
  DeprecatedMessage as DeprecatedMessage1,
  NotDeprecatedEnum as NotDeprecatedEnum3,
  NotDeprecatedMessage as NotDeprecatedMessage2,
} from "@testapis/proto/testapis/deprecation/deprecation_pb";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";

export type testapis$deprecation$DeprecatedMessage = DeprecatedMessage1;
export const DeprecatedMessage = objectType({
  name: "DeprecatedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("enum", {
      type: nullable("NotDeprecatedEnum"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === NotDeprecatedEnum3.NOT_DEPRECATED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.NotDeprecatedEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedMessage",
      name: "DeprecatedMessage",
      package: "testapis.deprecation",
      options: { deprecated: true },
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage = NotDeprecatedMessage2;
export const NotDeprecatedMessage = objectType({
  name: "NotDeprecatedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: {
        protobufField: {
          name: "body",
          typeFullName: "string",
          options: { deprecated: true },
        },
      },
    });
    t.field("enum", {
      type: nullable("DeprecatedEnum"),
      deprecation:
        "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === DeprecatedEnum4.DEPRECATED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.DeprecatedEnum",
        },
      },
    });
    t.field("notDeprecatedOneof", {
      type: nullable("NotDeprecatedMessageNotDeprecatedOneof"),
      resolve: (source) => {
        const value = source;
        switch (value.getNotDeprecatedOneofCase()) {
          case NotDeprecatedMessage2.NotDeprecatedOneofCase.MSG1: {
            return value.getMsg1()!;
          }

          case NotDeprecatedMessage2.NotDeprecatedOneofCase.MSG2: {
            return value.getMsg2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "not_deprecated_oneof" } },
    });
    t.field("deprecatedOneof", {
      type: nullable("NotDeprecatedMessageDeprecatedOneof"),
      deprecation:
        "testapis.deprecation.NotDeprecatedMessage.deprecated_oneof is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source;
        switch (value.getDeprecatedOneofCase()) {
          case NotDeprecatedMessage2.DeprecatedOneofCase.MSG3: {
            return value.getMsg3()!;
          }

          case NotDeprecatedMessage2.DeprecatedOneofCase.MSG4: {
            return value.getMsg4()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "deprecated_oneof" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage",
      name: "NotDeprecatedMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$DeprecatedMessage$InnerMessage =
  DeprecatedMessage1.InnerMessage;
export const DeprecatedMessageInnerMessage = objectType({
  name: "DeprecatedMessageInnerMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedMessage1.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage$InnerMessage1 =
  NotDeprecatedMessage2.InnerMessage1;
export const NotDeprecatedMessageInnerMessage1 = objectType({
  name: "NotDeprecatedMessageInnerMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage2.InnerMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage$InnerMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      name: "InnerMessage1",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage$InnerMessage2 =
  NotDeprecatedMessage2.InnerMessage2;
export const NotDeprecatedMessageInnerMessage2 = objectType({
  name: "NotDeprecatedMessageInnerMessage2",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage2.InnerMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage$InnerMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      name: "InnerMessage2",
      package: "testapis.deprecation",
    },
  },
});

export const DeprecatedMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable("NotDeprecatedEnum"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.NotDeprecatedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage",
        name: "DeprecatedMessage",
        package: "testapis.deprecation",
        options: { deprecated: true },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedMessageInput"],
    ): DeprecatedMessage1 => {
      const output = new DeprecatedMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable("NotDeprecatedEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.NotDeprecatedEnum",
            },
          },
        },
      },
    },
  },
);

export const DeprecatedMessagePartialInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessagePartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable("NotDeprecatedEnum"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.NotDeprecatedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage",
        name: "DeprecatedMessage",
        package: "testapis.deprecation",
        options: { deprecated: true },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedMessagePartialInput"],
    ): DeprecatedMessage1 => {
      const output = new DeprecatedMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable("NotDeprecatedEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.NotDeprecatedEnum",
            },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInput = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "body",
            typeFullName: "string",
            options: { deprecated: true },
          },
        },
      });
      t.field("enum", {
        type: nullable("DeprecatedEnum"),
        deprecation:
          "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedEnum",
          },
        },
      });
      t.field("msg1", {
        type: nullable("NotDeprecatedMessageInnerMessage1Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg1 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg2", {
        type: nullable("NotDeprecatedMessageInnerMessage2Input"),
        extensions: {
          protobufField: {
            name: "msg2",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
          },
        },
      });
      t.field("msg3", {
        type: nullable("NotDeprecatedMessageInnerMessage1Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg3 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg3",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg4", {
        type: nullable("NotDeprecatedMessageInnerMessage2Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg4 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg4",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            options: { deprecated: true },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage",
        name: "NotDeprecatedMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInput"],
    ): NotDeprecatedMessage2 => {
      const output = new NotDeprecatedMessage2();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      if (input.msg1 != null) {
        output.setMsg1(
          NotDeprecatedMessageInnerMessage1Input.toProto(input.msg1),
        );
      }
      if (input.msg2 != null) {
        output.setMsg2(
          NotDeprecatedMessageInnerMessage2Input.toProto(input.msg2),
        );
      }
      if (input.msg3 != null) {
        output.setMsg3(
          NotDeprecatedMessageInnerMessage1Input.toProto(input.msg3),
        );
      }
      if (input.msg4 != null) {
        output.setMsg4(
          NotDeprecatedMessageInnerMessage2Input.toProto(input.msg4),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "body",
              typeFullName: "string",
              options: { deprecated: true },
            },
          },
        },
        enum: {
          type: nullable("DeprecatedEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedEnum",
            },
          },
        },
        msg1: {
          type: nullable("NotDeprecatedMessageInnerMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg2: {
          type: nullable("NotDeprecatedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "msg2",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            },
          },
        },
        msg3: {
          type: nullable("NotDeprecatedMessageInnerMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg3",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg4: {
          type: nullable("NotDeprecatedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "msg4",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
              options: { deprecated: true },
            },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessagePartialInput = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessagePartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "body",
            typeFullName: "string",
            options: { deprecated: true },
          },
        },
      });
      t.field("enum", {
        type: nullable("DeprecatedEnum"),
        deprecation:
          "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedEnum",
          },
        },
      });
      t.field("msg1", {
        type: nullable("NotDeprecatedMessageInnerMessage1PartialInput"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg1 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg2", {
        type: nullable("NotDeprecatedMessageInnerMessage2PartialInput"),
        extensions: {
          protobufField: {
            name: "msg2",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
          },
        },
      });
      t.field("msg3", {
        type: nullable("NotDeprecatedMessageInnerMessage1PartialInput"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg3 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg3",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg4", {
        type: nullable("NotDeprecatedMessageInnerMessage2PartialInput"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg4 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg4",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            options: { deprecated: true },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage",
        name: "NotDeprecatedMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessagePartialInput"],
    ): NotDeprecatedMessage2 => {
      const output = new NotDeprecatedMessage2();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      if (input.msg1 != null) {
        output.setMsg1(
          NotDeprecatedMessageInnerMessage1PartialInput.toProto(input.msg1),
        );
      }
      if (input.msg2 != null) {
        output.setMsg2(
          NotDeprecatedMessageInnerMessage2PartialInput.toProto(input.msg2),
        );
      }
      if (input.msg3 != null) {
        output.setMsg3(
          NotDeprecatedMessageInnerMessage1PartialInput.toProto(input.msg3),
        );
      }
      if (input.msg4 != null) {
        output.setMsg4(
          NotDeprecatedMessageInnerMessage2PartialInput.toProto(input.msg4),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "body",
              typeFullName: "string",
              options: { deprecated: true },
            },
          },
        },
        enum: {
          type: nullable("DeprecatedEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedEnum",
            },
          },
        },
        msg1: {
          type: nullable("NotDeprecatedMessageInnerMessage1PartialInput"),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg2: {
          type: nullable("NotDeprecatedMessageInnerMessage2PartialInput"),
          extensions: {
            protobufField: {
              name: "msg2",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            },
          },
        },
        msg3: {
          type: nullable("NotDeprecatedMessageInnerMessage1PartialInput"),
          extensions: {
            protobufField: {
              name: "msg3",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg4: {
          type: nullable("NotDeprecatedMessageInnerMessage2PartialInput"),
          extensions: {
            protobufField: {
              name: "msg4",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
              options: { deprecated: true },
            },
          },
        },
      },
    },
  },
);

export const DeprecatedMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessageInnerMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedMessageInnerMessageInput"],
    ): DeprecatedMessage1.InnerMessage => {
      const output = new DeprecatedMessage1.InnerMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const DeprecatedMessageInnerMessagePartialInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessageInnerMessagePartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["DeprecatedMessageInnerMessagePartialInput"],
    ): DeprecatedMessage1.InnerMessage => {
      const output = new DeprecatedMessage1.InnerMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInnerMessage1Input = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
        name: "InnerMessage1",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage1Input"],
    ): NotDeprecatedMessage2.InnerMessage1 => {
      const output = new NotDeprecatedMessage2.InnerMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInnerMessage1PartialInput = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage1PartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
        name: "InnerMessage1",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage1PartialInput"],
    ): NotDeprecatedMessage2.InnerMessage1 => {
      const output = new NotDeprecatedMessage2.InnerMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInnerMessage2Input = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage2Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage2Input"],
    ): NotDeprecatedMessage2.InnerMessage2 => {
      const output = new NotDeprecatedMessage2.InnerMessage2();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInnerMessage2PartialInput = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage2PartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage2PartialInput"],
    ): NotDeprecatedMessage2.InnerMessage2 => {
      const output = new NotDeprecatedMessage2.InnerMessage2();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const NotDeprecatedMessageNotDeprecatedOneof = unionType({
  name: "NotDeprecatedMessageNotDeprecatedOneof",
  definition: (t) => {
    t.members(
      NotDeprecatedMessageInnerMessage1,
      NotDeprecatedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName:
        "testapis.deprecation.NotDeprecatedMessage.not_deprecated_oneof",
      name: "not_deprecated_oneof",
      messageName: "NotDeprecatedMessage",
      package: "testapis.deprecation",
      fields: [{
        name: "msg1",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      }, {
        name: "msg2",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      }],
    },
  },
});
export const NotDeprecatedMessageDeprecatedOneof = unionType({
  name: "NotDeprecatedMessageDeprecatedOneof",
  definition: (t) => {
    t.members(
      NotDeprecatedMessageInnerMessage1,
      NotDeprecatedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.deprecated_oneof",
      name: "deprecated_oneof",
      messageName: "NotDeprecatedMessage",
      package: "testapis.deprecation",
      fields: [{
        name: "msg3",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      }, {
        name: "msg4",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      }],
    },
  },
});
export const NotDeprecatedEnum = enumType({
  name: "NotDeprecatedEnum",
  members: [{
    name: "NOT_DEPRECATED_FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "NOT_DEPRECATED_FOO" } },
  }, {
    name: "DEPRECATED_BAR",
    value: 2,
    deprecation:
      "testapis.deprecation.NotDeprecatedEnum.DEPRECATED_BAR is mark as deprecated in a *.proto file.",
    extensions: {
      protobufEnumValue: {
        name: "DEPRECATED_BAR",
        options: { deprecated: true },
      },
    },
  }],
  extensions: {
    protobufEnum: {
      name: "NotDeprecatedEnum",
      fullName: "testapis.deprecation.NotDeprecatedEnum",
      package: "testapis.deprecation",
    },
  },
});
export const DeprecatedEnum = enumType({
  name: "DeprecatedEnum",
  members: [{
    name: "DEPRECATED_BAZ",
    value: 1,
    deprecation:
      "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_BAZ" } },
  }, {
    name: "DEPRECATED_QUX",
    value: 2,
    deprecation:
      "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_QUX" } },
  }],
  extensions: {
    protobufEnum: {
      name: "DeprecatedEnum",
      fullName: "testapis.deprecation.DeprecatedEnum",
      package: "testapis.deprecation",
      options: { deprecated: true },
    },
  },
});
",
    "name": "testapis/deprecation/deprecation_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

/* eslint-disable */

import {
  DeprecatedFileEnum as DeprecatedFileEnum2,
  DeprecatedFileMessage as DeprecatedFileMessage1,
} from "@testapis/proto/testapis/deprecation/file_deprecation_pb";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";

export type testapis$deprecation$DeprecatedFileMessage = DeprecatedFileMessage1;
export const DeprecatedFileMessage = objectType({
  name: "DeprecatedFileMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("enum", {
      type: nullable("DeprecatedFileEnum"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === DeprecatedFileEnum2.DEPRECATED_FILE_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.DeprecatedFileEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedFileMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedFileMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedFileMessage",
      name: "DeprecatedFileMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$DeprecatedFileMessage$InnerMessage =
  DeprecatedFileMessage1.InnerMessage;
export const DeprecatedFileMessageInnerMessage = objectType({
  name: "DeprecatedFileMessageInnerMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedFileMessage1.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedFileMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedFileMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.deprecation",
    },
  },
});

export const DeprecatedFileMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable("DeprecatedFileEnum"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedFileEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage",
        name: "DeprecatedFileMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedFileMessageInput"],
    ): DeprecatedFileMessage1 => {
      const output = new DeprecatedFileMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable("DeprecatedFileEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedFileEnum",
            },
          },
        },
      },
    },
  },
);

export const DeprecatedFileMessagePartialInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessagePartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable("DeprecatedFileEnum"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedFileEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage",
        name: "DeprecatedFileMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedFileMessagePartialInput"],
    ): DeprecatedFileMessage1 => {
      const output = new DeprecatedFileMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable("DeprecatedFileEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedFileEnum",
            },
          },
        },
      },
    },
  },
);

export const DeprecatedFileMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessageInnerMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedFileMessageInnerMessageInput"],
    ): DeprecatedFileMessage1.InnerMessage => {
      const output = new DeprecatedFileMessage1.InnerMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const DeprecatedFileMessageInnerMessagePartialInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessageInnerMessagePartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["DeprecatedFileMessageInnerMessagePartialInput"],
    ): DeprecatedFileMessage1.InnerMessage => {
      const output = new DeprecatedFileMessage1.InnerMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const DeprecatedFileEnum = enumType({
  name: "DeprecatedFileEnum",
  members: [{
    name: "DEPRECATED_FILE_FOO",
    value: 1,
    deprecation:
      "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_FILE_FOO" } },
  }, {
    name: "DEPRECATED_FILE_BAR",
    value: 2,
    deprecation:
      "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_FILE_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "DeprecatedFileEnum",
      fullName: "testapis.deprecation.DeprecatedFileEnum",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/file_deprecation_pb_nexus.ts",
  },
]
`;

exports[`'testapis.deprecation' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/deprecation";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";

export type testapis$deprecation$DeprecatedMessage =
  testapis.deprecation.DeprecatedMessage;
export const DeprecatedMessage = objectType({
  name: "DeprecatedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("enum", {
      type: nullable("NotDeprecatedEnum"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.enum;
        if (value == null) {
          return null;
        }
        if (
          value ===
            testapis.deprecation.NotDeprecatedEnum
              .NOT_DEPRECATED_ENUM_UNSPECIFIED
        ) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.NotDeprecatedEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.deprecation.DeprecatedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedMessage",
      name: "DeprecatedMessage",
      package: "testapis.deprecation",
      options: { deprecated: true },
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage =
  testapis.deprecation.NotDeprecatedMessage;
export const NotDeprecatedMessage = objectType({
  name: "NotDeprecatedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "body",
          typeFullName: "string",
          options: { deprecated: true },
        },
      },
    });
    t.field("enum", {
      type: nullable("DeprecatedEnum"),
      deprecation:
        "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.enum;
        if (value == null) {
          return null;
        }
        if (
          value ===
            testapis.deprecation.DeprecatedEnum.DEPRECATED_ENUM_UNSPECIFIED
        ) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.DeprecatedEnum",
        },
      },
    });
    t.field("notDeprecatedOneof", {
      type: nullable("NotDeprecatedMessageNotDeprecatedOneof"),
      resolve: (source) => {
        const value = source;
        if (value.msg1 != null) {
          return value.msg1;
        }
        if (value.msg2 != null) {
          return value.msg2;
        }
        return null;
      },
      extensions: { protobufField: { name: "not_deprecated_oneof" } },
    });
    t.field("deprecatedOneof", {
      type: nullable("NotDeprecatedMessageDeprecatedOneof"),
      deprecation:
        "testapis.deprecation.NotDeprecatedMessage.deprecated_oneof is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source;
        if (value.msg3 != null) {
          return value.msg3;
        }
        if (value.msg4 != null) {
          return value.msg4;
        }
        return null;
      },
      extensions: { protobufField: { name: "deprecated_oneof" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.deprecation.NotDeprecatedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage",
      name: "NotDeprecatedMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$DeprecatedMessage$InnerMessage =
  testapis.deprecation.DeprecatedMessage.InnerMessage;
export const DeprecatedMessageInnerMessage = objectType({
  name: "DeprecatedMessageInnerMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.deprecation.DeprecatedMessage.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage$InnerMessage1 =
  testapis.deprecation.NotDeprecatedMessage.InnerMessage1;
export const NotDeprecatedMessageInnerMessage1 = objectType({
  name: "NotDeprecatedMessageInnerMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof
      testapis.deprecation.NotDeprecatedMessage.InnerMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage$InnerMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      name: "InnerMessage1",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage$InnerMessage2 =
  testapis.deprecation.NotDeprecatedMessage.InnerMessage2;
export const NotDeprecatedMessageInnerMessage2 = objectType({
  name: "NotDeprecatedMessageInnerMessage2",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof
      testapis.deprecation.NotDeprecatedMessage.InnerMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage$InnerMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      name: "InnerMessage2",
      package: "testapis.deprecation",
    },
  },
});

export const DeprecatedMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable("NotDeprecatedEnum"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.NotDeprecatedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage",
        name: "DeprecatedMessage",
        package: "testapis.deprecation",
        options: { deprecated: true },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedMessageInput"],
    ): testapis.deprecation.DeprecatedMessage => {
      const output = new testapis.deprecation.DeprecatedMessage();
      if (input.body != null) {
        output.body = input.body;
      }
      if (input.enum != null) {
        output.enum = input.enum;
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable("NotDeprecatedEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.NotDeprecatedEnum",
            },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInput = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "body",
            typeFullName: "string",
            options: { deprecated: true },
          },
        },
      });
      t.field("enum", {
        type: nullable("DeprecatedEnum"),
        deprecation:
          "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedEnum",
          },
        },
      });
      t.field("msg1", {
        type: nullable("NotDeprecatedMessageInnerMessage1Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg1 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg2", {
        type: nullable("NotDeprecatedMessageInnerMessage2Input"),
        extensions: {
          protobufField: {
            name: "msg2",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
          },
        },
      });
      t.field("msg3", {
        type: nullable("NotDeprecatedMessageInnerMessage1Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg3 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg3",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg4", {
        type: nullable("NotDeprecatedMessageInnerMessage2Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg4 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg4",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            options: { deprecated: true },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage",
        name: "NotDeprecatedMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInput"],
    ): testapis.deprecation.NotDeprecatedMessage => {
      const output = new testapis.deprecation.NotDeprecatedMessage();
      if (input.body != null) {
        output.body = input.body;
      }
      if (input.enum != null) {
        output.enum = input.enum;
      }
      if (input.msg1 != null) {
        output.msg1 = NotDeprecatedMessageInnerMessage1Input.toProto(
          input.msg1,
        );
      }
      if (input.msg2 != null) {
        output.msg2 = NotDeprecatedMessageInnerMessage2Input.toProto(
          input.msg2,
        );
      }
      if (input.msg3 != null) {
        output.msg3 = NotDeprecatedMessageInnerMessage1Input.toProto(
          input.msg3,
        );
      }
      if (input.msg4 != null) {
        output.msg4 = NotDeprecatedMessageInnerMessage2Input.toProto(
          input.msg4,
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "body",
              typeFullName: "string",
              options: { deprecated: true },
            },
          },
        },
        enum: {
          type: nullable("DeprecatedEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedEnum",
            },
          },
        },
        msg1: {
          type: nullable("NotDeprecatedMessageInnerMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg2: {
          type: nullable("NotDeprecatedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "msg2",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            },
          },
        },
        msg3: {
          type: nullable("NotDeprecatedMessageInnerMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg3",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg4: {
          type: nullable("NotDeprecatedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "msg4",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
              options: { deprecated: true },
            },
          },
        },
      },
    },
  },
);

export const DeprecatedMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessageInnerMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedMessageInnerMessageInput"],
    ): testapis.deprecation.DeprecatedMessage.InnerMessage => {
      const output = new testapis.deprecation.DeprecatedMessage.InnerMessage();
      if (input.body != null) {
        output.body = input.body;
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInnerMessage1Input = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
        name: "InnerMessage1",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage1Input"],
    ): testapis.deprecation.NotDeprecatedMessage.InnerMessage1 => {
      const output = new testapis.deprecation.NotDeprecatedMessage
        .InnerMessage1();
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInnerMessage2Input = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage2Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage2Input"],
    ): testapis.deprecation.NotDeprecatedMessage.InnerMessage2 => {
      const output = new testapis.deprecation.NotDeprecatedMessage
        .InnerMessage2();
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const NotDeprecatedMessageNotDeprecatedOneof = unionType({
  name: "NotDeprecatedMessageNotDeprecatedOneof",
  definition: (t) => {
    t.members(
      NotDeprecatedMessageInnerMessage1,
      NotDeprecatedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName:
        "testapis.deprecation.NotDeprecatedMessage.not_deprecated_oneof",
      name: "not_deprecated_oneof",
      messageName: "NotDeprecatedMessage",
      package: "testapis.deprecation",
      fields: [{
        name: "msg1",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      }, {
        name: "msg2",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      }],
    },
  },
});
export const NotDeprecatedMessageDeprecatedOneof = unionType({
  name: "NotDeprecatedMessageDeprecatedOneof",
  definition: (t) => {
    t.members(
      NotDeprecatedMessageInnerMessage1,
      NotDeprecatedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.deprecated_oneof",
      name: "deprecated_oneof",
      messageName: "NotDeprecatedMessage",
      package: "testapis.deprecation",
      fields: [{
        name: "msg3",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      }, {
        name: "msg4",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      }],
    },
  },
});
export const NotDeprecatedEnum = enumType({
  name: "NotDeprecatedEnum",
  members: [{
    name: "NOT_DEPRECATED_FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "NOT_DEPRECATED_FOO" } },
  }, {
    name: "DEPRECATED_BAR",
    value: 2,
    deprecation:
      "testapis.deprecation.NotDeprecatedEnum.DEPRECATED_BAR is mark as deprecated in a *.proto file.",
    extensions: {
      protobufEnumValue: {
        name: "DEPRECATED_BAR",
        options: { deprecated: true },
      },
    },
  }],
  extensions: {
    protobufEnum: {
      name: "NotDeprecatedEnum",
      fullName: "testapis.deprecation.NotDeprecatedEnum",
      package: "testapis.deprecation",
    },
  },
});
export const DeprecatedEnum = enumType({
  name: "DeprecatedEnum",
  members: [{
    name: "DEPRECATED_BAZ",
    value: 1,
    deprecation:
      "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_BAZ" } },
  }, {
    name: "DEPRECATED_QUX",
    value: 2,
    deprecation:
      "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_QUX" } },
  }],
  extensions: {
    protobufEnum: {
      name: "DeprecatedEnum",
      fullName: "testapis.deprecation.DeprecatedEnum",
      package: "testapis.deprecation",
      options: { deprecated: true },
    },
  },
});
",
    "name": "testapis/deprecation/deprecation_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/deprecation";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";

export type testapis$deprecation$DeprecatedFileMessage =
  testapis.deprecation.DeprecatedFileMessage;
export const DeprecatedFileMessage = objectType({
  name: "DeprecatedFileMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("enum", {
      type: nullable("DeprecatedFileEnum"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.enum;
        if (value == null) {
          return null;
        }
        if (
          value ===
            testapis.deprecation.DeprecatedFileEnum
              .DEPRECATED_FILE_ENUM_UNSPECIFIED
        ) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.DeprecatedFileEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.deprecation.DeprecatedFileMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedFileMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedFileMessage",
      name: "DeprecatedFileMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$DeprecatedFileMessage$InnerMessage =
  testapis.deprecation.DeprecatedFileMessage.InnerMessage;
export const DeprecatedFileMessageInnerMessage = objectType({
  name: "DeprecatedFileMessageInnerMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof
      testapis.deprecation.DeprecatedFileMessage.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedFileMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedFileMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.deprecation",
    },
  },
});

export const DeprecatedFileMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable("DeprecatedFileEnum"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedFileEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage",
        name: "DeprecatedFileMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedFileMessageInput"],
    ): testapis.deprecation.DeprecatedFileMessage => {
      const output = new testapis.deprecation.DeprecatedFileMessage();
      if (input.body != null) {
        output.body = input.body;
      }
      if (input.enum != null) {
        output.enum = input.enum;
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable("DeprecatedFileEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedFileEnum",
            },
          },
        },
      },
    },
  },
);

export const DeprecatedFileMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessageInnerMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedFileMessageInnerMessageInput"],
    ): testapis.deprecation.DeprecatedFileMessage.InnerMessage => {
      const output = new testapis.deprecation.DeprecatedFileMessage
        .InnerMessage();
      if (input.body != null) {
        output.body = input.body;
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const DeprecatedFileEnum = enumType({
  name: "DeprecatedFileEnum",
  members: [{
    name: "DEPRECATED_FILE_FOO",
    value: 1,
    deprecation:
      "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_FILE_FOO" } },
  }, {
    name: "DEPRECATED_FILE_BAR",
    value: 2,
    deprecation:
      "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_FILE_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "DeprecatedFileEnum",
      fullName: "testapis.deprecation.DeprecatedFileEnum",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/file_deprecation_pb_nexus.ts",
  },
]
`;

exports[`'testapis.deprecation' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/deprecation.proto

/* eslint-disable */

import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";
import {
  DeprecatedEnum as DeprecatedEnum4,
  DeprecatedMessage as DeprecatedMessage1,
  NotDeprecatedEnum as NotDeprecatedEnum3,
  NotDeprecatedMessage as NotDeprecatedMessage2,
} from "./testapis/deprecation/deprecation_pb";

export type testapis$deprecation$DeprecatedMessage = DeprecatedMessage1;
export const DeprecatedMessage = objectType({
  name: "DeprecatedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("enum", {
      type: nullable("NotDeprecatedEnum"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === NotDeprecatedEnum3.NOT_DEPRECATED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.NotDeprecatedEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedMessage",
      name: "DeprecatedMessage",
      package: "testapis.deprecation",
      options: { deprecated: true },
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage = NotDeprecatedMessage2;
export const NotDeprecatedMessage = objectType({
  name: "NotDeprecatedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: {
        protobufField: {
          name: "body",
          typeFullName: "string",
          options: { deprecated: true },
        },
      },
    });
    t.field("enum", {
      type: nullable("DeprecatedEnum"),
      deprecation:
        "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === DeprecatedEnum4.DEPRECATED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.DeprecatedEnum",
        },
      },
    });
    t.field("notDeprecatedOneof", {
      type: nullable("NotDeprecatedMessageNotDeprecatedOneof"),
      resolve: (source) => {
        const value = source;
        switch (value.getNotDeprecatedOneofCase()) {
          case NotDeprecatedMessage2.NotDeprecatedOneofCase.MSG1: {
            return value.getMsg1()!;
          }

          case NotDeprecatedMessage2.NotDeprecatedOneofCase.MSG2: {
            return value.getMsg2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "not_deprecated_oneof" } },
    });
    t.field("deprecatedOneof", {
      type: nullable("NotDeprecatedMessageDeprecatedOneof"),
      deprecation:
        "testapis.deprecation.NotDeprecatedMessage.deprecated_oneof is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source;
        switch (value.getDeprecatedOneofCase()) {
          case NotDeprecatedMessage2.DeprecatedOneofCase.MSG3: {
            return value.getMsg3()!;
          }

          case NotDeprecatedMessage2.DeprecatedOneofCase.MSG4: {
            return value.getMsg4()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "deprecated_oneof" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage",
      name: "NotDeprecatedMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$DeprecatedMessage$InnerMessage =
  DeprecatedMessage1.InnerMessage;
export const DeprecatedMessageInnerMessage = objectType({
  name: "DeprecatedMessageInnerMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedMessage1.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage$InnerMessage1 =
  NotDeprecatedMessage2.InnerMessage1;
export const NotDeprecatedMessageInnerMessage1 = objectType({
  name: "NotDeprecatedMessageInnerMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage2.InnerMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage$InnerMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      name: "InnerMessage1",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$NotDeprecatedMessage$InnerMessage2 =
  NotDeprecatedMessage2.InnerMessage2;
export const NotDeprecatedMessageInnerMessage2 = objectType({
  name: "NotDeprecatedMessageInnerMessage2",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NotDeprecatedMessage2.InnerMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$NotDeprecatedMessage$InnerMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      name: "InnerMessage2",
      package: "testapis.deprecation",
    },
  },
});

export const DeprecatedMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable("NotDeprecatedEnum"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.NotDeprecatedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage",
        name: "DeprecatedMessage",
        package: "testapis.deprecation",
        options: { deprecated: true },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedMessageInput"],
    ): DeprecatedMessage1 => {
      const output = new DeprecatedMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable("NotDeprecatedEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.NotDeprecatedEnum",
            },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInput = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.body is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "body",
            typeFullName: "string",
            options: { deprecated: true },
          },
        },
      });
      t.field("enum", {
        type: nullable("DeprecatedEnum"),
        deprecation:
          "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedEnum",
          },
        },
      });
      t.field("msg1", {
        type: nullable("NotDeprecatedMessageInnerMessage1Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg1 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg2", {
        type: nullable("NotDeprecatedMessageInnerMessage2Input"),
        extensions: {
          protobufField: {
            name: "msg2",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
          },
        },
      });
      t.field("msg3", {
        type: nullable("NotDeprecatedMessageInnerMessage1Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg3 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg3",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
            options: { deprecated: true },
          },
        },
      });
      t.field("msg4", {
        type: nullable("NotDeprecatedMessageInnerMessage2Input"),
        deprecation:
          "testapis.deprecation.NotDeprecatedMessage.msg4 is mark as deprecated in a *.proto file.",
        extensions: {
          protobufField: {
            name: "msg4",
            typeFullName:
              "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            options: { deprecated: true },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage",
        name: "NotDeprecatedMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInput"],
    ): NotDeprecatedMessage2 => {
      const output = new NotDeprecatedMessage2();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      if (input.msg1 != null) {
        output.setMsg1(
          NotDeprecatedMessageInnerMessage1Input.toProto(input.msg1),
        );
      }
      if (input.msg2 != null) {
        output.setMsg2(
          NotDeprecatedMessageInnerMessage2Input.toProto(input.msg2),
        );
      }
      if (input.msg3 != null) {
        output.setMsg3(
          NotDeprecatedMessageInnerMessage1Input.toProto(input.msg3),
        );
      }
      if (input.msg4 != null) {
        output.setMsg4(
          NotDeprecatedMessageInnerMessage2Input.toProto(input.msg4),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "body",
              typeFullName: "string",
              options: { deprecated: true },
            },
          },
        },
        enum: {
          type: nullable("DeprecatedEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedEnum",
            },
          },
        },
        msg1: {
          type: nullable("NotDeprecatedMessageInnerMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg2: {
          type: nullable("NotDeprecatedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "msg2",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
            },
          },
        },
        msg3: {
          type: nullable("NotDeprecatedMessageInnerMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg3",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
              options: { deprecated: true },
            },
          },
        },
        msg4: {
          type: nullable("NotDeprecatedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "msg4",
              typeFullName:
                "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
              options: { deprecated: true },
            },
          },
        },
      },
    },
  },
);

export const DeprecatedMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedMessageInnerMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis.deprecation.DeprecatedMessage is mark as deprecated in a *.proto file.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedMessageInnerMessageInput"],
    ): DeprecatedMessage1.InnerMessage => {
      const output = new DeprecatedMessage1.InnerMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInnerMessage1Input = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
        name: "InnerMessage1",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage1Input"],
    ): NotDeprecatedMessage2.InnerMessage1 => {
      const output = new NotDeprecatedMessage2.InnerMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NotDeprecatedMessageInnerMessage2Input = Object.assign(
  inputObjectType({
    name: "NotDeprecatedMessageInnerMessage2Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NotDeprecatedMessageInnerMessage2Input"],
    ): NotDeprecatedMessage2.InnerMessage2 => {
      const output = new NotDeprecatedMessage2.InnerMessage2();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const NotDeprecatedMessageNotDeprecatedOneof = unionType({
  name: "NotDeprecatedMessageNotDeprecatedOneof",
  definition: (t) => {
    t.members(
      NotDeprecatedMessageInnerMessage1,
      NotDeprecatedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName:
        "testapis.deprecation.NotDeprecatedMessage.not_deprecated_oneof",
      name: "not_deprecated_oneof",
      messageName: "NotDeprecatedMessage",
      package: "testapis.deprecation",
      fields: [{
        name: "msg1",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      }, {
        name: "msg2",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      }],
    },
  },
});
export const NotDeprecatedMessageDeprecatedOneof = unionType({
  name: "NotDeprecatedMessageDeprecatedOneof",
  definition: (t) => {
    t.members(
      NotDeprecatedMessageInnerMessage1,
      NotDeprecatedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.deprecation.NotDeprecatedMessage.deprecated_oneof",
      name: "deprecated_oneof",
      messageName: "NotDeprecatedMessage",
      package: "testapis.deprecation",
      fields: [{
        name: "msg3",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage1",
      }, {
        name: "msg4",
        type: "testapis.deprecation.NotDeprecatedMessage.InnerMessage2",
      }],
    },
  },
});
export const NotDeprecatedEnum = enumType({
  name: "NotDeprecatedEnum",
  members: [{
    name: "NOT_DEPRECATED_FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "NOT_DEPRECATED_FOO" } },
  }, {
    name: "DEPRECATED_BAR",
    value: 2,
    deprecation:
      "testapis.deprecation.NotDeprecatedEnum.DEPRECATED_BAR is mark as deprecated in a *.proto file.",
    extensions: {
      protobufEnumValue: {
        name: "DEPRECATED_BAR",
        options: { deprecated: true },
      },
    },
  }],
  extensions: {
    protobufEnum: {
      name: "NotDeprecatedEnum",
      fullName: "testapis.deprecation.NotDeprecatedEnum",
      package: "testapis.deprecation",
    },
  },
});
export const DeprecatedEnum = enumType({
  name: "DeprecatedEnum",
  members: [{
    name: "DEPRECATED_BAZ",
    value: 1,
    deprecation:
      "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_BAZ" } },
  }, {
    name: "DEPRECATED_QUX",
    value: 2,
    deprecation:
      "testapis.deprecation.DeprecatedEnum is mark as deprecated in a *.proto file.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_QUX" } },
  }],
  extensions: {
    protobufEnum: {
      name: "DeprecatedEnum",
      fullName: "testapis.deprecation.DeprecatedEnum",
      package: "testapis.deprecation",
      options: { deprecated: true },
    },
  },
});
",
    "name": "testapis/deprecation/deprecation_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/deprecation/file_deprecation.proto

/* eslint-disable */

import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";
import {
  DeprecatedFileEnum as DeprecatedFileEnum2,
  DeprecatedFileMessage as DeprecatedFileMessage1,
} from "./testapis/deprecation/file_deprecation_pb";

export type testapis$deprecation$DeprecatedFileMessage = DeprecatedFileMessage1;
export const DeprecatedFileMessage = objectType({
  name: "DeprecatedFileMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("enum", {
      type: nullable("DeprecatedFileEnum"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === DeprecatedFileEnum2.DEPRECATED_FILE_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.deprecation.DeprecatedFileEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedFileMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedFileMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedFileMessage",
      name: "DeprecatedFileMessage",
      package: "testapis.deprecation",
    },
  },
});

export type testapis$deprecation$DeprecatedFileMessage$InnerMessage =
  DeprecatedFileMessage1.InnerMessage;
export const DeprecatedFileMessageInnerMessage = objectType({
  name: "DeprecatedFileMessageInnerMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      deprecation:
        "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof DeprecatedFileMessage1.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$deprecation$DeprecatedFileMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.deprecation.DeprecatedFileMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.deprecation",
    },
  },
});

export const DeprecatedFileMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("enum", {
        type: nullable("DeprecatedFileEnum"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.deprecation.DeprecatedFileEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage",
        name: "DeprecatedFileMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedFileMessageInput"],
    ): DeprecatedFileMessage1 => {
      const output = new DeprecatedFileMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        enum: {
          type: nullable("DeprecatedFileEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.deprecation.DeprecatedFileEnum",
            },
          },
        },
      },
    },
  },
);

export const DeprecatedFileMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "DeprecatedFileMessageInnerMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        deprecation:
          "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.deprecation.DeprecatedFileMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.deprecation",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["DeprecatedFileMessageInnerMessageInput"],
    ): DeprecatedFileMessage1.InnerMessage => {
      const output = new DeprecatedFileMessage1.InnerMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const DeprecatedFileEnum = enumType({
  name: "DeprecatedFileEnum",
  members: [{
    name: "DEPRECATED_FILE_FOO",
    value: 1,
    deprecation:
      "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_FILE_FOO" } },
  }, {
    name: "DEPRECATED_FILE_BAR",
    value: 2,
    deprecation:
      "testapis/deprecation/file_deprecation.proto is mark as deprecated.",
    extensions: { protobufEnumValue: { name: "DEPRECATED_FILE_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "DeprecatedFileEnum",
      fullName: "testapis.deprecation.DeprecatedFileEnum",
      package: "testapis.deprecation",
    },
  },
});
",
    "name": "testapis/deprecation/file_deprecation_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_from_same_p…' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/child.proto

/* eslint-disable */

import { ChildMessage as ChildMessage1 } from "@testapis/proto/testapis/edgecases/import_from_same_pkg/child_pb";
import { nonNull, objectType } from "nexus";

export type testapis$edgecases$import_from_same_pkg$ChildMessage =
  ChildMessage1;
export const ChildMessage = objectType({
  name: "ChildMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ChildMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_from_same_pkg$ChildMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
      name: "ChildMessage",
      package: "testapis.edgecases.import_from_same_pkg",
    },
  },
});
",
    "name": "testapis/edgecases/import_from_same_pkg/ChildMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/child.proto

/* eslint-disable */

import { ChildMessage } from "@testapis/proto/testapis/edgecases/import_from_same_pkg/child_pb";
import { inputObjectType, nonNull } from "nexus";

export const ChildMessageInput = Object.assign(
  inputObjectType({
    name: "ChildMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
        name: "ChildMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ChildMessageInput"],
    ): ChildMessage => {
      const output = new ChildMessage();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_from_same_pkg/ChildMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/parent.proto

/* eslint-disable */

import { ParentMessage as ParentMessage1 } from "@testapis/proto/testapis/edgecases/import_from_same_pkg/parent_pb";
import { nullable, objectType } from "nexus";
import { ChildMessage } from "./ChildMessage.nexus";

export type testapis$edgecases$import_from_same_pkg$ParentMessage =
  ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("child", {
      type: nullable(ChildMessage),
      resolve: (source) => {
        const value = source.getChild();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "child",
          typeFullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_from_same_pkg$ParentMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_from_same_pkg.ParentMessage",
      name: "ParentMessage",
      package: "testapis.edgecases.import_from_same_pkg",
    },
  },
});
",
    "name": "testapis/edgecases/import_from_same_pkg/ParentMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/parent.proto

/* eslint-disable */

import { ParentMessage } from "@testapis/proto/testapis/edgecases/import_from_same_pkg/parent_pb";
import { inputObjectType, nullable } from "nexus";
import { ChildMessageInput } from "./ChildMessageInput.nexus";

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("child", {
        type: nullable(ChildMessageInput),
        extensions: {
          protobufField: {
            name: "child",
            typeFullName:
              "testapis.edgecases.import_from_same_pkg.ChildMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ParentMessage",
        name: "ParentMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage => {
      const output = new ParentMessage();
      if (input.child != null) {
        output.setChild(ChildMessageInput.toProto(input.child));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        child: {
          type: nullable(ChildMessageInput),
          extensions: {
            protobufField: {
              name: "child",
              typeFullName:
                "testapis.edgecases.import_from_same_pkg.ChildMessage",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_from_same_pkg/ParentMessageInput.nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_from_same_p…' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/child.proto

/* eslint-disable */

import { ChildMessage as ChildMessage1 } from "@testapis/proto/testapis/edgecases/import_from_same_pkg/child_pb";
import { inputObjectType, nonNull, objectType } from "nexus";

export type testapis$edgecases$import_from_same_pkg$ChildMessage =
  ChildMessage1;
export const ChildMessage = objectType({
  name: "ChildMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ChildMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_from_same_pkg$ChildMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
      name: "ChildMessage",
      package: "testapis.edgecases.import_from_same_pkg",
    },
  },
});

export const ChildMessageInput = Object.assign(
  inputObjectType({
    name: "ChildMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
        name: "ChildMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ChildMessageInput"],
    ): ChildMessage1 => {
      const output = new ChildMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_from_same_pkg/child_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/parent.proto

/* eslint-disable */

import { ParentMessage as ParentMessage1 } from "@testapis/proto/testapis/edgecases/import_from_same_pkg/parent_pb";
import { inputObjectType, nullable, objectType } from "nexus";
import { ChildMessageInput } from "./child_pb_nexus";

export type testapis$edgecases$import_from_same_pkg$ParentMessage =
  ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("child", {
      type: nullable("ChildMessage"),
      resolve: (source) => {
        const value = source.getChild();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "child",
          typeFullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_from_same_pkg$ParentMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_from_same_pkg.ParentMessage",
      name: "ParentMessage",
      package: "testapis.edgecases.import_from_same_pkg",
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("child", {
        type: nullable("ChildMessageInput"),
        extensions: {
          protobufField: {
            name: "child",
            typeFullName:
              "testapis.edgecases.import_from_same_pkg.ChildMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ParentMessage",
        name: "ParentMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      if (input.child != null) {
        output.setChild(ChildMessageInput.toProto(input.child));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        child: {
          type: nullable("ChildMessageInput"),
          extensions: {
            protobufField: {
              name: "child",
              typeFullName:
                "testapis.edgecases.import_from_same_pkg.ChildMessage",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_from_same_pkg/parent_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_from_same_p…' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/child.proto

/* eslint-disable */

import { ChildMessage as ChildMessage1 } from "@testapis/proto/testapis/edgecases/import_from_same_pkg/child_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";

export type testapis$edgecases$import_from_same_pkg$ChildMessage =
  ChildMessage1;
export const ChildMessage = objectType({
  name: "ChildMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ChildMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_from_same_pkg$ChildMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
      name: "ChildMessage",
      package: "testapis.edgecases.import_from_same_pkg",
    },
  },
});

export const ChildMessageInput = Object.assign(
  inputObjectType({
    name: "ChildMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
        name: "ChildMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ChildMessageInput"],
    ): ChildMessage1 => {
      const output = new ChildMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const ChildMessagePartialInput = Object.assign(
  inputObjectType({
    name: "ChildMessagePartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
        name: "ChildMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ChildMessagePartialInput"],
    ): ChildMessage1 => {
      const output = new ChildMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_from_same_pkg/child_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/parent.proto

/* eslint-disable */

import { ParentMessage as ParentMessage1 } from "@testapis/proto/testapis/edgecases/import_from_same_pkg/parent_pb";
import { inputObjectType, nullable, objectType } from "nexus";
import { ChildMessageInput, ChildMessagePartialInput } from "./child_pb_nexus";

export type testapis$edgecases$import_from_same_pkg$ParentMessage =
  ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("child", {
      type: nullable("ChildMessage"),
      resolve: (source) => {
        const value = source.getChild();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "child",
          typeFullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_from_same_pkg$ParentMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_from_same_pkg.ParentMessage",
      name: "ParentMessage",
      package: "testapis.edgecases.import_from_same_pkg",
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("child", {
        type: nullable("ChildMessageInput"),
        extensions: {
          protobufField: {
            name: "child",
            typeFullName:
              "testapis.edgecases.import_from_same_pkg.ChildMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ParentMessage",
        name: "ParentMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      if (input.child != null) {
        output.setChild(ChildMessageInput.toProto(input.child));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        child: {
          type: nullable("ChildMessageInput"),
          extensions: {
            protobufField: {
              name: "child",
              typeFullName:
                "testapis.edgecases.import_from_same_pkg.ChildMessage",
            },
          },
        },
      },
    },
  },
);

export const ParentMessagePartialInput = Object.assign(
  inputObjectType({
    name: "ParentMessagePartialInput",
    definition: (t) => {
      t.field("child", {
        type: nullable("ChildMessagePartialInput"),
        extensions: {
          protobufField: {
            name: "child",
            typeFullName:
              "testapis.edgecases.import_from_same_pkg.ChildMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ParentMessage",
        name: "ParentMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessagePartialInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      if (input.child != null) {
        output.setChild(ChildMessagePartialInput.toProto(input.child));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        child: {
          type: nullable("ChildMessagePartialInput"),
          extensions: {
            protobufField: {
              name: "child",
              typeFullName:
                "testapis.edgecases.import_from_same_pkg.ChildMessage",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_from_same_pkg/parent_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_from_same_p…' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/child.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/edgecases/import_from_same_pkg";
import { inputObjectType, nonNull, objectType } from "nexus";

export type testapis$edgecases$import_from_same_pkg$ChildMessage =
  testapis.edgecases.import_from_same_pkg.ChildMessage;
export const ChildMessage = objectType({
  name: "ChildMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.edgecases.import_from_same_pkg.ChildMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_from_same_pkg$ChildMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
      name: "ChildMessage",
      package: "testapis.edgecases.import_from_same_pkg",
    },
  },
});

export const ChildMessageInput = Object.assign(
  inputObjectType({
    name: "ChildMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
        name: "ChildMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ChildMessageInput"],
    ): testapis.edgecases.import_from_same_pkg.ChildMessage => {
      const output = new testapis.edgecases.import_from_same_pkg.ChildMessage();
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_from_same_pkg/child_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/parent.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/edgecases/import_from_same_pkg";
import { inputObjectType, nullable, objectType } from "nexus";
import { ChildMessageInput } from "./child_pb_nexus";

export type testapis$edgecases$import_from_same_pkg$ParentMessage =
  testapis.edgecases.import_from_same_pkg.ParentMessage;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("child", {
      type: nullable("ChildMessage"),
      resolve: (source) => {
        const value = source.child;
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "child",
          typeFullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof
      testapis.edgecases.import_from_same_pkg.ParentMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_from_same_pkg$ParentMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_from_same_pkg.ParentMessage",
      name: "ParentMessage",
      package: "testapis.edgecases.import_from_same_pkg",
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("child", {
        type: nullable("ChildMessageInput"),
        extensions: {
          protobufField: {
            name: "child",
            typeFullName:
              "testapis.edgecases.import_from_same_pkg.ChildMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ParentMessage",
        name: "ParentMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): testapis.edgecases.import_from_same_pkg.ParentMessage => {
      const output = new testapis.edgecases.import_from_same_pkg
        .ParentMessage();
      if (input.child != null) {
        output.child = ChildMessageInput.toProto(input.child);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        child: {
          type: nullable("ChildMessageInput"),
          extensions: {
            protobufField: {
              name: "child",
              typeFullName:
                "testapis.edgecases.import_from_same_pkg.ChildMessage",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_from_same_pkg/parent_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_from_same_p…' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/child.proto

/* eslint-disable */

import { inputObjectType, nonNull, objectType } from "nexus";
import { ChildMessage as ChildMessage1 } from "./testapis/edgecases/import_from_same_pkg/child_pb";

export type testapis$edgecases$import_from_same_pkg$ChildMessage =
  ChildMessage1;
export const ChildMessage = objectType({
  name: "ChildMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ChildMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_from_same_pkg$ChildMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
      name: "ChildMessage",
      package: "testapis.edgecases.import_from_same_pkg",
    },
  },
});

export const ChildMessageInput = Object.assign(
  inputObjectType({
    name: "ChildMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
        name: "ChildMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ChildMessageInput"],
    ): ChildMessage1 => {
      const output = new ChildMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_from_same_pkg/child_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_from_same_pkg/parent.proto

/* eslint-disable */

import { inputObjectType, nullable, objectType } from "nexus";
import { ChildMessageInput } from "./child_pb_nexus";
import { ParentMessage as ParentMessage1 } from "./testapis/edgecases/import_from_same_pkg/parent_pb";

export type testapis$edgecases$import_from_same_pkg$ParentMessage =
  ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("child", {
      type: nullable("ChildMessage"),
      resolve: (source) => {
        const value = source.getChild();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "child",
          typeFullName: "testapis.edgecases.import_from_same_pkg.ChildMessage",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_from_same_pkg$ParentMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_from_same_pkg.ParentMessage",
      name: "ParentMessage",
      package: "testapis.edgecases.import_from_same_pkg",
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("child", {
        type: nullable("ChildMessageInput"),
        extensions: {
          protobufField: {
            name: "child",
            typeFullName:
              "testapis.edgecases.import_from_same_pkg.ChildMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_from_same_pkg.ParentMessage",
        name: "ParentMessage",
        package: "testapis.edgecases.import_from_same_pkg",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      if (input.child != null) {
        output.setChild(ChildMessageInput.toProto(input.child));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        child: {
          type: nullable("ChildMessageInput"),
          extensions: {
            protobufField: {
              name: "child",
              typeFullName:
                "testapis.edgecases.import_from_same_pkg.ChildMessage",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_from_same_pkg/parent_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_oneof_membe…' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/member.proto

/* eslint-disable */

import { OneofMember1 as OneofMember11 } from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file/member_pb";
import { nonNull, objectType } from "nexus";

export type testapis$edgecases$import_oneof_member_from_other_file$OneofMember1 =
  OneofMember11;
export const OneofMember1 = objectType({
  name: "OneofMember1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMember11;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofMember1",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
      name: "OneofMember1",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/OneofMember1.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/member.proto

/* eslint-disable */

import { OneofMember2 as OneofMember21 } from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file/member_pb";
import { nonNull, objectType } from "nexus";

export type testapis$edgecases$import_oneof_member_from_other_file$OneofMember2 =
  OneofMember21;
export const OneofMember2 = objectType({
  name: "OneofMember2",
  definition: (t) => {
    t.field("count", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getCount();
        return value;
      },
      extensions: { protobufField: { name: "count", typeFullName: "int32" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMember21;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofMember2",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
      name: "OneofMember2",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/OneofMember2.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/member.proto

/* eslint-disable */

import { OneofMember1 } from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file/member_pb";
import { inputObjectType, nonNull } from "nexus";

export const OneofMember1Input = Object.assign(
  inputObjectType({
    name: "OneofMember1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
        name: "OneofMember1",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember1Input"],
    ): OneofMember1 => {
      const output = new OneofMember1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/OneofMember1Input.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/member.proto

/* eslint-disable */

import { OneofMember2 } from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file/member_pb";
import { inputObjectType, nonNull } from "nexus";

export const OneofMember2Input = Object.assign(
  inputObjectType({
    name: "OneofMember2Input",
    definition: (t) => {
      t.field("count", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "count", typeFullName: "int32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
        name: "OneofMember2",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember2Input"],
    ): OneofMember2 => {
      const output = new OneofMember2();
      output.setCount(input.count);
      return output;
    },
    _protoNexus: {
      fields: {
        count: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "count", typeFullName: "int32" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/OneofMember2Input.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/parent.proto

/* eslint-disable */

import { OneofParent as OneofParent1 } from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file/parent_pb";
import { nullable, objectType } from "nexus";

export type testapis$edgecases$import_oneof_member_from_other_file$OneofParent =
  OneofParent1;
export const OneofParent = objectType({
  name: "OneofParent",
  definition: (t) => {
    t.field("oneofField", {
      type: nullable(OneofParentOneofField),
      resolve: (source) => {
        const value = source;
        switch (value.getOneofFieldCase()) {
          case OneofParent1.OneofFieldCase.MEMBER1: {
            return value.getMember1()!;
          }

          case OneofParent1.OneofFieldCase.MEMBER2: {
            return value.getMember2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "oneof_field" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofParent1;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofParent",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofParent",
      name: "OneofParent",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/OneofParent.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/parent.proto

/* eslint-disable */

import { OneofParent } from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file/parent_pb";
import { inputObjectType, nullable } from "nexus";
import { OneofMember1Input } from "./OneofMember1Input.nexus";
import { OneofMember2Input } from "./OneofMember2Input.nexus";

export const OneofParentInput = Object.assign(
  inputObjectType({
    name: "OneofParentInput",
    definition: (t) => {
      t.field("member1", {
        type: nullable(OneofMember1Input),
        extensions: {
          protobufField: {
            name: "member1",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
          },
        },
      });
      t.field("member2", {
        type: nullable(OneofMember2Input),
        extensions: {
          protobufField: {
            name: "member2",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofParent",
        name: "OneofParent",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentInput"],
    ): OneofParent => {
      const output = new OneofParent();
      if (input.member1 != null) {
        output.setMember1(OneofMember1Input.toProto(input.member1));
      }
      if (input.member2 != null) {
        output.setMember2(OneofMember2Input.toProto(input.member2));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        member1: {
          type: nullable(OneofMember1Input),
          extensions: {
            protobufField: {
              name: "member1",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
            },
          },
        },
        member2: {
          type: nullable(OneofMember2Input),
          extensions: {
            protobufField: {
              name: "member2",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/OneofParentInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/parent.proto

/* eslint-disable */

import { unionType } from "nexus";
import { OneofMember1 } from "./OneofMember1.nexus";
import { OneofMember2 } from "./OneofMember2.nexus";

export const OneofParentOneofField = unionType({
  name: "OneofParentOneofField",
  definition: (t) => {
    t.members(OneofMember1, OneofMember2);
  },
  extensions: {
    protobufOneof: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofParent.oneof_field",
      name: "oneof_field",
      messageName: "OneofParent",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
      fields: [{
        name: "member1",
        type:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
      }, {
        name: "member2",
        type:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
      }],
    },
  },
});
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/OneofParentOneofField.nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_oneof_membe…' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/member.proto

/* eslint-disable */

import {
  OneofMember1 as OneofMember11,
  OneofMember2 as OneofMember22,
} from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file/member_pb";
import { inputObjectType, nonNull, objectType } from "nexus";

export type testapis$edgecases$import_oneof_member_from_other_file$OneofMember1 =
  OneofMember11;
export const OneofMember1 = objectType({
  name: "OneofMember1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMember11;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofMember1",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
      name: "OneofMember1",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export type testapis$edgecases$import_oneof_member_from_other_file$OneofMember2 =
  OneofMember22;
export const OneofMember2 = objectType({
  name: "OneofMember2",
  definition: (t) => {
    t.field("count", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getCount();
        return value;
      },
      extensions: { protobufField: { name: "count", typeFullName: "int32" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMember22;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofMember2",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
      name: "OneofMember2",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export const OneofMember1Input = Object.assign(
  inputObjectType({
    name: "OneofMember1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
        name: "OneofMember1",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember1Input"],
    ): OneofMember11 => {
      const output = new OneofMember11();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMember2Input = Object.assign(
  inputObjectType({
    name: "OneofMember2Input",
    definition: (t) => {
      t.field("count", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "count", typeFullName: "int32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
        name: "OneofMember2",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember2Input"],
    ): OneofMember22 => {
      const output = new OneofMember22();
      output.setCount(input.count);
      return output;
    },
    _protoNexus: {
      fields: {
        count: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "count", typeFullName: "int32" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/member_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/parent.proto

/* eslint-disable */

import { OneofParent as OneofParent1 } from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file/parent_pb";
import { inputObjectType, nullable, objectType, unionType } from "nexus";
import {
  OneofMember1,
  OneofMember1Input,
  OneofMember2,
  OneofMember2Input,
} from "./member_pb_nexus";

export type testapis$edgecases$import_oneof_member_from_other_file$OneofParent =
  OneofParent1;
export const OneofParent = objectType({
  name: "OneofParent",
  definition: (t) => {
    t.field("oneofField", {
      type: nullable("OneofParentOneofField"),
      resolve: (source) => {
        const value = source;
        switch (value.getOneofFieldCase()) {
          case OneofParent1.OneofFieldCase.MEMBER1: {
            return value.getMember1()!;
          }

          case OneofParent1.OneofFieldCase.MEMBER2: {
            return value.getMember2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "oneof_field" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofParent1;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofParent",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofParent",
      name: "OneofParent",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export const OneofParentInput = Object.assign(
  inputObjectType({
    name: "OneofParentInput",
    definition: (t) => {
      t.field("member1", {
        type: nullable("OneofMember1Input"),
        extensions: {
          protobufField: {
            name: "member1",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
          },
        },
      });
      t.field("member2", {
        type: nullable("OneofMember2Input"),
        extensions: {
          protobufField: {
            name: "member2",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofParent",
        name: "OneofParent",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentInput"],
    ): OneofParent1 => {
      const output = new OneofParent1();
      if (input.member1 != null) {
        output.setMember1(OneofMember1Input.toProto(input.member1));
      }
      if (input.member2 != null) {
        output.setMember2(OneofMember2Input.toProto(input.member2));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        member1: {
          type: nullable("OneofMember1Input"),
          extensions: {
            protobufField: {
              name: "member1",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
            },
          },
        },
        member2: {
          type: nullable("OneofMember2Input"),
          extensions: {
            protobufField: {
              name: "member2",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
            },
          },
        },
      },
    },
  },
);
export const OneofParentOneofField = unionType({
  name: "OneofParentOneofField",
  definition: (t) => {
    t.members(OneofMember1, OneofMember2);
  },
  extensions: {
    protobufOneof: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofParent.oneof_field",
      name: "oneof_field",
      messageName: "OneofParent",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
      fields: [{
        name: "member1",
        type:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
      }, {
        name: "member2",
        type:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
      }],
    },
  },
});
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/parent_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_oneof_membe…' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/member.proto

/* eslint-disable */

import {
  OneofMember1 as OneofMember11,
  OneofMember2 as OneofMember22,
} from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file/member_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";

export type testapis$edgecases$import_oneof_member_from_other_file$OneofMember1 =
  OneofMember11;
export const OneofMember1 = objectType({
  name: "OneofMember1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMember11;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofMember1",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
      name: "OneofMember1",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export type testapis$edgecases$import_oneof_member_from_other_file$OneofMember2 =
  OneofMember22;
export const OneofMember2 = objectType({
  name: "OneofMember2",
  definition: (t) => {
    t.field("count", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getCount();
        return value;
      },
      extensions: { protobufField: { name: "count", typeFullName: "int32" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMember22;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofMember2",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
      name: "OneofMember2",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export const OneofMember1Input = Object.assign(
  inputObjectType({
    name: "OneofMember1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
        name: "OneofMember1",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember1Input"],
    ): OneofMember11 => {
      const output = new OneofMember11();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMember1PartialInput = Object.assign(
  inputObjectType({
    name: "OneofMember1PartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
        name: "OneofMember1",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember1PartialInput"],
    ): OneofMember11 => {
      const output = new OneofMember11();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMember2Input = Object.assign(
  inputObjectType({
    name: "OneofMember2Input",
    definition: (t) => {
      t.field("count", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "count", typeFullName: "int32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
        name: "OneofMember2",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember2Input"],
    ): OneofMember22 => {
      const output = new OneofMember22();
      output.setCount(input.count);
      return output;
    },
    _protoNexus: {
      fields: {
        count: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "count", typeFullName: "int32" },
          },
        },
      },
    },
  },
);

export const OneofMember2PartialInput = Object.assign(
  inputObjectType({
    name: "OneofMember2PartialInput",
    definition: (t) => {
      t.field("count", {
        type: nullable("Int"),
        extensions: { protobufField: { name: "count", typeFullName: "int32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
        name: "OneofMember2",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember2PartialInput"],
    ): OneofMember22 => {
      const output = new OneofMember22();
      if (input.count != null) {
        output.setCount(input.count);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        count: {
          type: nullable("Int"),
          extensions: {
            protobufField: { name: "count", typeFullName: "int32" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/member_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/parent.proto

/* eslint-disable */

import { OneofParent as OneofParent1 } from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file/parent_pb";
import { inputObjectType, nullable, objectType, unionType } from "nexus";
import {
  OneofMember1,
  OneofMember1Input,
  OneofMember1PartialInput,
  OneofMember2,
  OneofMember2Input,
  OneofMember2PartialInput,
} from "./member_pb_nexus";

export type testapis$edgecases$import_oneof_member_from_other_file$OneofParent =
  OneofParent1;
export const OneofParent = objectType({
  name: "OneofParent",
  definition: (t) => {
    t.field("oneofField", {
      type: nullable("OneofParentOneofField"),
      resolve: (source) => {
        const value = source;
        switch (value.getOneofFieldCase()) {
          case OneofParent1.OneofFieldCase.MEMBER1: {
            return value.getMember1()!;
          }

          case OneofParent1.OneofFieldCase.MEMBER2: {
            return value.getMember2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "oneof_field" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofParent1;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofParent",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofParent",
      name: "OneofParent",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export const OneofParentInput = Object.assign(
  inputObjectType({
    name: "OneofParentInput",
    definition: (t) => {
      t.field("member1", {
        type: nullable("OneofMember1Input"),
        extensions: {
          protobufField: {
            name: "member1",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
          },
        },
      });
      t.field("member2", {
        type: nullable("OneofMember2Input"),
        extensions: {
          protobufField: {
            name: "member2",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofParent",
        name: "OneofParent",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentInput"],
    ): OneofParent1 => {
      const output = new OneofParent1();
      if (input.member1 != null) {
        output.setMember1(OneofMember1Input.toProto(input.member1));
      }
      if (input.member2 != null) {
        output.setMember2(OneofMember2Input.toProto(input.member2));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        member1: {
          type: nullable("OneofMember1Input"),
          extensions: {
            protobufField: {
              name: "member1",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
            },
          },
        },
        member2: {
          type: nullable("OneofMember2Input"),
          extensions: {
            protobufField: {
              name: "member2",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
            },
          },
        },
      },
    },
  },
);

export const OneofParentPartialInput = Object.assign(
  inputObjectType({
    name: "OneofParentPartialInput",
    definition: (t) => {
      t.field("member1", {
        type: nullable("OneofMember1PartialInput"),
        extensions: {
          protobufField: {
            name: "member1",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
          },
        },
      });
      t.field("member2", {
        type: nullable("OneofMember2PartialInput"),
        extensions: {
          protobufField: {
            name: "member2",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofParent",
        name: "OneofParent",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentPartialInput"],
    ): OneofParent1 => {
      const output = new OneofParent1();
      if (input.member1 != null) {
        output.setMember1(OneofMember1PartialInput.toProto(input.member1));
      }
      if (input.member2 != null) {
        output.setMember2(OneofMember2PartialInput.toProto(input.member2));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        member1: {
          type: nullable("OneofMember1PartialInput"),
          extensions: {
            protobufField: {
              name: "member1",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
            },
          },
        },
        member2: {
          type: nullable("OneofMember2PartialInput"),
          extensions: {
            protobufField: {
              name: "member2",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
            },
          },
        },
      },
    },
  },
);
export const OneofParentOneofField = unionType({
  name: "OneofParentOneofField",
  definition: (t) => {
    t.members(OneofMember1, OneofMember2);
  },
  extensions: {
    protobufOneof: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofParent.oneof_field",
      name: "oneof_field",
      messageName: "OneofParent",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
      fields: [{
        name: "member1",
        type:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
      }, {
        name: "member2",
        type:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
      }],
    },
  },
});
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/parent_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_oneof_membe…' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/member.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file";
import { inputObjectType, nonNull, objectType } from "nexus";

export type testapis$edgecases$import_oneof_member_from_other_file$OneofMember1 =
  testapis.edgecases.import_oneof_member_from_other_file.OneofMember1;
export const OneofMember1 = objectType({
  name: "OneofMember1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof
      testapis.edgecases.import_oneof_member_from_other_file.OneofMember1;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofMember1",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
      name: "OneofMember1",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export type testapis$edgecases$import_oneof_member_from_other_file$OneofMember2 =
  testapis.edgecases.import_oneof_member_from_other_file.OneofMember2;
export const OneofMember2 = objectType({
  name: "OneofMember2",
  definition: (t) => {
    t.field("count", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.count;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "count", typeFullName: "int32" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof
      testapis.edgecases.import_oneof_member_from_other_file.OneofMember2;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofMember2",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
      name: "OneofMember2",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export const OneofMember1Input = Object.assign(
  inputObjectType({
    name: "OneofMember1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
        name: "OneofMember1",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember1Input"],
    ): testapis.edgecases.import_oneof_member_from_other_file.OneofMember1 => {
      const output = new testapis.edgecases.import_oneof_member_from_other_file
        .OneofMember1();
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMember2Input = Object.assign(
  inputObjectType({
    name: "OneofMember2Input",
    definition: (t) => {
      t.field("count", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "count", typeFullName: "int32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
        name: "OneofMember2",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember2Input"],
    ): testapis.edgecases.import_oneof_member_from_other_file.OneofMember2 => {
      const output = new testapis.edgecases.import_oneof_member_from_other_file
        .OneofMember2();
      output.count = input.count;
      return output;
    },
    _protoNexus: {
      fields: {
        count: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "count", typeFullName: "int32" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/member_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/parent.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/edgecases/import_oneof_member_from_other_file";
import { inputObjectType, nullable, objectType, unionType } from "nexus";
import {
  OneofMember1,
  OneofMember1Input,
  OneofMember2,
  OneofMember2Input,
} from "./member_pb_nexus";

export type testapis$edgecases$import_oneof_member_from_other_file$OneofParent =
  testapis.edgecases.import_oneof_member_from_other_file.OneofParent;
export const OneofParent = objectType({
  name: "OneofParent",
  definition: (t) => {
    t.field("oneofField", {
      type: nullable("OneofParentOneofField"),
      resolve: (source) => {
        const value = source;
        if (value.member1 != null) {
          return value.member1;
        }
        if (value.member2 != null) {
          return value.member2;
        }
        return null;
      },
      extensions: { protobufField: { name: "oneof_field" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof
      testapis.edgecases.import_oneof_member_from_other_file.OneofParent;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofParent",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofParent",
      name: "OneofParent",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export const OneofParentInput = Object.assign(
  inputObjectType({
    name: "OneofParentInput",
    definition: (t) => {
      t.field("member1", {
        type: nullable("OneofMember1Input"),
        extensions: {
          protobufField: {
            name: "member1",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
          },
        },
      });
      t.field("member2", {
        type: nullable("OneofMember2Input"),
        extensions: {
          protobufField: {
            name: "member2",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofParent",
        name: "OneofParent",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentInput"],
    ): testapis.edgecases.import_oneof_member_from_other_file.OneofParent => {
      const output = new testapis.edgecases.import_oneof_member_from_other_file
        .OneofParent();
      if (input.member1 != null) {
        output.member1 = OneofMember1Input.toProto(input.member1);
      }
      if (input.member2 != null) {
        output.member2 = OneofMember2Input.toProto(input.member2);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        member1: {
          type: nullable("OneofMember1Input"),
          extensions: {
            protobufField: {
              name: "member1",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
            },
          },
        },
        member2: {
          type: nullable("OneofMember2Input"),
          extensions: {
            protobufField: {
              name: "member2",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
            },
          },
        },
      },
    },
  },
);
export const OneofParentOneofField = unionType({
  name: "OneofParentOneofField",
  definition: (t) => {
    t.members(OneofMember1, OneofMember2);
  },
  extensions: {
    protobufOneof: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofParent.oneof_field",
      name: "oneof_field",
      messageName: "OneofParent",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
      fields: [{
        name: "member1",
        type:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
      }, {
        name: "member2",
        type:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
      }],
    },
  },
});
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/parent_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_oneof_membe…' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/member.proto

/* eslint-disable */

import { inputObjectType, nonNull, objectType } from "nexus";
import {
  OneofMember1 as OneofMember11,
  OneofMember2 as OneofMember22,
} from "./testapis/edgecases/import_oneof_member_from_other_file/member_pb";

export type testapis$edgecases$import_oneof_member_from_other_file$OneofMember1 =
  OneofMember11;
export const OneofMember1 = objectType({
  name: "OneofMember1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMember11;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofMember1",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
      name: "OneofMember1",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export type testapis$edgecases$import_oneof_member_from_other_file$OneofMember2 =
  OneofMember22;
export const OneofMember2 = objectType({
  name: "OneofMember2",
  definition: (t) => {
    t.field("count", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getCount();
        return value;
      },
      extensions: { protobufField: { name: "count", typeFullName: "int32" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMember22;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofMember2",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
      name: "OneofMember2",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export const OneofMember1Input = Object.assign(
  inputObjectType({
    name: "OneofMember1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
        name: "OneofMember1",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember1Input"],
    ): OneofMember11 => {
      const output = new OneofMember11();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMember2Input = Object.assign(
  inputObjectType({
    name: "OneofMember2Input",
    definition: (t) => {
      t.field("count", {
        type: nonNull("Int"),
        extensions: { protobufField: { name: "count", typeFullName: "int32" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
        name: "OneofMember2",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMember2Input"],
    ): OneofMember22 => {
      const output = new OneofMember22();
      output.setCount(input.count);
      return output;
    },
    _protoNexus: {
      fields: {
        count: {
          type: nonNull("Int"),
          extensions: {
            protobufField: { name: "count", typeFullName: "int32" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/member_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_oneof_member_from_other_file/parent.proto

/* eslint-disable */

import { inputObjectType, nullable, objectType, unionType } from "nexus";
import {
  OneofMember1,
  OneofMember1Input,
  OneofMember2,
  OneofMember2Input,
} from "./member_pb_nexus";
import { OneofParent as OneofParent1 } from "./testapis/edgecases/import_oneof_member_from_other_file/parent_pb";

export type testapis$edgecases$import_oneof_member_from_other_file$OneofParent =
  OneofParent1;
export const OneofParent = objectType({
  name: "OneofParent",
  definition: (t) => {
    t.field("oneofField", {
      type: nullable("OneofParentOneofField"),
      resolve: (source) => {
        const value = source;
        switch (value.getOneofFieldCase()) {
          case OneofParent1.OneofFieldCase.MEMBER1: {
            return value.getMember1()!;
          }

          case OneofParent1.OneofFieldCase.MEMBER2: {
            return value.getMember2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "oneof_field" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofParent1;
  },
  sourceType: {
    module: __filename,
    export:
      "testapis$edgecases$import_oneof_member_from_other_file$OneofParent",
  },
  extensions: {
    protobufMessage: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofParent",
      name: "OneofParent",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
    },
  },
});

export const OneofParentInput = Object.assign(
  inputObjectType({
    name: "OneofParentInput",
    definition: (t) => {
      t.field("member1", {
        type: nullable("OneofMember1Input"),
        extensions: {
          protobufField: {
            name: "member1",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
          },
        },
      });
      t.field("member2", {
        type: nullable("OneofMember2Input"),
        extensions: {
          protobufField: {
            name: "member2",
            typeFullName:
              "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofParent",
        name: "OneofParent",
        package: "testapis.edgecases.import_oneof_member_from_other_file",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentInput"],
    ): OneofParent1 => {
      const output = new OneofParent1();
      if (input.member1 != null) {
        output.setMember1(OneofMember1Input.toProto(input.member1));
      }
      if (input.member2 != null) {
        output.setMember2(OneofMember2Input.toProto(input.member2));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        member1: {
          type: nullable("OneofMember1Input"),
          extensions: {
            protobufField: {
              name: "member1",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
            },
          },
        },
        member2: {
          type: nullable("OneofMember2Input"),
          extensions: {
            protobufField: {
              name: "member2",
              typeFullName:
                "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
            },
          },
        },
      },
    },
  },
);
export const OneofParentOneofField = unionType({
  name: "OneofParentOneofField",
  definition: (t) => {
    t.members(OneofMember1, OneofMember2);
  },
  extensions: {
    protobufOneof: {
      fullName:
        "testapis.edgecases.import_oneof_member_from_other_file.OneofParent.oneof_field",
      name: "oneof_field",
      messageName: "OneofParent",
      package: "testapis.edgecases.import_oneof_member_from_other_file",
      fields: [{
        name: "member1",
        type:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember1",
      }, {
        name: "member2",
        type:
          "testapis.edgecases.import_oneof_member_from_other_file.OneofMember2",
      }],
    },
  },
});
",
    "name": "testapis/edgecases/import_oneof_member_from_other_file/parent_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with graphql_type layout' 1`] = `[]`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with graphql_type layout' 2`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg1/types.proto

/* eslint-disable */

import { OneofMessage1 as OneofMessage11 } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg1/types_pb";
import { nonNull, objectType } from "nexus";

export type testapis$edgecases$import_squashed_union$pkg1$OneofMessage1 =
  OneofMessage11;
export const OneofMessage1 = objectType({
  name: "OneofMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMessage11;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_squashed_union$pkg1$OneofMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
      name: "OneofMessage1",
      package: "testapis.edgecases.import_squashed_union.pkg1",
    },
  },
});
",
    "name": "testapis/edgecases/import_squashed_union/pkg1/OneofMessage1.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg1/types.proto

/* eslint-disable */

import { OneofMessage1 } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg1/types_pb";
import { inputObjectType, nonNull } from "nexus";

export const OneofMessage1Input = Object.assign(
  inputObjectType({
    name: "OneofMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
        name: "OneofMessage1",
        package: "testapis.edgecases.import_squashed_union.pkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMessage1Input"],
    ): OneofMessage1 => {
      const output = new OneofMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_squashed_union/pkg1/OneofMessage1Input.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg1/types.proto

/* eslint-disable */

import { SquashedOneof } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg1/types_pb";
import { inputObjectType, nullable } from "nexus";
import { OneofMessage1Input } from "./OneofMessage1Input.nexus";

export const SquashedOneofInput = Object.assign(
  inputObjectType({
    name: "SquashedOneofInput",
    definition: (t) => {
      t.field("msg1", {
        type: nullable(OneofMessage1Input),
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
        name: "SquashedOneof",
        package: "testapis.edgecases.import_squashed_union.pkg1",
        options: { "[graphql.object_type]": { squashUnion: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SquashedOneofInput"],
    ): SquashedOneof => {
      const output = new SquashedOneof();
      if (input.msg1 != null) {
        output.setMsg1(OneofMessage1Input.toProto(input.msg1));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg1: {
          type: nullable(OneofMessage1Input),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_squashed_union/pkg1/SquashedOneofInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg1/types.proto

/* eslint-disable */

import { unionType } from "nexus";
import { OneofMessage1 } from "./OneofMessage1.nexus";

export const SquashedOneof = unionType({
  name: "SquashedOneof",
  definition: (t) => {
    t.members(OneofMessage1);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
      name: "SquashedOneof",
      package: "testapis.edgecases.import_squashed_union.pkg1",
      fields: [{
        name: "msg1",
        type: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }],
    },
  },
});
",
    "name": "testapis/edgecases/import_squashed_union/pkg1/SquashedOneof.nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with graphql_type layout' 3`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg2/types.proto

/* eslint-disable */

import { SquashedOneof as SquashedOneof2 } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg1/types_pb";
import { Message as Message1 } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg2/types_pb";
import { nullable, objectType } from "nexus";
import { SquashedOneof } from "../pkg1/SquashedOneof.nexus";

export type testapis$edgecases$import_squashed_union$pkg2$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("msg", {
      type: nullable(SquashedOneof),
      resolve: (source) => {
        const value = source.getMsg();
        if (value == null) {
          return null;
        }
        switch (value.getMessageCase()) {
          case SquashedOneof2.MessageCase.MSG1: {
            return value.getMsg1()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: {
        protobufField: {
          name: "msg",
          typeFullName:
            "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_squashed_union$pkg2$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_squashed_union.pkg2.Message",
      name: "Message",
      package: "testapis.edgecases.import_squashed_union.pkg2",
    },
  },
});
",
    "name": "testapis/edgecases/import_squashed_union/pkg2/Message.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg2/types.proto

/* eslint-disable */

import { Message } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg2/types_pb";
import { inputObjectType, nullable } from "nexus";
import { SquashedOneofInput } from "../pkg1/SquashedOneofInput.nexus";

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("msg", {
        type: nullable(SquashedOneofInput),
        extensions: {
          protobufField: {
            name: "msg",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg2.Message",
        name: "Message",
        package: "testapis.edgecases.import_squashed_union.pkg2",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message => {
      const output = new Message();
      if (input.msg != null) {
        output.setMsg(SquashedOneofInput.toProto(input.msg));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg: {
          type: nullable(SquashedOneofInput),
          extensions: {
            protobufField: {
              name: "msg",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_squashed_union/pkg2/MessageInput.nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with import prefix' 1`] = `[]`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with import prefix' 2`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg1/types.proto

/* eslint-disable */

import {
  OneofMessage1 as OneofMessage11,
  SquashedOneof as SquashedOneof2,
} from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg1/types_pb";
import {
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";

export type testapis$edgecases$import_squashed_union$pkg1$OneofMessage1 =
  OneofMessage11;
export const OneofMessage1 = objectType({
  name: "OneofMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMessage11;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_squashed_union$pkg1$OneofMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
      name: "OneofMessage1",
      package: "testapis.edgecases.import_squashed_union.pkg1",
    },
  },
});

export const OneofMessage1Input = Object.assign(
  inputObjectType({
    name: "OneofMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
        name: "OneofMessage1",
        package: "testapis.edgecases.import_squashed_union.pkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMessage1Input"],
    ): OneofMessage11 => {
      const output = new OneofMessage11();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const SquashedOneofInput = Object.assign(
  inputObjectType({
    name: "SquashedOneofInput",
    definition: (t) => {
      t.field("msg1", {
        type: nullable("OneofMessage1Input"),
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
        name: "SquashedOneof",
        package: "testapis.edgecases.import_squashed_union.pkg1",
        options: { "[graphql.object_type]": { squashUnion: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SquashedOneofInput"],
    ): SquashedOneof2 => {
      const output = new SquashedOneof2();
      if (input.msg1 != null) {
        output.setMsg1(OneofMessage1Input.toProto(input.msg1));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg1: {
          type: nullable("OneofMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
            },
          },
        },
      },
    },
  },
);
export const SquashedOneof = unionType({
  name: "SquashedOneof",
  definition: (t) => {
    t.members(OneofMessage1);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
      name: "SquashedOneof",
      package: "testapis.edgecases.import_squashed_union.pkg1",
      fields: [{
        name: "msg1",
        type: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }],
    },
  },
});
",
    "name": "testapis/edgecases/import_squashed_union/pkg1/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with import prefix' 3`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg2/types.proto

/* eslint-disable */

import { SquashedOneof } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg1/types_pb";
import { Message as Message1 } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg2/types_pb";
import { inputObjectType, nullable, objectType } from "nexus";
import { SquashedOneofInput } from "../pkg1/types_pb_nexus";

export type testapis$edgecases$import_squashed_union$pkg2$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("msg", {
      type: nullable("SquashedOneof"),
      resolve: (source) => {
        const value = source.getMsg();
        if (value == null) {
          return null;
        }
        switch (value.getMessageCase()) {
          case SquashedOneof.MessageCase.MSG1: {
            return value.getMsg1()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: {
        protobufField: {
          name: "msg",
          typeFullName:
            "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_squashed_union$pkg2$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_squashed_union.pkg2.Message",
      name: "Message",
      package: "testapis.edgecases.import_squashed_union.pkg2",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("msg", {
        type: nullable("SquashedOneofInput"),
        extensions: {
          protobufField: {
            name: "msg",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg2.Message",
        name: "Message",
        package: "testapis.edgecases.import_squashed_union.pkg2",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      if (input.msg != null) {
        output.setMsg(SquashedOneofInput.toProto(input.msg));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg: {
          type: nullable("SquashedOneofInput"),
          extensions: {
            protobufField: {
              name: "msg",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_squashed_union/pkg2/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with partial inputs' 1`] = `[]`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with partial inputs' 2`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg1/types.proto

/* eslint-disable */

import {
  OneofMessage1 as OneofMessage11,
  SquashedOneof as SquashedOneof2,
} from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg1/types_pb";
import {
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";

export type testapis$edgecases$import_squashed_union$pkg1$OneofMessage1 =
  OneofMessage11;
export const OneofMessage1 = objectType({
  name: "OneofMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMessage11;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_squashed_union$pkg1$OneofMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
      name: "OneofMessage1",
      package: "testapis.edgecases.import_squashed_union.pkg1",
    },
  },
});

export const OneofMessage1Input = Object.assign(
  inputObjectType({
    name: "OneofMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
        name: "OneofMessage1",
        package: "testapis.edgecases.import_squashed_union.pkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMessage1Input"],
    ): OneofMessage11 => {
      const output = new OneofMessage11();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMessage1PartialInput = Object.assign(
  inputObjectType({
    name: "OneofMessage1PartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
        name: "OneofMessage1",
        package: "testapis.edgecases.import_squashed_union.pkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMessage1PartialInput"],
    ): OneofMessage11 => {
      const output = new OneofMessage11();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const SquashedOneofInput = Object.assign(
  inputObjectType({
    name: "SquashedOneofInput",
    definition: (t) => {
      t.field("msg1", {
        type: nullable("OneofMessage1Input"),
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
        name: "SquashedOneof",
        package: "testapis.edgecases.import_squashed_union.pkg1",
        options: { "[graphql.object_type]": { squashUnion: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SquashedOneofInput"],
    ): SquashedOneof2 => {
      const output = new SquashedOneof2();
      if (input.msg1 != null) {
        output.setMsg1(OneofMessage1Input.toProto(input.msg1));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg1: {
          type: nullable("OneofMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
            },
          },
        },
      },
    },
  },
);

export const SquashedOneofPartialInput = Object.assign(
  inputObjectType({
    name: "SquashedOneofPartialInput",
    definition: (t) => {
      t.field("msg1", {
        type: nullable("OneofMessage1PartialInput"),
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
        name: "SquashedOneof",
        package: "testapis.edgecases.import_squashed_union.pkg1",
        options: { "[graphql.object_type]": { squashUnion: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SquashedOneofPartialInput"],
    ): SquashedOneof2 => {
      const output = new SquashedOneof2();
      if (input.msg1 != null) {
        output.setMsg1(OneofMessage1PartialInput.toProto(input.msg1));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg1: {
          type: nullable("OneofMessage1PartialInput"),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
            },
          },
        },
      },
    },
  },
);
export const SquashedOneof = unionType({
  name: "SquashedOneof",
  definition: (t) => {
    t.members(OneofMessage1);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
      name: "SquashedOneof",
      package: "testapis.edgecases.import_squashed_union.pkg1",
      fields: [{
        name: "msg1",
        type: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }],
    },
  },
});
",
    "name": "testapis/edgecases/import_squashed_union/pkg1/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with partial inputs' 3`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg2/types.proto

/* eslint-disable */

import { SquashedOneof } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg1/types_pb";
import { Message as Message1 } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg2/types_pb";
import { inputObjectType, nullable, objectType } from "nexus";
import {
  SquashedOneofInput,
  SquashedOneofPartialInput,
} from "../pkg1/types_pb_nexus";

export type testapis$edgecases$import_squashed_union$pkg2$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("msg", {
      type: nullable("SquashedOneof"),
      resolve: (source) => {
        const value = source.getMsg();
        if (value == null) {
          return null;
        }
        switch (value.getMessageCase()) {
          case SquashedOneof.MessageCase.MSG1: {
            return value.getMsg1()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: {
        protobufField: {
          name: "msg",
          typeFullName:
            "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_squashed_union$pkg2$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_squashed_union.pkg2.Message",
      name: "Message",
      package: "testapis.edgecases.import_squashed_union.pkg2",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("msg", {
        type: nullable("SquashedOneofInput"),
        extensions: {
          protobufField: {
            name: "msg",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg2.Message",
        name: "Message",
        package: "testapis.edgecases.import_squashed_union.pkg2",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      if (input.msg != null) {
        output.setMsg(SquashedOneofInput.toProto(input.msg));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg: {
          type: nullable("SquashedOneofInput"),
          extensions: {
            protobufField: {
              name: "msg",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
            },
          },
        },
      },
    },
  },
);

export const MessagePartialInput = Object.assign(
  inputObjectType({
    name: "MessagePartialInput",
    definition: (t) => {
      t.field("msg", {
        type: nullable("SquashedOneofPartialInput"),
        extensions: {
          protobufField: {
            name: "msg",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg2.Message",
        name: "Message",
        package: "testapis.edgecases.import_squashed_union.pkg2",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessagePartialInput"],
    ): Message1 => {
      const output = new Message1();
      if (input.msg != null) {
        output.setMsg(SquashedOneofPartialInput.toProto(input.msg));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg: {
          type: nullable("SquashedOneofPartialInput"),
          extensions: {
            protobufField: {
              name: "msg",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_squashed_union/pkg2/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with use_protobufjs' 1`] = `[]`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with use_protobufjs' 2`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg1/types.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg1";
import {
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";

export type testapis$edgecases$import_squashed_union$pkg1$OneofMessage1 =
  testapis.edgecases.import_squashed_union.pkg1.OneofMessage1;
export const OneofMessage1 = objectType({
  name: "OneofMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof
      testapis.edgecases.import_squashed_union.pkg1.OneofMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_squashed_union$pkg1$OneofMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
      name: "OneofMessage1",
      package: "testapis.edgecases.import_squashed_union.pkg1",
    },
  },
});

export const OneofMessage1Input = Object.assign(
  inputObjectType({
    name: "OneofMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
        name: "OneofMessage1",
        package: "testapis.edgecases.import_squashed_union.pkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMessage1Input"],
    ): testapis.edgecases.import_squashed_union.pkg1.OneofMessage1 => {
      const output = new testapis.edgecases.import_squashed_union.pkg1
        .OneofMessage1();
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const SquashedOneofInput = Object.assign(
  inputObjectType({
    name: "SquashedOneofInput",
    definition: (t) => {
      t.field("msg1", {
        type: nullable("OneofMessage1Input"),
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
        name: "SquashedOneof",
        package: "testapis.edgecases.import_squashed_union.pkg1",
        options: { "[graphql.object_type]": { squashUnion: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SquashedOneofInput"],
    ): testapis.edgecases.import_squashed_union.pkg1.SquashedOneof => {
      const output = new testapis.edgecases.import_squashed_union.pkg1
        .SquashedOneof();
      if (input.msg1 != null) {
        output.msg1 = OneofMessage1Input.toProto(input.msg1);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg1: {
          type: nullable("OneofMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
            },
          },
        },
      },
    },
  },
);
export const SquashedOneof = unionType({
  name: "SquashedOneof",
  definition: (t) => {
    t.members(OneofMessage1);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
      name: "SquashedOneof",
      package: "testapis.edgecases.import_squashed_union.pkg1",
      fields: [{
        name: "msg1",
        type: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }],
    },
  },
});
",
    "name": "testapis/edgecases/import_squashed_union/pkg1/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'with use_protobufjs' 3`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg2/types.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/edgecases/import_squashed_union/pkg2";
import { inputObjectType, nullable, objectType } from "nexus";
import { SquashedOneofInput } from "../pkg1/types_pb_nexus";

export type testapis$edgecases$import_squashed_union$pkg2$Message =
  testapis.edgecases.import_squashed_union.pkg2.Message;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("msg", {
      type: nullable("SquashedOneof"),
      resolve: (source) => {
        const value = source.msg;
        if (value == null) {
          return null;
        }
        if (value.msg1 != null) {
          return value.msg1;
        }
        return null;
      },
      extensions: {
        protobufField: {
          name: "msg",
          typeFullName:
            "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof
      testapis.edgecases.import_squashed_union.pkg2.Message;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_squashed_union$pkg2$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_squashed_union.pkg2.Message",
      name: "Message",
      package: "testapis.edgecases.import_squashed_union.pkg2",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("msg", {
        type: nullable("SquashedOneofInput"),
        extensions: {
          protobufField: {
            name: "msg",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg2.Message",
        name: "Message",
        package: "testapis.edgecases.import_squashed_union.pkg2",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageInput"],
    ): testapis.edgecases.import_squashed_union.pkg2.Message => {
      const output = new testapis.edgecases.import_squashed_union.pkg2
        .Message();
      if (input.msg != null) {
        output.msg = SquashedOneofInput.toProto(input.msg);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg: {
          type: nullable("SquashedOneofInput"),
          extensions: {
            protobufField: {
              name: "msg",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_squashed_union/pkg2/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'without import prefix' 1`] = `[]`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'without import prefix' 2`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg1/types.proto

/* eslint-disable */

import {
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";
import {
  OneofMessage1 as OneofMessage11,
  SquashedOneof as SquashedOneof2,
} from "./testapis/edgecases/import_squashed_union/pkg1/types_pb";

export type testapis$edgecases$import_squashed_union$pkg1$OneofMessage1 =
  OneofMessage11;
export const OneofMessage1 = objectType({
  name: "OneofMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMessage11;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_squashed_union$pkg1$OneofMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
      name: "OneofMessage1",
      package: "testapis.edgecases.import_squashed_union.pkg1",
    },
  },
});

export const OneofMessage1Input = Object.assign(
  inputObjectType({
    name: "OneofMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
        name: "OneofMessage1",
        package: "testapis.edgecases.import_squashed_union.pkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMessage1Input"],
    ): OneofMessage11 => {
      const output = new OneofMessage11();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const SquashedOneofInput = Object.assign(
  inputObjectType({
    name: "SquashedOneofInput",
    definition: (t) => {
      t.field("msg1", {
        type: nullable("OneofMessage1Input"),
        extensions: {
          protobufField: {
            name: "msg1",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
        name: "SquashedOneof",
        package: "testapis.edgecases.import_squashed_union.pkg1",
        options: { "[graphql.object_type]": { squashUnion: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SquashedOneofInput"],
    ): SquashedOneof2 => {
      const output = new SquashedOneof2();
      if (input.msg1 != null) {
        output.setMsg1(OneofMessage1Input.toProto(input.msg1));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg1: {
          type: nullable("OneofMessage1Input"),
          extensions: {
            protobufField: {
              name: "msg1",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
            },
          },
        },
      },
    },
  },
);
export const SquashedOneof = unionType({
  name: "SquashedOneof",
  definition: (t) => {
    t.members(OneofMessage1);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
      name: "SquashedOneof",
      package: "testapis.edgecases.import_squashed_union.pkg1",
      fields: [{
        name: "msg1",
        type: "testapis.edgecases.import_squashed_union.pkg1.OneofMessage1",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }],
    },
  },
});
",
    "name": "testapis/edgecases/import_squashed_union/pkg1/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.edgecases.import_squashed_un…' > generates files by plugin 'without import prefix' 3`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/edgecases/import_squashed_union/pkg2/types.proto

/* eslint-disable */

import { inputObjectType, nullable, objectType } from "nexus";
import { SquashedOneofInput } from "../pkg1/types_pb_nexus";
import { SquashedOneof } from "./testapis/edgecases/import_squashed_union/pkg1/types_pb";
import { Message as Message1 } from "./testapis/edgecases/import_squashed_union/pkg2/types_pb";

export type testapis$edgecases$import_squashed_union$pkg2$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("msg", {
      type: nullable("SquashedOneof"),
      resolve: (source) => {
        const value = source.getMsg();
        if (value == null) {
          return null;
        }
        switch (value.getMessageCase()) {
          case SquashedOneof.MessageCase.MSG1: {
            return value.getMsg1()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: {
        protobufField: {
          name: "msg",
          typeFullName:
            "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$edgecases$import_squashed_union$pkg2$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.edgecases.import_squashed_union.pkg2.Message",
      name: "Message",
      package: "testapis.edgecases.import_squashed_union.pkg2",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("msg", {
        type: nullable("SquashedOneofInput"),
        extensions: {
          protobufField: {
            name: "msg",
            typeFullName:
              "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.edgecases.import_squashed_union.pkg2.Message",
        name: "Message",
        package: "testapis.edgecases.import_squashed_union.pkg2",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      if (input.msg != null) {
        output.setMsg(SquashedOneofInput.toProto(input.msg));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        msg: {
          type: nullable("SquashedOneofInput"),
          extensions: {
            protobufField: {
              name: "msg",
              typeFullName:
                "testapis.edgecases.import_squashed_union.pkg1.SquashedOneof",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/edgecases/import_squashed_union/pkg2/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.empty_types' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/empty_types/empty.proto

/* eslint-disable */

import { EmptyMessage as EmptyMessage1 } from "@testapis/proto/testapis/empty_types/empty_pb";
import { objectType } from "nexus";

export type testapis$empty_types$EmptyMessage = EmptyMessage1;
export const EmptyMessage = objectType({
  name: "EmptyMessage",
  definition: (t) => {
    t.field("_", {
      type: "Boolean",
      description: "noop field",
      resolve: () => true,
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof EmptyMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$empty_types$EmptyMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.empty_types.EmptyMessage",
      name: "EmptyMessage",
      package: "testapis.empty_types",
    },
  },
});
",
    "name": "testapis/empty_types/EmptyMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/empty_types/empty.proto

/* eslint-disable */

import { EmptyMessage } from "@testapis/proto/testapis/empty_types/empty_pb";
import { inputObjectType } from "nexus";

export const EmptyMessageInput = Object.assign(
  inputObjectType({
    name: "EmptyMessageInput",
    definition: (t) => {
      t.field("_", { type: "Boolean", description: "noop field" });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.empty_types.EmptyMessage",
        name: "EmptyMessage",
        package: "testapis.empty_types",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["EmptyMessageInput"],
    ): EmptyMessage => {
      const output = new EmptyMessage();

      return output;
    },
    _protoNexus: { fields: {} },
  },
);
",
    "name": "testapis/empty_types/EmptyMessageInput.nexus.ts",
  },
]
`;

exports[`'testapis.empty_types' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/empty_types/empty.proto

/* eslint-disable */

import { EmptyMessage as EmptyMessage1 } from "@testapis/proto/testapis/empty_types/empty_pb";
import { inputObjectType, objectType } from "nexus";

export type testapis$empty_types$EmptyMessage = EmptyMessage1;
export const EmptyMessage = objectType({
  name: "EmptyMessage",
  definition: (t) => {
    t.field("_", {
      type: "Boolean",
      description: "noop field",
      resolve: () => true,
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof EmptyMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$empty_types$EmptyMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.empty_types.EmptyMessage",
      name: "EmptyMessage",
      package: "testapis.empty_types",
    },
  },
});

export const EmptyMessageInput = Object.assign(
  inputObjectType({
    name: "EmptyMessageInput",
    definition: (t) => {
      t.field("_", { type: "Boolean", description: "noop field" });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.empty_types.EmptyMessage",
        name: "EmptyMessage",
        package: "testapis.empty_types",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["EmptyMessageInput"],
    ): EmptyMessage1 => {
      const output = new EmptyMessage1();

      return output;
    },
    _protoNexus: { fields: {} },
  },
);
",
    "name": "testapis/empty_types/empty_pb_nexus.ts",
  },
]
`;

exports[`'testapis.empty_types' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/empty_types/empty.proto

/* eslint-disable */

import { EmptyMessage as EmptyMessage1 } from "@testapis/proto/testapis/empty_types/empty_pb";
import { inputObjectType, objectType } from "nexus";

export type testapis$empty_types$EmptyMessage = EmptyMessage1;
export const EmptyMessage = objectType({
  name: "EmptyMessage",
  definition: (t) => {
    t.field("_", {
      type: "Boolean",
      description: "noop field",
      resolve: () => true,
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof EmptyMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$empty_types$EmptyMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.empty_types.EmptyMessage",
      name: "EmptyMessage",
      package: "testapis.empty_types",
    },
  },
});

export const EmptyMessageInput = Object.assign(
  inputObjectType({
    name: "EmptyMessageInput",
    definition: (t) => {
      t.field("_", { type: "Boolean", description: "noop field" });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.empty_types.EmptyMessage",
        name: "EmptyMessage",
        package: "testapis.empty_types",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["EmptyMessageInput"],
    ): EmptyMessage1 => {
      const output = new EmptyMessage1();

      return output;
    },
    _protoNexus: { fields: {} },
  },
);

export const EmptyMessagePartialInput = Object.assign(
  inputObjectType({
    name: "EmptyMessagePartialInput",
    definition: (t) => {
      t.field("_", { type: "Boolean", description: "noop field" });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.empty_types.EmptyMessage",
        name: "EmptyMessage",
        package: "testapis.empty_types",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["EmptyMessagePartialInput"],
    ): EmptyMessage1 => {
      const output = new EmptyMessage1();

      return output;
    },
    _protoNexus: { fields: {} },
  },
);
",
    "name": "testapis/empty_types/empty_pb_nexus.ts",
  },
]
`;

exports[`'testapis.empty_types' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/empty_types/empty.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/empty_types";
import { inputObjectType, objectType } from "nexus";

export type testapis$empty_types$EmptyMessage =
  testapis.empty_types.EmptyMessage;
export const EmptyMessage = objectType({
  name: "EmptyMessage",
  definition: (t) => {
    t.field("_", {
      type: "Boolean",
      description: "noop field",
      resolve: () => true,
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.empty_types.EmptyMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$empty_types$EmptyMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.empty_types.EmptyMessage",
      name: "EmptyMessage",
      package: "testapis.empty_types",
    },
  },
});

export const EmptyMessageInput = Object.assign(
  inputObjectType({
    name: "EmptyMessageInput",
    definition: (t) => {
      t.field("_", { type: "Boolean", description: "noop field" });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.empty_types.EmptyMessage",
        name: "EmptyMessage",
        package: "testapis.empty_types",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["EmptyMessageInput"],
    ): testapis.empty_types.EmptyMessage => {
      const output = new testapis.empty_types.EmptyMessage();

      return output;
    },
    _protoNexus: { fields: {} },
  },
);
",
    "name": "testapis/empty_types/empty_pb_nexus.ts",
  },
]
`;

exports[`'testapis.empty_types' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/empty_types/empty.proto

/* eslint-disable */

import { inputObjectType, objectType } from "nexus";
import { EmptyMessage as EmptyMessage1 } from "./testapis/empty_types/empty_pb";

export type testapis$empty_types$EmptyMessage = EmptyMessage1;
export const EmptyMessage = objectType({
  name: "EmptyMessage",
  definition: (t) => {
    t.field("_", {
      type: "Boolean",
      description: "noop field",
      resolve: () => true,
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof EmptyMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$empty_types$EmptyMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.empty_types.EmptyMessage",
      name: "EmptyMessage",
      package: "testapis.empty_types",
    },
  },
});

export const EmptyMessageInput = Object.assign(
  inputObjectType({
    name: "EmptyMessageInput",
    definition: (t) => {
      t.field("_", { type: "Boolean", description: "noop field" });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.empty_types.EmptyMessage",
        name: "EmptyMessage",
        package: "testapis.empty_types",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["EmptyMessageInput"],
    ): EmptyMessage1 => {
      const output = new EmptyMessage1();

      return output;
    },
    _protoNexus: { fields: {} },
  },
);
",
    "name": "testapis/empty_types/empty_pb_nexus.ts",
  },
]
`;

exports[`'testapis.enums' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

/* eslint-disable */

import {
  MessageWithEnums as MessageWithEnums1,
  MyEnum as MyEnum2,
} from "@testapis/proto/testapis/enums/enums_pb";
import { list, nonNull, nullable, objectType } from "nexus";
import { MyEnum } from "./MyEnum.nexus";
import { MyEnumWithoutUnspecified } from "./MyEnumWithoutUnspecified.nexus";

export type testapi$enums$MessageWithEnums = MessageWithEnums1;
export const MessageWithEnums = objectType({
  name: "MessageWithEnums",
  definition: (t) => {
    t.field("requiredMyEnum", {
      type: nonNull(MyEnum),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredMyEnum();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
          throw new Error(
            "requiredMyEnum is required field. But got unspecified.",
          );
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_my_enum",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("optionalMyEnum", {
      type: nullable(MyEnum),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalMyEnum();
        if (value == null) {
          return null;
        }
        if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("requiredMyEnumWithoutUnspecified", {
      type: nonNull(MyEnumWithoutUnspecified),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredMyEnumWithoutUnspecified();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_my_enum_without_unspecified",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("optionalMyEnumWithoutUnspecified", {
      type: nullable(MyEnumWithoutUnspecified),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalMyEnumWithoutUnspecified();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum_without_unspecified",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("requiredMyEnums", {
      type: nonNull(list(nonNull(MyEnum))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredMyEnumsList().map((value) => {
          if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
            throw new Error(
              "requiredMyEnums is required field. But got unspecified.",
            );
          }
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_my_enums",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("optionalMyEnums", {
      type: nullable(list(nonNull(MyEnum))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalMyEnumsList().map((value) => {
          if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
            throw new Error(
              "optionalMyEnums is required field. But got unspecified.",
            );
          }
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "optional_my_enums",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("requiredMyEnumWithoutUnspecifieds", {
      type: nonNull(list(nonNull(MyEnumWithoutUnspecified))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredMyEnumWithoutUnspecifiedsList().map(
          (value) => {
            return value;
          },
        );
      },
      extensions: {
        protobufField: {
          name: "required_my_enum_without_unspecifieds",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("optionalMyEnumWithoutUnspecifieds", {
      type: nullable(list(nonNull(MyEnumWithoutUnspecified))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalMyEnumWithoutUnspecifiedsList().map(
          (value) => {
            return value;
          },
        );
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum_without_unspecifieds",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWithEnums1;
  },
  sourceType: { module: __filename, export: "testapi$enums$MessageWithEnums" },
  extensions: {
    protobufMessage: {
      fullName: "testapi.enums.MessageWithEnums",
      name: "MessageWithEnums",
      package: "testapi.enums",
    },
  },
});
",
    "name": "testapis/enums/MessageWithEnums.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

/* eslint-disable */

import { MessageWithEnums } from "@testapis/proto/testapis/enums/enums_pb";
import { inputObjectType, list, nonNull, nullable } from "nexus";
import { MyEnum } from "./MyEnum.nexus";
import { MyEnumWithoutUnspecified } from "./MyEnumWithoutUnspecified.nexus";

export const MessageWithEnumsInput = Object.assign(
  inputObjectType({
    name: "MessageWithEnumsInput",
    definition: (t) => {
      t.field("requiredMyEnum", {
        type: nonNull(MyEnum),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnum", {
        type: nullable(MyEnum),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecified", {
        type: nonNull(MyEnumWithoutUnspecified),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecified", {
        type: nullable(MyEnumWithoutUnspecified),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("requiredMyEnums", {
        type: nonNull(list(nonNull(MyEnum))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnums", {
        type: nullable(list(nonNull(MyEnum))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecifieds", {
        type: nonNull(list(nonNull(MyEnumWithoutUnspecified))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecifieds", {
        type: nullable(list(nonNull(MyEnumWithoutUnspecified))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapi.enums.MessageWithEnums",
        name: "MessageWithEnums",
        package: "testapi.enums",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithEnumsInput"],
    ): MessageWithEnums => {
      const output = new MessageWithEnums();
      output.setRequiredMyEnum(input.requiredMyEnum);
      if (input.optionalMyEnum != null) {
        output.setOptionalMyEnum(input.optionalMyEnum);
      }
      output.setRequiredMyEnumWithoutUnspecified(
        input.requiredMyEnumWithoutUnspecified,
      );
      if (input.optionalMyEnumWithoutUnspecified != null) {
        output.setOptionalMyEnumWithoutUnspecified(
          input.optionalMyEnumWithoutUnspecified,
        );
      }
      output.setRequiredMyEnumsList(input.requiredMyEnums.map((v) => v));
      if (input.optionalMyEnums != null) {
        output.setOptionalMyEnumsList(input.optionalMyEnums.map((v) => v));
      }
      output.setRequiredMyEnumWithoutUnspecifiedsList(
        input.requiredMyEnumWithoutUnspecifieds.map((v) => v),
      );
      if (input.optionalMyEnumWithoutUnspecifieds != null) {
        output.setOptionalMyEnumWithoutUnspecifiedsList(
          input.optionalMyEnumWithoutUnspecifieds.map((v) => v),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredMyEnum: {
          type: nonNull(MyEnum),
          extensions: {
            protobufField: {
              name: "required_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnum: {
          type: nullable(MyEnum),
          extensions: {
            protobufField: {
              name: "optional_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecified: {
          type: nonNull(MyEnumWithoutUnspecified),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecified: {
          type: nullable(MyEnumWithoutUnspecified),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        requiredMyEnums: {
          type: nonNull(list(nonNull(MyEnum))),
          extensions: {
            protobufField: {
              name: "required_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnums: {
          type: nullable(list(nonNull(MyEnum))),
          extensions: {
            protobufField: {
              name: "optional_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecifieds: {
          type: nonNull(list(nonNull(MyEnumWithoutUnspecified))),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecifieds: {
          type: nullable(list(nonNull(MyEnumWithoutUnspecified))),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/enums/MessageWithEnumsInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

/* eslint-disable */

import { enumType } from "nexus";

export const MyEnum = enumType({
  name: "MyEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "MY_ENUM_FOO" } },
  }, {
    name: "BAR",
    value: 2,
    description: "This is Bar.",
    extensions: { protobufEnumValue: { name: "MY_ENUM_BAR" } },
  }, {
    name: "BAZ",
    value: 3,
    extensions: { protobufEnumValue: { name: "MY_ENUM_BAZ" } },
  }],
  extensions: {
    protobufEnum: {
      name: "MyEnum",
      fullName: "testapi.enums.MyEnum",
      package: "testapi.enums",
    },
  },
});
",
    "name": "testapis/enums/MyEnum.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

/* eslint-disable */

import { enumType } from "nexus";

export const MyEnumWithoutUnspecified = enumType({
  name: "MyEnumWithoutUnspecified",
  members: [{
    name: "FOO",
    value: 0,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_FOO" },
    },
  }, {
    name: "BAR",
    value: 1,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAR" },
    },
  }, {
    name: "BAZ",
    value: 2,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAZ" },
    },
  }],
  extensions: {
    protobufEnum: {
      name: "MyEnumWithoutUnspecified",
      fullName: "testapi.enums.MyEnumWithoutUnspecified",
      package: "testapi.enums",
    },
  },
});
",
    "name": "testapis/enums/MyEnumWithoutUnspecified.nexus.ts",
  },
]
`;

exports[`'testapis.enums' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

/* eslint-disable */

import {
  MessageWithEnums as MessageWithEnums1,
  MyEnum as MyEnum2,
} from "@testapis/proto/testapis/enums/enums_pb";
import {
  enumType,
  inputObjectType,
  list,
  nonNull,
  nullable,
  objectType,
} from "nexus";

export type testapi$enums$MessageWithEnums = MessageWithEnums1;
export const MessageWithEnums = objectType({
  name: "MessageWithEnums",
  definition: (t) => {
    t.field("requiredMyEnum", {
      type: nonNull("MyEnum"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredMyEnum();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
          throw new Error(
            "requiredMyEnum is required field. But got unspecified.",
          );
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_my_enum",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("optionalMyEnum", {
      type: nullable("MyEnum"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalMyEnum();
        if (value == null) {
          return null;
        }
        if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("requiredMyEnumWithoutUnspecified", {
      type: nonNull("MyEnumWithoutUnspecified"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredMyEnumWithoutUnspecified();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_my_enum_without_unspecified",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("optionalMyEnumWithoutUnspecified", {
      type: nullable("MyEnumWithoutUnspecified"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalMyEnumWithoutUnspecified();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum_without_unspecified",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("requiredMyEnums", {
      type: nonNull(list(nonNull("MyEnum"))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredMyEnumsList().map((value) => {
          if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
            throw new Error(
              "requiredMyEnums is required field. But got unspecified.",
            );
          }
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_my_enums",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("optionalMyEnums", {
      type: nullable(list(nonNull("MyEnum"))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalMyEnumsList().map((value) => {
          if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
            throw new Error(
              "optionalMyEnums is required field. But got unspecified.",
            );
          }
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "optional_my_enums",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("requiredMyEnumWithoutUnspecifieds", {
      type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredMyEnumWithoutUnspecifiedsList().map(
          (value) => {
            return value;
          },
        );
      },
      extensions: {
        protobufField: {
          name: "required_my_enum_without_unspecifieds",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("optionalMyEnumWithoutUnspecifieds", {
      type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalMyEnumWithoutUnspecifiedsList().map(
          (value) => {
            return value;
          },
        );
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum_without_unspecifieds",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWithEnums1;
  },
  sourceType: { module: __filename, export: "testapi$enums$MessageWithEnums" },
  extensions: {
    protobufMessage: {
      fullName: "testapi.enums.MessageWithEnums",
      name: "MessageWithEnums",
      package: "testapi.enums",
    },
  },
});

export const MessageWithEnumsInput = Object.assign(
  inputObjectType({
    name: "MessageWithEnumsInput",
    definition: (t) => {
      t.field("requiredMyEnum", {
        type: nonNull("MyEnum"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnum", {
        type: nullable("MyEnum"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecified", {
        type: nonNull("MyEnumWithoutUnspecified"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecified", {
        type: nullable("MyEnumWithoutUnspecified"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("requiredMyEnums", {
        type: nonNull(list(nonNull("MyEnum"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnums", {
        type: nullable(list(nonNull("MyEnum"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecifieds", {
        type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecifieds", {
        type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapi.enums.MessageWithEnums",
        name: "MessageWithEnums",
        package: "testapi.enums",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithEnumsInput"],
    ): MessageWithEnums1 => {
      const output = new MessageWithEnums1();
      output.setRequiredMyEnum(input.requiredMyEnum);
      if (input.optionalMyEnum != null) {
        output.setOptionalMyEnum(input.optionalMyEnum);
      }
      output.setRequiredMyEnumWithoutUnspecified(
        input.requiredMyEnumWithoutUnspecified,
      );
      if (input.optionalMyEnumWithoutUnspecified != null) {
        output.setOptionalMyEnumWithoutUnspecified(
          input.optionalMyEnumWithoutUnspecified,
        );
      }
      output.setRequiredMyEnumsList(input.requiredMyEnums.map((v) => v));
      if (input.optionalMyEnums != null) {
        output.setOptionalMyEnumsList(input.optionalMyEnums.map((v) => v));
      }
      output.setRequiredMyEnumWithoutUnspecifiedsList(
        input.requiredMyEnumWithoutUnspecifieds.map((v) => v),
      );
      if (input.optionalMyEnumWithoutUnspecifieds != null) {
        output.setOptionalMyEnumWithoutUnspecifiedsList(
          input.optionalMyEnumWithoutUnspecifieds.map((v) => v),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredMyEnum: {
          type: nonNull("MyEnum"),
          extensions: {
            protobufField: {
              name: "required_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnum: {
          type: nullable("MyEnum"),
          extensions: {
            protobufField: {
              name: "optional_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecified: {
          type: nonNull("MyEnumWithoutUnspecified"),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecified: {
          type: nullable("MyEnumWithoutUnspecified"),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        requiredMyEnums: {
          type: nonNull(list(nonNull("MyEnum"))),
          extensions: {
            protobufField: {
              name: "required_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnums: {
          type: nullable(list(nonNull("MyEnum"))),
          extensions: {
            protobufField: {
              name: "optional_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecifieds: {
          type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecifieds: {
          type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
      },
    },
  },
);
export const MyEnum = enumType({
  name: "MyEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "MY_ENUM_FOO" } },
  }, {
    name: "BAR",
    value: 2,
    description: "This is Bar.",
    extensions: { protobufEnumValue: { name: "MY_ENUM_BAR" } },
  }, {
    name: "BAZ",
    value: 3,
    extensions: { protobufEnumValue: { name: "MY_ENUM_BAZ" } },
  }],
  extensions: {
    protobufEnum: {
      name: "MyEnum",
      fullName: "testapi.enums.MyEnum",
      package: "testapi.enums",
    },
  },
});
export const MyEnumWithoutUnspecified = enumType({
  name: "MyEnumWithoutUnspecified",
  members: [{
    name: "FOO",
    value: 0,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_FOO" },
    },
  }, {
    name: "BAR",
    value: 1,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAR" },
    },
  }, {
    name: "BAZ",
    value: 2,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAZ" },
    },
  }],
  extensions: {
    protobufEnum: {
      name: "MyEnumWithoutUnspecified",
      fullName: "testapi.enums.MyEnumWithoutUnspecified",
      package: "testapi.enums",
    },
  },
});
",
    "name": "testapis/enums/enums_pb_nexus.ts",
  },
]
`;

exports[`'testapis.enums' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

/* eslint-disable */

import {
  MessageWithEnums as MessageWithEnums1,
  MyEnum as MyEnum2,
} from "@testapis/proto/testapis/enums/enums_pb";
import {
  enumType,
  inputObjectType,
  list,
  nonNull,
  nullable,
  objectType,
} from "nexus";

export type testapi$enums$MessageWithEnums = MessageWithEnums1;
export const MessageWithEnums = objectType({
  name: "MessageWithEnums",
  definition: (t) => {
    t.field("requiredMyEnum", {
      type: nonNull("MyEnum"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredMyEnum();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
          throw new Error(
            "requiredMyEnum is required field. But got unspecified.",
          );
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_my_enum",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("optionalMyEnum", {
      type: nullable("MyEnum"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalMyEnum();
        if (value == null) {
          return null;
        }
        if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("requiredMyEnumWithoutUnspecified", {
      type: nonNull("MyEnumWithoutUnspecified"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredMyEnumWithoutUnspecified();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_my_enum_without_unspecified",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("optionalMyEnumWithoutUnspecified", {
      type: nullable("MyEnumWithoutUnspecified"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalMyEnumWithoutUnspecified();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum_without_unspecified",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("requiredMyEnums", {
      type: nonNull(list(nonNull("MyEnum"))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredMyEnumsList().map((value) => {
          if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
            throw new Error(
              "requiredMyEnums is required field. But got unspecified.",
            );
          }
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_my_enums",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("optionalMyEnums", {
      type: nullable(list(nonNull("MyEnum"))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalMyEnumsList().map((value) => {
          if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
            throw new Error(
              "optionalMyEnums is required field. But got unspecified.",
            );
          }
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "optional_my_enums",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("requiredMyEnumWithoutUnspecifieds", {
      type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredMyEnumWithoutUnspecifiedsList().map(
          (value) => {
            return value;
          },
        );
      },
      extensions: {
        protobufField: {
          name: "required_my_enum_without_unspecifieds",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("optionalMyEnumWithoutUnspecifieds", {
      type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalMyEnumWithoutUnspecifiedsList().map(
          (value) => {
            return value;
          },
        );
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum_without_unspecifieds",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWithEnums1;
  },
  sourceType: { module: __filename, export: "testapi$enums$MessageWithEnums" },
  extensions: {
    protobufMessage: {
      fullName: "testapi.enums.MessageWithEnums",
      name: "MessageWithEnums",
      package: "testapi.enums",
    },
  },
});

export const MessageWithEnumsInput = Object.assign(
  inputObjectType({
    name: "MessageWithEnumsInput",
    definition: (t) => {
      t.field("requiredMyEnum", {
        type: nonNull("MyEnum"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnum", {
        type: nullable("MyEnum"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecified", {
        type: nonNull("MyEnumWithoutUnspecified"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecified", {
        type: nullable("MyEnumWithoutUnspecified"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("requiredMyEnums", {
        type: nonNull(list(nonNull("MyEnum"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnums", {
        type: nullable(list(nonNull("MyEnum"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecifieds", {
        type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecifieds", {
        type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapi.enums.MessageWithEnums",
        name: "MessageWithEnums",
        package: "testapi.enums",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithEnumsInput"],
    ): MessageWithEnums1 => {
      const output = new MessageWithEnums1();
      output.setRequiredMyEnum(input.requiredMyEnum);
      if (input.optionalMyEnum != null) {
        output.setOptionalMyEnum(input.optionalMyEnum);
      }
      output.setRequiredMyEnumWithoutUnspecified(
        input.requiredMyEnumWithoutUnspecified,
      );
      if (input.optionalMyEnumWithoutUnspecified != null) {
        output.setOptionalMyEnumWithoutUnspecified(
          input.optionalMyEnumWithoutUnspecified,
        );
      }
      output.setRequiredMyEnumsList(input.requiredMyEnums.map((v) => v));
      if (input.optionalMyEnums != null) {
        output.setOptionalMyEnumsList(input.optionalMyEnums.map((v) => v));
      }
      output.setRequiredMyEnumWithoutUnspecifiedsList(
        input.requiredMyEnumWithoutUnspecifieds.map((v) => v),
      );
      if (input.optionalMyEnumWithoutUnspecifieds != null) {
        output.setOptionalMyEnumWithoutUnspecifiedsList(
          input.optionalMyEnumWithoutUnspecifieds.map((v) => v),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredMyEnum: {
          type: nonNull("MyEnum"),
          extensions: {
            protobufField: {
              name: "required_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnum: {
          type: nullable("MyEnum"),
          extensions: {
            protobufField: {
              name: "optional_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecified: {
          type: nonNull("MyEnumWithoutUnspecified"),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecified: {
          type: nullable("MyEnumWithoutUnspecified"),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        requiredMyEnums: {
          type: nonNull(list(nonNull("MyEnum"))),
          extensions: {
            protobufField: {
              name: "required_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnums: {
          type: nullable(list(nonNull("MyEnum"))),
          extensions: {
            protobufField: {
              name: "optional_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecifieds: {
          type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecifieds: {
          type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
      },
    },
  },
);

export const MessageWithEnumsPartialInput = Object.assign(
  inputObjectType({
    name: "MessageWithEnumsPartialInput",
    definition: (t) => {
      t.field("requiredMyEnum", {
        type: nullable("MyEnum"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnum", {
        type: nullable("MyEnum"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecified", {
        type: nullable("MyEnumWithoutUnspecified"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecified", {
        type: nullable("MyEnumWithoutUnspecified"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("requiredMyEnums", {
        type: nullable(list(nonNull("MyEnum"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnums", {
        type: nullable(list(nonNull("MyEnum"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecifieds", {
        type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecifieds", {
        type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapi.enums.MessageWithEnums",
        name: "MessageWithEnums",
        package: "testapi.enums",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithEnumsPartialInput"],
    ): MessageWithEnums1 => {
      const output = new MessageWithEnums1();
      if (input.requiredMyEnum != null) {
        output.setRequiredMyEnum(input.requiredMyEnum);
      }
      if (input.optionalMyEnum != null) {
        output.setOptionalMyEnum(input.optionalMyEnum);
      }
      if (input.requiredMyEnumWithoutUnspecified != null) {
        output.setRequiredMyEnumWithoutUnspecified(
          input.requiredMyEnumWithoutUnspecified,
        );
      }
      if (input.optionalMyEnumWithoutUnspecified != null) {
        output.setOptionalMyEnumWithoutUnspecified(
          input.optionalMyEnumWithoutUnspecified,
        );
      }
      if (input.requiredMyEnums != null) {
        output.setRequiredMyEnumsList(input.requiredMyEnums.map((v) => v));
      }
      if (input.optionalMyEnums != null) {
        output.setOptionalMyEnumsList(input.optionalMyEnums.map((v) => v));
      }
      if (input.requiredMyEnumWithoutUnspecifieds != null) {
        output.setRequiredMyEnumWithoutUnspecifiedsList(
          input.requiredMyEnumWithoutUnspecifieds.map((v) => v),
        );
      }
      if (input.optionalMyEnumWithoutUnspecifieds != null) {
        output.setOptionalMyEnumWithoutUnspecifiedsList(
          input.optionalMyEnumWithoutUnspecifieds.map((v) => v),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredMyEnum: {
          type: nullable("MyEnum"),
          extensions: {
            protobufField: {
              name: "required_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnum: {
          type: nullable("MyEnum"),
          extensions: {
            protobufField: {
              name: "optional_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecified: {
          type: nullable("MyEnumWithoutUnspecified"),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecified: {
          type: nullable("MyEnumWithoutUnspecified"),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        requiredMyEnums: {
          type: nullable(list(nonNull("MyEnum"))),
          extensions: {
            protobufField: {
              name: "required_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnums: {
          type: nullable(list(nonNull("MyEnum"))),
          extensions: {
            protobufField: {
              name: "optional_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecifieds: {
          type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecifieds: {
          type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
      },
    },
  },
);
export const MyEnum = enumType({
  name: "MyEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "MY_ENUM_FOO" } },
  }, {
    name: "BAR",
    value: 2,
    description: "This is Bar.",
    extensions: { protobufEnumValue: { name: "MY_ENUM_BAR" } },
  }, {
    name: "BAZ",
    value: 3,
    extensions: { protobufEnumValue: { name: "MY_ENUM_BAZ" } },
  }],
  extensions: {
    protobufEnum: {
      name: "MyEnum",
      fullName: "testapi.enums.MyEnum",
      package: "testapi.enums",
    },
  },
});
export const MyEnumWithoutUnspecified = enumType({
  name: "MyEnumWithoutUnspecified",
  members: [{
    name: "FOO",
    value: 0,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_FOO" },
    },
  }, {
    name: "BAR",
    value: 1,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAR" },
    },
  }, {
    name: "BAZ",
    value: 2,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAZ" },
    },
  }],
  extensions: {
    protobufEnum: {
      name: "MyEnumWithoutUnspecified",
      fullName: "testapi.enums.MyEnumWithoutUnspecified",
      package: "testapi.enums",
    },
  },
});
",
    "name": "testapis/enums/enums_pb_nexus.ts",
  },
]
`;

exports[`'testapis.enums' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

/* eslint-disable */

import { testapi } from "@testapis/proto/testapis/enums";
import {
  enumType,
  inputObjectType,
  list,
  nonNull,
  nullable,
  objectType,
} from "nexus";

export type testapi$enums$MessageWithEnums = testapi.enums.MessageWithEnums;
export const MessageWithEnums = objectType({
  name: "MessageWithEnums",
  definition: (t) => {
    t.field("requiredMyEnum", {
      type: nonNull("MyEnum"),
      description: "Required.",
      resolve: (source) => {
        const value = source.requiredMyEnum;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        if (value === testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
          throw new Error(
            "requiredMyEnum is required field. But got unspecified.",
          );
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_my_enum",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("optionalMyEnum", {
      type: nullable("MyEnum"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.optionalMyEnum;
        if (value == null) {
          return null;
        }
        if (value === testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("requiredMyEnumWithoutUnspecified", {
      type: nonNull("MyEnumWithoutUnspecified"),
      description: "Required.",
      resolve: (source) => {
        const value = source.requiredMyEnumWithoutUnspecified;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_my_enum_without_unspecified",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("optionalMyEnumWithoutUnspecified", {
      type: nullable("MyEnumWithoutUnspecified"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.optionalMyEnumWithoutUnspecified;
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum_without_unspecified",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("requiredMyEnums", {
      type: nonNull(list(nonNull("MyEnum"))),
      description: "Required.",
      resolve: (source) => {
        return source.requiredMyEnums.map((value) => {
          if (value === testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
            throw new Error(
              "requiredMyEnums is required field. But got unspecified.",
            );
          }
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_my_enums",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("optionalMyEnums", {
      type: nullable(list(nonNull("MyEnum"))),
      description: "Optional.",
      resolve: (source) => {
        return source.optionalMyEnums.map((value) => {
          if (value === testapi.enums.MyEnum.MY_ENUM_UNSPECIFIED) {
            throw new Error(
              "optionalMyEnums is required field. But got unspecified.",
            );
          }
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "optional_my_enums",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("requiredMyEnumWithoutUnspecifieds", {
      type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
      description: "Required.",
      resolve: (source) => {
        return source.requiredMyEnumWithoutUnspecifieds.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_my_enum_without_unspecifieds",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("optionalMyEnumWithoutUnspecifieds", {
      type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
      description: "Optional.",
      resolve: (source) => {
        return source.optionalMyEnumWithoutUnspecifieds.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum_without_unspecifieds",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapi.enums.MessageWithEnums;
  },
  sourceType: { module: __filename, export: "testapi$enums$MessageWithEnums" },
  extensions: {
    protobufMessage: {
      fullName: "testapi.enums.MessageWithEnums",
      name: "MessageWithEnums",
      package: "testapi.enums",
    },
  },
});

export const MessageWithEnumsInput = Object.assign(
  inputObjectType({
    name: "MessageWithEnumsInput",
    definition: (t) => {
      t.field("requiredMyEnum", {
        type: nonNull("MyEnum"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnum", {
        type: nullable("MyEnum"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecified", {
        type: nonNull("MyEnumWithoutUnspecified"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecified", {
        type: nullable("MyEnumWithoutUnspecified"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("requiredMyEnums", {
        type: nonNull(list(nonNull("MyEnum"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnums", {
        type: nullable(list(nonNull("MyEnum"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecifieds", {
        type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecifieds", {
        type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapi.enums.MessageWithEnums",
        name: "MessageWithEnums",
        package: "testapi.enums",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithEnumsInput"],
    ): testapi.enums.MessageWithEnums => {
      const output = new testapi.enums.MessageWithEnums();
      output.requiredMyEnum = input.requiredMyEnum;
      if (input.optionalMyEnum != null) {
        output.optionalMyEnum = input.optionalMyEnum;
      }
      output.requiredMyEnumWithoutUnspecified =
        input.requiredMyEnumWithoutUnspecified;
      if (input.optionalMyEnumWithoutUnspecified != null) {
        output.optionalMyEnumWithoutUnspecified =
          input.optionalMyEnumWithoutUnspecified;
      }
      output.requiredMyEnums = input.requiredMyEnums.map((v) => v);
      if (input.optionalMyEnums != null) {
        output.optionalMyEnums = input.optionalMyEnums.map((v) => v);
      }
      output.requiredMyEnumWithoutUnspecifieds = input
        .requiredMyEnumWithoutUnspecifieds.map((v) => v);
      if (input.optionalMyEnumWithoutUnspecifieds != null) {
        output.optionalMyEnumWithoutUnspecifieds = input
          .optionalMyEnumWithoutUnspecifieds.map((v) => v);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredMyEnum: {
          type: nonNull("MyEnum"),
          extensions: {
            protobufField: {
              name: "required_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnum: {
          type: nullable("MyEnum"),
          extensions: {
            protobufField: {
              name: "optional_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecified: {
          type: nonNull("MyEnumWithoutUnspecified"),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecified: {
          type: nullable("MyEnumWithoutUnspecified"),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        requiredMyEnums: {
          type: nonNull(list(nonNull("MyEnum"))),
          extensions: {
            protobufField: {
              name: "required_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnums: {
          type: nullable(list(nonNull("MyEnum"))),
          extensions: {
            protobufField: {
              name: "optional_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecifieds: {
          type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecifieds: {
          type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
      },
    },
  },
);
export const MyEnum = enumType({
  name: "MyEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "MY_ENUM_FOO" } },
  }, {
    name: "BAR",
    value: 2,
    description: "This is Bar.",
    extensions: { protobufEnumValue: { name: "MY_ENUM_BAR" } },
  }, {
    name: "BAZ",
    value: 3,
    extensions: { protobufEnumValue: { name: "MY_ENUM_BAZ" } },
  }],
  extensions: {
    protobufEnum: {
      name: "MyEnum",
      fullName: "testapi.enums.MyEnum",
      package: "testapi.enums",
    },
  },
});
export const MyEnumWithoutUnspecified = enumType({
  name: "MyEnumWithoutUnspecified",
  members: [{
    name: "FOO",
    value: 0,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_FOO" },
    },
  }, {
    name: "BAR",
    value: 1,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAR" },
    },
  }, {
    name: "BAZ",
    value: 2,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAZ" },
    },
  }],
  extensions: {
    protobufEnum: {
      name: "MyEnumWithoutUnspecified",
      fullName: "testapi.enums.MyEnumWithoutUnspecified",
      package: "testapi.enums",
    },
  },
});
",
    "name": "testapis/enums/enums_pb_nexus.ts",
  },
]
`;

exports[`'testapis.enums' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/enums/enums.proto

/* eslint-disable */

import {
  enumType,
  inputObjectType,
  list,
  nonNull,
  nullable,
  objectType,
} from "nexus";
import {
  MessageWithEnums as MessageWithEnums1,
  MyEnum as MyEnum2,
} from "./testapis/enums/enums_pb";

export type testapi$enums$MessageWithEnums = MessageWithEnums1;
export const MessageWithEnums = objectType({
  name: "MessageWithEnums",
  definition: (t) => {
    t.field("requiredMyEnum", {
      type: nonNull("MyEnum"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredMyEnum();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
          throw new Error(
            "requiredMyEnum is required field. But got unspecified.",
          );
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_my_enum",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("optionalMyEnum", {
      type: nullable("MyEnum"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalMyEnum();
        if (value == null) {
          return null;
        }
        if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("requiredMyEnumWithoutUnspecified", {
      type: nonNull("MyEnumWithoutUnspecified"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredMyEnumWithoutUnspecified();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_my_enum_without_unspecified",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("optionalMyEnumWithoutUnspecified", {
      type: nullable("MyEnumWithoutUnspecified"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalMyEnumWithoutUnspecified();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum_without_unspecified",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("requiredMyEnums", {
      type: nonNull(list(nonNull("MyEnum"))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredMyEnumsList().map((value) => {
          if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
            throw new Error(
              "requiredMyEnums is required field. But got unspecified.",
            );
          }
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_my_enums",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("optionalMyEnums", {
      type: nullable(list(nonNull("MyEnum"))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalMyEnumsList().map((value) => {
          if (value === MyEnum2.MY_ENUM_UNSPECIFIED) {
            throw new Error(
              "optionalMyEnums is required field. But got unspecified.",
            );
          }
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "optional_my_enums",
          typeFullName: "testapi.enums.MyEnum",
        },
      },
    });
    t.field("requiredMyEnumWithoutUnspecifieds", {
      type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredMyEnumWithoutUnspecifiedsList().map(
          (value) => {
            return value;
          },
        );
      },
      extensions: {
        protobufField: {
          name: "required_my_enum_without_unspecifieds",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
    t.field("optionalMyEnumWithoutUnspecifieds", {
      type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalMyEnumWithoutUnspecifiedsList().map(
          (value) => {
            return value;
          },
        );
      },
      extensions: {
        protobufField: {
          name: "optional_my_enum_without_unspecifieds",
          typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWithEnums1;
  },
  sourceType: { module: __filename, export: "testapi$enums$MessageWithEnums" },
  extensions: {
    protobufMessage: {
      fullName: "testapi.enums.MessageWithEnums",
      name: "MessageWithEnums",
      package: "testapi.enums",
    },
  },
});

export const MessageWithEnumsInput = Object.assign(
  inputObjectType({
    name: "MessageWithEnumsInput",
    definition: (t) => {
      t.field("requiredMyEnum", {
        type: nonNull("MyEnum"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnum", {
        type: nullable("MyEnum"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecified", {
        type: nonNull("MyEnumWithoutUnspecified"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecified", {
        type: nullable("MyEnumWithoutUnspecified"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecified",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("requiredMyEnums", {
        type: nonNull(list(nonNull("MyEnum"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("optionalMyEnums", {
        type: nullable(list(nonNull("MyEnum"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enums",
            typeFullName: "testapi.enums.MyEnum",
          },
        },
      });
      t.field("requiredMyEnumWithoutUnspecifieds", {
        type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
      t.field("optionalMyEnumWithoutUnspecifieds", {
        type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_my_enum_without_unspecifieds",
            typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapi.enums.MessageWithEnums",
        name: "MessageWithEnums",
        package: "testapi.enums",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithEnumsInput"],
    ): MessageWithEnums1 => {
      const output = new MessageWithEnums1();
      output.setRequiredMyEnum(input.requiredMyEnum);
      if (input.optionalMyEnum != null) {
        output.setOptionalMyEnum(input.optionalMyEnum);
      }
      output.setRequiredMyEnumWithoutUnspecified(
        input.requiredMyEnumWithoutUnspecified,
      );
      if (input.optionalMyEnumWithoutUnspecified != null) {
        output.setOptionalMyEnumWithoutUnspecified(
          input.optionalMyEnumWithoutUnspecified,
        );
      }
      output.setRequiredMyEnumsList(input.requiredMyEnums.map((v) => v));
      if (input.optionalMyEnums != null) {
        output.setOptionalMyEnumsList(input.optionalMyEnums.map((v) => v));
      }
      output.setRequiredMyEnumWithoutUnspecifiedsList(
        input.requiredMyEnumWithoutUnspecifieds.map((v) => v),
      );
      if (input.optionalMyEnumWithoutUnspecifieds != null) {
        output.setOptionalMyEnumWithoutUnspecifiedsList(
          input.optionalMyEnumWithoutUnspecifieds.map((v) => v),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredMyEnum: {
          type: nonNull("MyEnum"),
          extensions: {
            protobufField: {
              name: "required_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnum: {
          type: nullable("MyEnum"),
          extensions: {
            protobufField: {
              name: "optional_my_enum",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecified: {
          type: nonNull("MyEnumWithoutUnspecified"),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecified: {
          type: nullable("MyEnumWithoutUnspecified"),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecified",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        requiredMyEnums: {
          type: nonNull(list(nonNull("MyEnum"))),
          extensions: {
            protobufField: {
              name: "required_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        optionalMyEnums: {
          type: nullable(list(nonNull("MyEnum"))),
          extensions: {
            protobufField: {
              name: "optional_my_enums",
              typeFullName: "testapi.enums.MyEnum",
            },
          },
        },
        requiredMyEnumWithoutUnspecifieds: {
          type: nonNull(list(nonNull("MyEnumWithoutUnspecified"))),
          extensions: {
            protobufField: {
              name: "required_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
        optionalMyEnumWithoutUnspecifieds: {
          type: nullable(list(nonNull("MyEnumWithoutUnspecified"))),
          extensions: {
            protobufField: {
              name: "optional_my_enum_without_unspecifieds",
              typeFullName: "testapi.enums.MyEnumWithoutUnspecified",
            },
          },
        },
      },
    },
  },
);
export const MyEnum = enumType({
  name: "MyEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "MY_ENUM_FOO" } },
  }, {
    name: "BAR",
    value: 2,
    description: "This is Bar.",
    extensions: { protobufEnumValue: { name: "MY_ENUM_BAR" } },
  }, {
    name: "BAZ",
    value: 3,
    extensions: { protobufEnumValue: { name: "MY_ENUM_BAZ" } },
  }],
  extensions: {
    protobufEnum: {
      name: "MyEnum",
      fullName: "testapi.enums.MyEnum",
      package: "testapi.enums",
    },
  },
});
export const MyEnumWithoutUnspecified = enumType({
  name: "MyEnumWithoutUnspecified",
  members: [{
    name: "FOO",
    value: 0,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_FOO" },
    },
  }, {
    name: "BAR",
    value: 1,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAR" },
    },
  }, {
    name: "BAZ",
    value: 2,
    extensions: {
      protobufEnumValue: { name: "MY_ENUM_WITHOUT_UNSPECIFIED_BAZ" },
    },
  }],
  extensions: {
    protobufEnum: {
      name: "MyEnumWithoutUnspecified",
      fullName: "testapi.enums.MyEnumWithoutUnspecified",
      package: "testapi.enums",
    },
  },
});
",
    "name": "testapis/enums/enums_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import {
  EnumWillRename,
  PrefixedEnum,
  PrefixedMessage,
} from "@testapis/proto/testapis/extensions/extensions_pb";
import { list, nonNull, nullable, objectType } from "nexus";
import { TestPrefixIgnoredMessageNotIgnored } from "./TestPrefixIgnoredMessageNotIgnored.nexus";
import { TestPrefixPrefixedEnum } from "./TestPrefixPrefixedEnum.nexus";
import { TestPrefixPrefixedMessageSquashedMessage } from "./TestPrefixPrefixedMessageSquashedMessage.nexus";
import { TestPrefixRenamedEnum } from "./TestPrefixRenamedEnum.nexus";
import { TestPrefixRenamedMessage } from "./TestPrefixRenamedMessage.nexus";

export type testapis$extensions$PrefixedMessage = PrefixedMessage;
export const TestPrefixPrefixedMessage = objectType({
  name: "TestPrefixPrefixedMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Output only.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("prefixedEnum", {
      type: nullable(TestPrefixPrefixedEnum),
      resolve: (source) => {
        const value = source.getPrefixedEnum();
        if (value == null) {
          return null;
        }
        if (value === PrefixedEnum.PREFIXED_ENUM_UNSPECIFIED) {
          return null;
        }
        if (value === PrefixedEnum.PREFIXED_IGNORED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "prefixed_enum",
          typeFullName: "testapis.extensions.PrefixedEnum",
        },
      },
    });
    t.field("notIgnoredMessage", {
      type: nullable(TestPrefixIgnoredMessageNotIgnored),
      resolve: (source) => {
        const value = source.getNotIgnoredMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "not_ignored_message",
          typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
        },
      },
    });
    t.field("squashedMessage", {
      type: nullable(TestPrefixPrefixedMessageSquashedMessage),
      resolve: (source) => {
        const value = source.getSquashedMessage();
        if (value == null) {
          return null;
        }
        switch (value.getSquashedMessageCase()) {
          case PrefixedMessage.SquashedMessage.SquashedMessageCase
            .ONEOF_FIELD: {
            return value.getOneofField()!;
          }

          case PrefixedMessage.SquashedMessage.SquashedMessageCase
            .ONEOF_FIELD_2: {
            return value.getOneofField2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: {
        protobufField: {
          name: "squashed_message",
          typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("thisFieldWasRenamed", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getThisFieldWillBeRenamed();
        return value;
      },
      extensions: {
        protobufField: {
          name: "this_field_will_be_renamed",
          typeFullName: "string",
          options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
        },
      },
    });
    t.field("skipResolver", {
      type: nonNull("String"),
      resolve: (source) => {
        throw new Error("not implemented");
      },
      extensions: {
        protobufField: {
          name: "skip_resolver",
          typeFullName: "string",
          options: { "[graphql.field]": { skipResolver: true } },
        },
      },
    });
    t.field("squashedMessages", {
      type: nullable(list(nonNull(TestPrefixPrefixedMessageSquashedMessage))),
      resolve: (source) => {
        return source.getSquashedMessagesList().map((value) => {
          switch (value.getSquashedMessageCase()) {
            case PrefixedMessage.SquashedMessage.SquashedMessageCase
              .ONEOF_FIELD: {
              return value.getOneofField()!;
            }

            case PrefixedMessage.SquashedMessage.SquashedMessageCase
              .ONEOF_FIELD_2: {
              return value.getOneofField2()!;
            }

            default: {
              throw new Error(
                "One of the following fields must be non-null: oneof_field, oneof_field_2",
              );
            }
          }
        });
      },
      extensions: {
        protobufField: {
          name: "squashed_messages",
          typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("renamedMessage", {
      type: nullable(TestPrefixRenamedMessage),
      resolve: (source) => {
        const value = source.getRenamedMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "renamed_message",
          typeFullName: "testapis.extensions.MessageWillRename",
        },
      },
    });
    t.field("renamedEnum", {
      type: nullable(TestPrefixRenamedEnum),
      resolve: (source) => {
        const value = source.getRenamedEnum();
        if (value == null) {
          return null;
        }
        if (value === EnumWillRename.ENUM_WILL_RENAME_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "renamed_enum",
          typeFullName: "testapis.extensions.EnumWillRename",
        },
      },
    });
    t.field("partialIgnoreOneof", {
      type: nullable(TestPrefixPrefixedMessagePartialIgnoreOneof),
      resolve: (source) => {
        const value = source;
        switch (value.getPartialIgnoreOneofCase()) {
          case PrefixedMessage.PartialIgnoreOneofCase.ONEOF_NOT_IGNORED_FIELD: {
            return value.getOneofNotIgnoredField()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "partial_ignore_oneof" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage",
      name: "PrefixedMessage",
      package: "testapis.extensions",
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixPrefixedMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { MessageWillRename } from "@testapis/proto/testapis/extensions/extensions_pb";
import { nonNull, objectType } from "nexus";

export type testapis$extensions$MessageWillRename = MessageWillRename;
export const TestPrefixRenamedMessage = objectType({
  name: "TestPrefixRenamedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWillRename;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$MessageWillRename",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.MessageWillRename",
      name: "MessageWillRename",
      package: "testapis.extensions",
      options: { "[graphql.object_type]": { name: "RenamedMessage" } },
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixRenamedMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { MessageOnlyOutput } from "@testapis/proto/testapis/extensions/extensions_pb";
import { nonNull, objectType } from "nexus";

export type testapis$extensions$MessageOnlyOutput = MessageOnlyOutput;
export const TestPrefixMessageOnlyOutput = objectType({
  name: "TestPrefixMessageOnlyOutput",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageOnlyOutput;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$MessageOnlyOutput",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.MessageOnlyOutput",
      name: "MessageOnlyOutput",
      package: "testapis.extensions",
      options: { "[graphql.input_type]": { ignore: true } },
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixMessageOnlyOutput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { PrefixedMessage } from "@testapis/proto/testapis/extensions/extensions_pb";
import { nonNull, objectType } from "nexus";

export type testapis$extensions$PrefixedMessage$InnerMessage =
  PrefixedMessage.InnerMessage;
export const TestPrefixPrefixedMessageInnerMessage = objectType({
  name: "TestPrefixPrefixedMessageInnerMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.extensions",
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixPrefixedMessageInnerMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { PrefixedMessage } from "@testapis/proto/testapis/extensions/extensions_pb";
import { nonNull, objectType } from "nexus";

export type testapis$extensions$PrefixedMessage$InnerMessage2 =
  PrefixedMessage.InnerMessage2;
export const TestPrefixPrefixedMessageInnerMessage2 = objectType({
  name: "TestPrefixPrefixedMessageInnerMessage2",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage.InnerMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage$InnerMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
      name: "InnerMessage2",
      package: "testapis.extensions",
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixPrefixedMessageInnerMessage2.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { IgnoredMessage } from "@testapis/proto/testapis/extensions/extensions_pb";
import { nonNull, objectType } from "nexus";

export type testapis$extensions$IgnoredMessage$NotIgnored =
  IgnoredMessage.NotIgnored;
export const TestPrefixIgnoredMessageNotIgnored = objectType({
  name: "TestPrefixIgnoredMessageNotIgnored",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof IgnoredMessage.NotIgnored;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$IgnoredMessage$NotIgnored",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
      name: "NotIgnored",
      package: "testapis.extensions",
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixIgnoredMessageNotIgnored.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { PrefixedMessage } from "@testapis/proto/testapis/extensions/extensions_pb";
import { inputObjectType, list, nonNull, nullable } from "nexus";
import { TestPrefixIgnoredMessageNotIgnoredInput } from "./TestPrefixIgnoredMessageNotIgnoredInput.nexus";
import { TestPrefixPrefixedEnum } from "./TestPrefixPrefixedEnum.nexus";
import { TestPrefixPrefixedMessageInnerMessageInput } from "./TestPrefixPrefixedMessageInnerMessageInput.nexus";
import { TestPrefixPrefixedMessageSquashedMessageInput } from "./TestPrefixPrefixedMessageSquashedMessageInput.nexus";
import { TestPrefixRenamedEnum } from "./TestPrefixRenamedEnum.nexus";
import { TestPrefixRenamedMessageInput } from "./TestPrefixRenamedMessageInput.nexus";

export const TestPrefixPrefixedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("prefixedEnum", {
        type: nullable(TestPrefixPrefixedEnum),
        extensions: {
          protobufField: {
            name: "prefixed_enum",
            typeFullName: "testapis.extensions.PrefixedEnum",
          },
        },
      });
      t.field("notIgnoredMessage", {
        type: nullable(TestPrefixIgnoredMessageNotIgnoredInput),
        extensions: {
          protobufField: {
            name: "not_ignored_message",
            typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
          },
        },
      });
      t.field("squashedMessage", {
        type: nullable(TestPrefixPrefixedMessageSquashedMessageInput),
        extensions: {
          protobufField: {
            name: "squashed_message",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("thisFieldWasRenamed", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "this_field_will_be_renamed",
            typeFullName: "string",
            options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
          },
        },
      });
      t.field("oneofNotIgnoredField", {
        type: nullable(TestPrefixPrefixedMessageInnerMessageInput),
        extensions: {
          protobufField: {
            name: "oneof_not_ignored_field",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
          },
        },
      });
      t.field("skipResolver", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "skip_resolver",
            typeFullName: "string",
            options: { "[graphql.field]": { skipResolver: true } },
          },
        },
      });
      t.field("squashedMessages", {
        type: nullable(
          list(nonNull(TestPrefixPrefixedMessageSquashedMessageInput)),
        ),
        extensions: {
          protobufField: {
            name: "squashed_messages",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("renamedMessage", {
        type: nullable(TestPrefixRenamedMessageInput),
        extensions: {
          protobufField: {
            name: "renamed_message",
            typeFullName: "testapis.extensions.MessageWillRename",
          },
        },
      });
      t.field("renamedEnum", {
        type: nullable(TestPrefixRenamedEnum),
        extensions: {
          protobufField: {
            name: "renamed_enum",
            typeFullName: "testapis.extensions.EnumWillRename",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage",
        name: "PrefixedMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixPrefixedMessageInput"],
    ): PrefixedMessage => {
      const output = new PrefixedMessage();
      output.setBody(input.body);
      if (input.prefixedEnum != null) {
        output.setPrefixedEnum(input.prefixedEnum);
      }
      if (input.notIgnoredMessage != null) {
        output.setNotIgnoredMessage(
          TestPrefixIgnoredMessageNotIgnoredInput.toProto(
            input.notIgnoredMessage,
          ),
        );
      }
      if (input.squashedMessage != null) {
        output.setSquashedMessage(
          TestPrefixPrefixedMessageSquashedMessageInput.toProto(
            input.squashedMessage,
          ),
        );
      }
      output.setThisFieldWillBeRenamed(input.thisFieldWasRenamed);
      if (input.oneofNotIgnoredField != null) {
        output.setOneofNotIgnoredField(
          TestPrefixPrefixedMessageInnerMessageInput.toProto(
            input.oneofNotIgnoredField,
          ),
        );
      }
      output.setSkipResolver(input.skipResolver);
      if (input.squashedMessages != null) {
        output.setSquashedMessagesList(input.squashedMessages.map((v) =>
          TestPrefixPrefixedMessageSquashedMessageInput.toProto(v)
        ));
      }
      if (input.renamedMessage != null) {
        output.setRenamedMessage(
          TestPrefixRenamedMessageInput.toProto(input.renamedMessage),
        );
      }
      if (input.renamedEnum != null) {
        output.setRenamedEnum(input.renamedEnum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        prefixedEnum: {
          type: nullable(TestPrefixPrefixedEnum),
          extensions: {
            protobufField: {
              name: "prefixed_enum",
              typeFullName: "testapis.extensions.PrefixedEnum",
            },
          },
        },
        notIgnoredMessage: {
          type: nullable(TestPrefixIgnoredMessageNotIgnoredInput),
          extensions: {
            protobufField: {
              name: "not_ignored_message",
              typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
            },
          },
        },
        squashedMessage: {
          type: nullable(TestPrefixPrefixedMessageSquashedMessageInput),
          extensions: {
            protobufField: {
              name: "squashed_message",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        thisFieldWasRenamed: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "this_field_will_be_renamed",
              typeFullName: "string",
              options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
            },
          },
        },
        oneofNotIgnoredField: {
          type: nullable(TestPrefixPrefixedMessageInnerMessageInput),
          extensions: {
            protobufField: {
              name: "oneof_not_ignored_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        },
        skipResolver: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "skip_resolver",
              typeFullName: "string",
              options: { "[graphql.field]": { skipResolver: true } },
            },
          },
        },
        squashedMessages: {
          type: nullable(
            list(nonNull(TestPrefixPrefixedMessageSquashedMessageInput)),
          ),
          extensions: {
            protobufField: {
              name: "squashed_messages",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        renamedMessage: {
          type: nullable(TestPrefixRenamedMessageInput),
          extensions: {
            protobufField: {
              name: "renamed_message",
              typeFullName: "testapis.extensions.MessageWillRename",
            },
          },
        },
        renamedEnum: {
          type: nullable(TestPrefixRenamedEnum),
          extensions: {
            protobufField: {
              name: "renamed_enum",
              typeFullName: "testapis.extensions.EnumWillRename",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/TestPrefixPrefixedMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { MessageWillRename } from "@testapis/proto/testapis/extensions/extensions_pb";
import { inputObjectType, nonNull } from "nexus";

export const TestPrefixRenamedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixRenamedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.MessageWillRename",
        name: "MessageWillRename",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { name: "RenamedMessage" } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixRenamedMessageInput"],
    ): MessageWillRename => {
      const output = new MessageWillRename();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/TestPrefixRenamedMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { InterfaceMessage } from "@testapis/proto/testapis/extensions/extensions_pb";
import { inputObjectType, nonNull } from "nexus";
import { stringToNumber } from "proto-nexus";

export const TestPrefixInterfaceMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixInterfaceMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.InterfaceMessage",
        name: "InterfaceMessage",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { interface: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixInterfaceMessageInput"],
    ): InterfaceMessage => {
      const output = new InterfaceMessage();
      output.setId(stringToNumber(input.id));
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/TestPrefixInterfaceMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { PrefixedMessage } from "@testapis/proto/testapis/extensions/extensions_pb";
import { inputObjectType, nonNull } from "nexus";
import { stringToNumber } from "proto-nexus";

export const TestPrefixPrefixedMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessageInput"],
    ): PrefixedMessage.InnerMessage => {
      const output = new PrefixedMessage.InnerMessage();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/TestPrefixPrefixedMessageInnerMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { PrefixedMessage } from "@testapis/proto/testapis/extensions/extensions_pb";
import { inputObjectType, nonNull } from "nexus";
import { stringToNumber } from "proto-nexus";

export const TestPrefixPrefixedMessageInnerMessage2Input = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessage2Input",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessage2Input"],
    ): PrefixedMessage.InnerMessage2 => {
      const output = new PrefixedMessage.InnerMessage2();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/TestPrefixPrefixedMessageInnerMessage2Input.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { PrefixedMessage } from "@testapis/proto/testapis/extensions/extensions_pb";
import { inputObjectType, nullable } from "nexus";
import { TestPrefixPrefixedMessageInnerMessage2Input } from "./TestPrefixPrefixedMessageInnerMessage2Input.nexus";
import { TestPrefixPrefixedMessageInnerMessageInput } from "./TestPrefixPrefixedMessageInnerMessageInput.nexus";

export const TestPrefixPrefixedMessageSquashedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageSquashedMessageInput",
    definition: (t) => {
      t.field("oneofField", {
        type: nullable(TestPrefixPrefixedMessageInnerMessageInput),
        extensions: {
          protobufField: {
            name: "oneof_field",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
          },
        },
      });
      t.field("oneofField2", {
        type: nullable(TestPrefixPrefixedMessageInnerMessage2Input),
        extensions: {
          protobufField: {
            name: "oneof_field_2",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        name: "SquashedMessage",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { squashUnion: true } },
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageSquashedMessageInput"],
    ): PrefixedMessage.SquashedMessage => {
      const output = new PrefixedMessage.SquashedMessage();
      if (input.oneofField != null) {
        output.setOneofField(
          TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofField),
        );
      }
      if (input.oneofField2 != null) {
        output.setOneofField2(
          TestPrefixPrefixedMessageInnerMessage2Input.toProto(
            input.oneofField2,
          ),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        oneofField: {
          type: nullable(TestPrefixPrefixedMessageInnerMessageInput),
          extensions: {
            protobufField: {
              name: "oneof_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        },
        oneofField2: {
          type: nullable(TestPrefixPrefixedMessageInnerMessage2Input),
          extensions: {
            protobufField: {
              name: "oneof_field_2",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/TestPrefixPrefixedMessageSquashedMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { IgnoredMessage } from "@testapis/proto/testapis/extensions/extensions_pb";
import { inputObjectType, nonNull } from "nexus";

export const TestPrefixIgnoredMessageNotIgnoredInput = Object.assign(
  inputObjectType({
    name: "TestPrefixIgnoredMessageNotIgnoredInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
        name: "NotIgnored",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixIgnoredMessageNotIgnoredInput"],
    ): IgnoredMessage.NotIgnored => {
      const output = new IgnoredMessage.NotIgnored();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/TestPrefixIgnoredMessageNotIgnoredInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { InterfaceMessage } from "@testapis/proto/testapis/extensions/extensions_pb";
import { interfaceType, nonNull } from "nexus";

export type testapis$extensions$InterfaceMessage = InterfaceMessage;
export const TestPrefixInterfaceMessage = interfaceType({
  name: "TestPrefixInterfaceMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.InterfaceMessage",
      name: "InterfaceMessage",
      package: "testapis.extensions",
      options: { "[graphql.object_type]": { interface: true } },
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixInterfaceMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { unionType } from "nexus";
import { TestPrefixPrefixedMessageInnerMessage } from "./TestPrefixPrefixedMessageInnerMessage.nexus";
import { TestPrefixPrefixedMessageInnerMessage2 } from "./TestPrefixPrefixedMessageInnerMessage2.nexus";

export const TestPrefixPrefixedMessageSquashedMessage = unionType({
  name: "TestPrefixPrefixedMessageSquashedMessage",
  definition: (t) => {
    t.members(
      TestPrefixPrefixedMessageInnerMessage,
      TestPrefixPrefixedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
      name: "SquashedMessage",
      package: "testapis.extensions",
      fields: [{
        name: "oneof_field",
        type: "testapis.extensions.PrefixedMessage.InnerMessage",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }, {
        name: "oneof_field_2",
        type: "testapis.extensions.PrefixedMessage.InnerMessage2",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }],
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixPrefixedMessageSquashedMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { unionType } from "nexus";
import { TestPrefixPrefixedMessageInnerMessage } from "./TestPrefixPrefixedMessageInnerMessage.nexus";

export const TestPrefixPrefixedMessagePartialIgnoreOneof = unionType({
  name: "TestPrefixPrefixedMessagePartialIgnoreOneof",
  definition: (t) => {
    t.members(TestPrefixPrefixedMessageInnerMessage);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.extensions.PrefixedMessage.partial_ignore_oneof",
      name: "partial_ignore_oneof",
      messageName: "PrefixedMessage",
      package: "testapis.extensions",
      fields: [{
        name: "oneof_not_ignored_field",
        type: "testapis.extensions.PrefixedMessage.InnerMessage",
      }],
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixPrefixedMessagePartialIgnoreOneof.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { enumType } from "nexus";

export const TestPrefixPrefixedEnum = enumType({
  name: "TestPrefixPrefixedEnum",
  members: [{
    name: "PREFIXED_FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "PREFIXED_FOO" } },
  }, {
    name: "PREFIXED_BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "PREFIXED_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "PrefixedEnum",
      fullName: "testapis.extensions.PrefixedEnum",
      package: "testapis.extensions",
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixPrefixedEnum.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { enumType } from "nexus";

export const TestPrefixRenamedEnum = enumType({
  name: "TestPrefixRenamedEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "ENUM_WILL_RENAME_FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "ENUM_WILL_RENAME_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "EnumWillRename",
      fullName: "testapis.extensions.EnumWillRename",
      package: "testapis.extensions",
      options: { "[graphql.enum_type]": { name: "RenamedEnum" } },
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixRenamedEnum.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { enumType } from "nexus";

export const TestPrefixInterfaceMessageType = enumType({
  name: "TestPrefixInterfaceMessageType",
  members: [{
    name: "INNER",
    value: 1,
    extensions: { protobufEnumValue: { name: "INNER" } },
  }, {
    name: "INNER2",
    value: 2,
    extensions: { protobufEnumValue: { name: "INNER2" } },
  }],
  extensions: {
    protobufEnum: {
      name: "Type",
      fullName: "testapis.extensions.InterfaceMessage.Type",
      package: "testapis.extensions",
    },
  },
});
",
    "name": "testapis/extensions/TestPrefixInterfaceMessageType.nexus.ts",
  },
]
`;

exports[`'testapis.extensions' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import {
  EnumWillRename,
  IgnoredMessage,
  InterfaceMessage,
  MessageOnlyOutput,
  MessageWillRename,
  PrefixedEnum,
  PrefixedMessage,
} from "@testapis/proto/testapis/extensions/extensions_pb";
import {
  enumType,
  inputObjectType,
  interfaceType,
  list,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$extensions$PrefixedMessage = PrefixedMessage;
export const TestPrefixPrefixedMessage = objectType({
  name: "TestPrefixPrefixedMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Output only.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("prefixedEnum", {
      type: nullable("TestPrefixPrefixedEnum"),
      resolve: (source) => {
        const value = source.getPrefixedEnum();
        if (value == null) {
          return null;
        }
        if (value === PrefixedEnum.PREFIXED_ENUM_UNSPECIFIED) {
          return null;
        }
        if (value === PrefixedEnum.PREFIXED_IGNORED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "prefixed_enum",
          typeFullName: "testapis.extensions.PrefixedEnum",
        },
      },
    });
    t.field("notIgnoredMessage", {
      type: nullable("TestPrefixIgnoredMessageNotIgnored"),
      resolve: (source) => {
        const value = source.getNotIgnoredMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "not_ignored_message",
          typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
        },
      },
    });
    t.field("squashedMessage", {
      type: nullable("TestPrefixPrefixedMessageSquashedMessage"),
      resolve: (source) => {
        const value = source.getSquashedMessage();
        if (value == null) {
          return null;
        }
        switch (value.getSquashedMessageCase()) {
          case PrefixedMessage.SquashedMessage.SquashedMessageCase
            .ONEOF_FIELD: {
            return value.getOneofField()!;
          }

          case PrefixedMessage.SquashedMessage.SquashedMessageCase
            .ONEOF_FIELD_2: {
            return value.getOneofField2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: {
        protobufField: {
          name: "squashed_message",
          typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("thisFieldWasRenamed", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getThisFieldWillBeRenamed();
        return value;
      },
      extensions: {
        protobufField: {
          name: "this_field_will_be_renamed",
          typeFullName: "string",
          options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
        },
      },
    });
    t.field("skipResolver", {
      type: nonNull("String"),
      resolve: (source) => {
        throw new Error("not implemented");
      },
      extensions: {
        protobufField: {
          name: "skip_resolver",
          typeFullName: "string",
          options: { "[graphql.field]": { skipResolver: true } },
        },
      },
    });
    t.field("squashedMessages", {
      type: nullable(list(nonNull("TestPrefixPrefixedMessageSquashedMessage"))),
      resolve: (source) => {
        return source.getSquashedMessagesList().map((value) => {
          switch (value.getSquashedMessageCase()) {
            case PrefixedMessage.SquashedMessage.SquashedMessageCase
              .ONEOF_FIELD: {
              return value.getOneofField()!;
            }

            case PrefixedMessage.SquashedMessage.SquashedMessageCase
              .ONEOF_FIELD_2: {
              return value.getOneofField2()!;
            }

            default: {
              throw new Error(
                "One of the following fields must be non-null: oneof_field, oneof_field_2",
              );
            }
          }
        });
      },
      extensions: {
        protobufField: {
          name: "squashed_messages",
          typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("renamedMessage", {
      type: nullable("TestPrefixRenamedMessage"),
      resolve: (source) => {
        const value = source.getRenamedMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "renamed_message",
          typeFullName: "testapis.extensions.MessageWillRename",
        },
      },
    });
    t.field("renamedEnum", {
      type: nullable("TestPrefixRenamedEnum"),
      resolve: (source) => {
        const value = source.getRenamedEnum();
        if (value == null) {
          return null;
        }
        if (value === EnumWillRename.ENUM_WILL_RENAME_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "renamed_enum",
          typeFullName: "testapis.extensions.EnumWillRename",
        },
      },
    });
    t.field("partialIgnoreOneof", {
      type: nullable("TestPrefixPrefixedMessagePartialIgnoreOneof"),
      resolve: (source) => {
        const value = source;
        switch (value.getPartialIgnoreOneofCase()) {
          case PrefixedMessage.PartialIgnoreOneofCase.ONEOF_NOT_IGNORED_FIELD: {
            return value.getOneofNotIgnoredField()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "partial_ignore_oneof" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage",
      name: "PrefixedMessage",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$MessageWillRename = MessageWillRename;
export const TestPrefixRenamedMessage = objectType({
  name: "TestPrefixRenamedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWillRename;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$MessageWillRename",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.MessageWillRename",
      name: "MessageWillRename",
      package: "testapis.extensions",
      options: { "[graphql.object_type]": { name: "RenamedMessage" } },
    },
  },
});

export type testapis$extensions$MessageOnlyOutput = MessageOnlyOutput;
export const TestPrefixMessageOnlyOutput = objectType({
  name: "TestPrefixMessageOnlyOutput",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageOnlyOutput;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$MessageOnlyOutput",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.MessageOnlyOutput",
      name: "MessageOnlyOutput",
      package: "testapis.extensions",
      options: { "[graphql.input_type]": { ignore: true } },
    },
  },
});

export type testapis$extensions$PrefixedMessage$InnerMessage =
  PrefixedMessage.InnerMessage;
export const TestPrefixPrefixedMessageInnerMessage = objectType({
  name: "TestPrefixPrefixedMessageInnerMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$PrefixedMessage$InnerMessage2 =
  PrefixedMessage.InnerMessage2;
export const TestPrefixPrefixedMessageInnerMessage2 = objectType({
  name: "TestPrefixPrefixedMessageInnerMessage2",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage.InnerMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage$InnerMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
      name: "InnerMessage2",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$IgnoredMessage$NotIgnored =
  IgnoredMessage.NotIgnored;
export const TestPrefixIgnoredMessageNotIgnored = objectType({
  name: "TestPrefixIgnoredMessageNotIgnored",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof IgnoredMessage.NotIgnored;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$IgnoredMessage$NotIgnored",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
      name: "NotIgnored",
      package: "testapis.extensions",
    },
  },
});

export const TestPrefixPrefixedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("prefixedEnum", {
        type: nullable("TestPrefixPrefixedEnum"),
        extensions: {
          protobufField: {
            name: "prefixed_enum",
            typeFullName: "testapis.extensions.PrefixedEnum",
          },
        },
      });
      t.field("notIgnoredMessage", {
        type: nullable("TestPrefixIgnoredMessageNotIgnoredInput"),
        extensions: {
          protobufField: {
            name: "not_ignored_message",
            typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
          },
        },
      });
      t.field("squashedMessage", {
        type: nullable("TestPrefixPrefixedMessageSquashedMessageInput"),
        extensions: {
          protobufField: {
            name: "squashed_message",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("thisFieldWasRenamed", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "this_field_will_be_renamed",
            typeFullName: "string",
            options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
          },
        },
      });
      t.field("oneofNotIgnoredField", {
        type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
        extensions: {
          protobufField: {
            name: "oneof_not_ignored_field",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
          },
        },
      });
      t.field("skipResolver", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "skip_resolver",
            typeFullName: "string",
            options: { "[graphql.field]": { skipResolver: true } },
          },
        },
      });
      t.field("squashedMessages", {
        type: nullable(
          list(nonNull("TestPrefixPrefixedMessageSquashedMessageInput")),
        ),
        extensions: {
          protobufField: {
            name: "squashed_messages",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("renamedMessage", {
        type: nullable("TestPrefixRenamedMessageInput"),
        extensions: {
          protobufField: {
            name: "renamed_message",
            typeFullName: "testapis.extensions.MessageWillRename",
          },
        },
      });
      t.field("renamedEnum", {
        type: nullable("TestPrefixRenamedEnum"),
        extensions: {
          protobufField: {
            name: "renamed_enum",
            typeFullName: "testapis.extensions.EnumWillRename",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage",
        name: "PrefixedMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixPrefixedMessageInput"],
    ): PrefixedMessage => {
      const output = new PrefixedMessage();
      output.setBody(input.body);
      if (input.prefixedEnum != null) {
        output.setPrefixedEnum(input.prefixedEnum);
      }
      if (input.notIgnoredMessage != null) {
        output.setNotIgnoredMessage(
          TestPrefixIgnoredMessageNotIgnoredInput.toProto(
            input.notIgnoredMessage,
          ),
        );
      }
      if (input.squashedMessage != null) {
        output.setSquashedMessage(
          TestPrefixPrefixedMessageSquashedMessageInput.toProto(
            input.squashedMessage,
          ),
        );
      }
      output.setThisFieldWillBeRenamed(input.thisFieldWasRenamed);
      if (input.oneofNotIgnoredField != null) {
        output.setOneofNotIgnoredField(
          TestPrefixPrefixedMessageInnerMessageInput.toProto(
            input.oneofNotIgnoredField,
          ),
        );
      }
      output.setSkipResolver(input.skipResolver);
      if (input.squashedMessages != null) {
        output.setSquashedMessagesList(input.squashedMessages.map((v) =>
          TestPrefixPrefixedMessageSquashedMessageInput.toProto(v)
        ));
      }
      if (input.renamedMessage != null) {
        output.setRenamedMessage(
          TestPrefixRenamedMessageInput.toProto(input.renamedMessage),
        );
      }
      if (input.renamedEnum != null) {
        output.setRenamedEnum(input.renamedEnum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        prefixedEnum: {
          type: nullable("TestPrefixPrefixedEnum"),
          extensions: {
            protobufField: {
              name: "prefixed_enum",
              typeFullName: "testapis.extensions.PrefixedEnum",
            },
          },
        },
        notIgnoredMessage: {
          type: nullable("TestPrefixIgnoredMessageNotIgnoredInput"),
          extensions: {
            protobufField: {
              name: "not_ignored_message",
              typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
            },
          },
        },
        squashedMessage: {
          type: nullable("TestPrefixPrefixedMessageSquashedMessageInput"),
          extensions: {
            protobufField: {
              name: "squashed_message",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        thisFieldWasRenamed: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "this_field_will_be_renamed",
              typeFullName: "string",
              options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
            },
          },
        },
        oneofNotIgnoredField: {
          type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
          extensions: {
            protobufField: {
              name: "oneof_not_ignored_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        },
        skipResolver: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "skip_resolver",
              typeFullName: "string",
              options: { "[graphql.field]": { skipResolver: true } },
            },
          },
        },
        squashedMessages: {
          type: nullable(
            list(nonNull("TestPrefixPrefixedMessageSquashedMessageInput")),
          ),
          extensions: {
            protobufField: {
              name: "squashed_messages",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        renamedMessage: {
          type: nullable("TestPrefixRenamedMessageInput"),
          extensions: {
            protobufField: {
              name: "renamed_message",
              typeFullName: "testapis.extensions.MessageWillRename",
            },
          },
        },
        renamedEnum: {
          type: nullable("TestPrefixRenamedEnum"),
          extensions: {
            protobufField: {
              name: "renamed_enum",
              typeFullName: "testapis.extensions.EnumWillRename",
            },
          },
        },
      },
    },
  },
);

export const TestPrefixRenamedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixRenamedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.MessageWillRename",
        name: "MessageWillRename",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { name: "RenamedMessage" } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixRenamedMessageInput"],
    ): MessageWillRename => {
      const output = new MessageWillRename();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixInterfaceMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixInterfaceMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.InterfaceMessage",
        name: "InterfaceMessage",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { interface: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixInterfaceMessageInput"],
    ): InterfaceMessage => {
      const output = new InterfaceMessage();
      output.setId(stringToNumber(input.id));
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessageInput"],
    ): PrefixedMessage.InnerMessage => {
      const output = new PrefixedMessage.InnerMessage();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageInnerMessage2Input = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessage2Input",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessage2Input"],
    ): PrefixedMessage.InnerMessage2 => {
      const output = new PrefixedMessage.InnerMessage2();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageSquashedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageSquashedMessageInput",
    definition: (t) => {
      t.field("oneofField", {
        type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
        extensions: {
          protobufField: {
            name: "oneof_field",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
          },
        },
      });
      t.field("oneofField2", {
        type: nullable("TestPrefixPrefixedMessageInnerMessage2Input"),
        extensions: {
          protobufField: {
            name: "oneof_field_2",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        name: "SquashedMessage",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { squashUnion: true } },
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageSquashedMessageInput"],
    ): PrefixedMessage.SquashedMessage => {
      const output = new PrefixedMessage.SquashedMessage();
      if (input.oneofField != null) {
        output.setOneofField(
          TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofField),
        );
      }
      if (input.oneofField2 != null) {
        output.setOneofField2(
          TestPrefixPrefixedMessageInnerMessage2Input.toProto(
            input.oneofField2,
          ),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        oneofField: {
          type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
          extensions: {
            protobufField: {
              name: "oneof_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        },
        oneofField2: {
          type: nullable("TestPrefixPrefixedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "oneof_field_2",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
            },
          },
        },
      },
    },
  },
);

export const TestPrefixIgnoredMessageNotIgnoredInput = Object.assign(
  inputObjectType({
    name: "TestPrefixIgnoredMessageNotIgnoredInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
        name: "NotIgnored",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixIgnoredMessageNotIgnoredInput"],
    ): IgnoredMessage.NotIgnored => {
      const output = new IgnoredMessage.NotIgnored();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export type testapis$extensions$InterfaceMessage = InterfaceMessage;
export const TestPrefixInterfaceMessage = interfaceType({
  name: "TestPrefixInterfaceMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.InterfaceMessage",
      name: "InterfaceMessage",
      package: "testapis.extensions",
      options: { "[graphql.object_type]": { interface: true } },
    },
  },
});
export const TestPrefixPrefixedMessageSquashedMessage = unionType({
  name: "TestPrefixPrefixedMessageSquashedMessage",
  definition: (t) => {
    t.members(
      TestPrefixPrefixedMessageInnerMessage,
      TestPrefixPrefixedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
      name: "SquashedMessage",
      package: "testapis.extensions",
      fields: [{
        name: "oneof_field",
        type: "testapis.extensions.PrefixedMessage.InnerMessage",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }, {
        name: "oneof_field_2",
        type: "testapis.extensions.PrefixedMessage.InnerMessage2",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }],
    },
  },
});
export const TestPrefixPrefixedMessagePartialIgnoreOneof = unionType({
  name: "TestPrefixPrefixedMessagePartialIgnoreOneof",
  definition: (t) => {
    t.members(TestPrefixPrefixedMessageInnerMessage);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.extensions.PrefixedMessage.partial_ignore_oneof",
      name: "partial_ignore_oneof",
      messageName: "PrefixedMessage",
      package: "testapis.extensions",
      fields: [{
        name: "oneof_not_ignored_field",
        type: "testapis.extensions.PrefixedMessage.InnerMessage",
      }],
    },
  },
});
export const TestPrefixPrefixedEnum = enumType({
  name: "TestPrefixPrefixedEnum",
  members: [{
    name: "PREFIXED_FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "PREFIXED_FOO" } },
  }, {
    name: "PREFIXED_BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "PREFIXED_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "PrefixedEnum",
      fullName: "testapis.extensions.PrefixedEnum",
      package: "testapis.extensions",
    },
  },
});
export const TestPrefixRenamedEnum = enumType({
  name: "TestPrefixRenamedEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "ENUM_WILL_RENAME_FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "ENUM_WILL_RENAME_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "EnumWillRename",
      fullName: "testapis.extensions.EnumWillRename",
      package: "testapis.extensions",
      options: { "[graphql.enum_type]": { name: "RenamedEnum" } },
    },
  },
});
export const TestPrefixInterfaceMessageType = enumType({
  name: "TestPrefixInterfaceMessageType",
  members: [{
    name: "INNER",
    value: 1,
    extensions: { protobufEnumValue: { name: "INNER" } },
  }, {
    name: "INNER2",
    value: 2,
    extensions: { protobufEnumValue: { name: "INNER2" } },
  }],
  extensions: {
    protobufEnum: {
      name: "Type",
      fullName: "testapis.extensions.InterfaceMessage.Type",
      package: "testapis.extensions",
    },
  },
});
",
    "name": "testapis/extensions/extensions_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/ignored.proto

/* eslint-disable */

export {};
",
    "name": "testapis/extensions/ignored_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import {
  EnumWillRename,
  IgnoredMessage,
  InterfaceMessage,
  MessageOnlyOutput,
  MessageWillRename,
  PrefixedEnum,
  PrefixedMessage,
} from "@testapis/proto/testapis/extensions/extensions_pb";
import {
  enumType,
  inputObjectType,
  interfaceType,
  list,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$extensions$PrefixedMessage = PrefixedMessage;
export const TestPrefixPrefixedMessage = objectType({
  name: "TestPrefixPrefixedMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Output only.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("prefixedEnum", {
      type: nullable("TestPrefixPrefixedEnum"),
      resolve: (source) => {
        const value = source.getPrefixedEnum();
        if (value == null) {
          return null;
        }
        if (value === PrefixedEnum.PREFIXED_ENUM_UNSPECIFIED) {
          return null;
        }
        if (value === PrefixedEnum.PREFIXED_IGNORED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "prefixed_enum",
          typeFullName: "testapis.extensions.PrefixedEnum",
        },
      },
    });
    t.field("notIgnoredMessage", {
      type: nullable("TestPrefixIgnoredMessageNotIgnored"),
      resolve: (source) => {
        const value = source.getNotIgnoredMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "not_ignored_message",
          typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
        },
      },
    });
    t.field("squashedMessage", {
      type: nullable("TestPrefixPrefixedMessageSquashedMessage"),
      resolve: (source) => {
        const value = source.getSquashedMessage();
        if (value == null) {
          return null;
        }
        switch (value.getSquashedMessageCase()) {
          case PrefixedMessage.SquashedMessage.SquashedMessageCase
            .ONEOF_FIELD: {
            return value.getOneofField()!;
          }

          case PrefixedMessage.SquashedMessage.SquashedMessageCase
            .ONEOF_FIELD_2: {
            return value.getOneofField2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: {
        protobufField: {
          name: "squashed_message",
          typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("thisFieldWasRenamed", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getThisFieldWillBeRenamed();
        return value;
      },
      extensions: {
        protobufField: {
          name: "this_field_will_be_renamed",
          typeFullName: "string",
          options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
        },
      },
    });
    t.field("skipResolver", {
      type: nonNull("String"),
      resolve: (source) => {
        throw new Error("not implemented");
      },
      extensions: {
        protobufField: {
          name: "skip_resolver",
          typeFullName: "string",
          options: { "[graphql.field]": { skipResolver: true } },
        },
      },
    });
    t.field("squashedMessages", {
      type: nullable(list(nonNull("TestPrefixPrefixedMessageSquashedMessage"))),
      resolve: (source) => {
        return source.getSquashedMessagesList().map((value) => {
          switch (value.getSquashedMessageCase()) {
            case PrefixedMessage.SquashedMessage.SquashedMessageCase
              .ONEOF_FIELD: {
              return value.getOneofField()!;
            }

            case PrefixedMessage.SquashedMessage.SquashedMessageCase
              .ONEOF_FIELD_2: {
              return value.getOneofField2()!;
            }

            default: {
              throw new Error(
                "One of the following fields must be non-null: oneof_field, oneof_field_2",
              );
            }
          }
        });
      },
      extensions: {
        protobufField: {
          name: "squashed_messages",
          typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("renamedMessage", {
      type: nullable("TestPrefixRenamedMessage"),
      resolve: (source) => {
        const value = source.getRenamedMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "renamed_message",
          typeFullName: "testapis.extensions.MessageWillRename",
        },
      },
    });
    t.field("renamedEnum", {
      type: nullable("TestPrefixRenamedEnum"),
      resolve: (source) => {
        const value = source.getRenamedEnum();
        if (value == null) {
          return null;
        }
        if (value === EnumWillRename.ENUM_WILL_RENAME_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "renamed_enum",
          typeFullName: "testapis.extensions.EnumWillRename",
        },
      },
    });
    t.field("partialIgnoreOneof", {
      type: nullable("TestPrefixPrefixedMessagePartialIgnoreOneof"),
      resolve: (source) => {
        const value = source;
        switch (value.getPartialIgnoreOneofCase()) {
          case PrefixedMessage.PartialIgnoreOneofCase.ONEOF_NOT_IGNORED_FIELD: {
            return value.getOneofNotIgnoredField()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "partial_ignore_oneof" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage",
      name: "PrefixedMessage",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$MessageWillRename = MessageWillRename;
export const TestPrefixRenamedMessage = objectType({
  name: "TestPrefixRenamedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWillRename;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$MessageWillRename",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.MessageWillRename",
      name: "MessageWillRename",
      package: "testapis.extensions",
      options: { "[graphql.object_type]": { name: "RenamedMessage" } },
    },
  },
});

export type testapis$extensions$MessageOnlyOutput = MessageOnlyOutput;
export const TestPrefixMessageOnlyOutput = objectType({
  name: "TestPrefixMessageOnlyOutput",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageOnlyOutput;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$MessageOnlyOutput",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.MessageOnlyOutput",
      name: "MessageOnlyOutput",
      package: "testapis.extensions",
      options: { "[graphql.input_type]": { ignore: true } },
    },
  },
});

export type testapis$extensions$PrefixedMessage$InnerMessage =
  PrefixedMessage.InnerMessage;
export const TestPrefixPrefixedMessageInnerMessage = objectType({
  name: "TestPrefixPrefixedMessageInnerMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$PrefixedMessage$InnerMessage2 =
  PrefixedMessage.InnerMessage2;
export const TestPrefixPrefixedMessageInnerMessage2 = objectType({
  name: "TestPrefixPrefixedMessageInnerMessage2",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage.InnerMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage$InnerMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
      name: "InnerMessage2",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$IgnoredMessage$NotIgnored =
  IgnoredMessage.NotIgnored;
export const TestPrefixIgnoredMessageNotIgnored = objectType({
  name: "TestPrefixIgnoredMessageNotIgnored",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof IgnoredMessage.NotIgnored;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$IgnoredMessage$NotIgnored",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
      name: "NotIgnored",
      package: "testapis.extensions",
    },
  },
});

export const TestPrefixPrefixedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("prefixedEnum", {
        type: nullable("TestPrefixPrefixedEnum"),
        extensions: {
          protobufField: {
            name: "prefixed_enum",
            typeFullName: "testapis.extensions.PrefixedEnum",
          },
        },
      });
      t.field("notIgnoredMessage", {
        type: nullable("TestPrefixIgnoredMessageNotIgnoredInput"),
        extensions: {
          protobufField: {
            name: "not_ignored_message",
            typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
          },
        },
      });
      t.field("squashedMessage", {
        type: nullable("TestPrefixPrefixedMessageSquashedMessageInput"),
        extensions: {
          protobufField: {
            name: "squashed_message",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("thisFieldWasRenamed", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "this_field_will_be_renamed",
            typeFullName: "string",
            options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
          },
        },
      });
      t.field("oneofNotIgnoredField", {
        type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
        extensions: {
          protobufField: {
            name: "oneof_not_ignored_field",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
          },
        },
      });
      t.field("skipResolver", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "skip_resolver",
            typeFullName: "string",
            options: { "[graphql.field]": { skipResolver: true } },
          },
        },
      });
      t.field("squashedMessages", {
        type: nullable(
          list(nonNull("TestPrefixPrefixedMessageSquashedMessageInput")),
        ),
        extensions: {
          protobufField: {
            name: "squashed_messages",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("renamedMessage", {
        type: nullable("TestPrefixRenamedMessageInput"),
        extensions: {
          protobufField: {
            name: "renamed_message",
            typeFullName: "testapis.extensions.MessageWillRename",
          },
        },
      });
      t.field("renamedEnum", {
        type: nullable("TestPrefixRenamedEnum"),
        extensions: {
          protobufField: {
            name: "renamed_enum",
            typeFullName: "testapis.extensions.EnumWillRename",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage",
        name: "PrefixedMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixPrefixedMessageInput"],
    ): PrefixedMessage => {
      const output = new PrefixedMessage();
      output.setBody(input.body);
      if (input.prefixedEnum != null) {
        output.setPrefixedEnum(input.prefixedEnum);
      }
      if (input.notIgnoredMessage != null) {
        output.setNotIgnoredMessage(
          TestPrefixIgnoredMessageNotIgnoredInput.toProto(
            input.notIgnoredMessage,
          ),
        );
      }
      if (input.squashedMessage != null) {
        output.setSquashedMessage(
          TestPrefixPrefixedMessageSquashedMessageInput.toProto(
            input.squashedMessage,
          ),
        );
      }
      output.setThisFieldWillBeRenamed(input.thisFieldWasRenamed);
      if (input.oneofNotIgnoredField != null) {
        output.setOneofNotIgnoredField(
          TestPrefixPrefixedMessageInnerMessageInput.toProto(
            input.oneofNotIgnoredField,
          ),
        );
      }
      output.setSkipResolver(input.skipResolver);
      if (input.squashedMessages != null) {
        output.setSquashedMessagesList(input.squashedMessages.map((v) =>
          TestPrefixPrefixedMessageSquashedMessageInput.toProto(v)
        ));
      }
      if (input.renamedMessage != null) {
        output.setRenamedMessage(
          TestPrefixRenamedMessageInput.toProto(input.renamedMessage),
        );
      }
      if (input.renamedEnum != null) {
        output.setRenamedEnum(input.renamedEnum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        prefixedEnum: {
          type: nullable("TestPrefixPrefixedEnum"),
          extensions: {
            protobufField: {
              name: "prefixed_enum",
              typeFullName: "testapis.extensions.PrefixedEnum",
            },
          },
        },
        notIgnoredMessage: {
          type: nullable("TestPrefixIgnoredMessageNotIgnoredInput"),
          extensions: {
            protobufField: {
              name: "not_ignored_message",
              typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
            },
          },
        },
        squashedMessage: {
          type: nullable("TestPrefixPrefixedMessageSquashedMessageInput"),
          extensions: {
            protobufField: {
              name: "squashed_message",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        thisFieldWasRenamed: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "this_field_will_be_renamed",
              typeFullName: "string",
              options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
            },
          },
        },
        oneofNotIgnoredField: {
          type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
          extensions: {
            protobufField: {
              name: "oneof_not_ignored_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        },
        skipResolver: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "skip_resolver",
              typeFullName: "string",
              options: { "[graphql.field]": { skipResolver: true } },
            },
          },
        },
        squashedMessages: {
          type: nullable(
            list(nonNull("TestPrefixPrefixedMessageSquashedMessageInput")),
          ),
          extensions: {
            protobufField: {
              name: "squashed_messages",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        renamedMessage: {
          type: nullable("TestPrefixRenamedMessageInput"),
          extensions: {
            protobufField: {
              name: "renamed_message",
              typeFullName: "testapis.extensions.MessageWillRename",
            },
          },
        },
        renamedEnum: {
          type: nullable("TestPrefixRenamedEnum"),
          extensions: {
            protobufField: {
              name: "renamed_enum",
              typeFullName: "testapis.extensions.EnumWillRename",
            },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessagePartialInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessagePartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("prefixedEnum", {
        type: nullable("TestPrefixPrefixedEnum"),
        extensions: {
          protobufField: {
            name: "prefixed_enum",
            typeFullName: "testapis.extensions.PrefixedEnum",
          },
        },
      });
      t.field("notIgnoredMessage", {
        type: nullable("TestPrefixIgnoredMessageNotIgnoredPartialInput"),
        extensions: {
          protobufField: {
            name: "not_ignored_message",
            typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
          },
        },
      });
      t.field("squashedMessage", {
        type: nullable("TestPrefixPrefixedMessageSquashedMessagePartialInput"),
        extensions: {
          protobufField: {
            name: "squashed_message",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("thisFieldWasRenamed", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "this_field_will_be_renamed",
            typeFullName: "string",
            options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
          },
        },
      });
      t.field("oneofNotIgnoredField", {
        type: nullable("TestPrefixPrefixedMessageInnerMessagePartialInput"),
        extensions: {
          protobufField: {
            name: "oneof_not_ignored_field",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
          },
        },
      });
      t.field("skipResolver", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "skip_resolver",
            typeFullName: "string",
            options: { "[graphql.field]": { skipResolver: true } },
          },
        },
      });
      t.field("squashedMessages", {
        type: nullable(
          list(nonNull("TestPrefixPrefixedMessageSquashedMessagePartialInput")),
        ),
        extensions: {
          protobufField: {
            name: "squashed_messages",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("renamedMessage", {
        type: nullable("TestPrefixRenamedMessagePartialInput"),
        extensions: {
          protobufField: {
            name: "renamed_message",
            typeFullName: "testapis.extensions.MessageWillRename",
          },
        },
      });
      t.field("renamedEnum", {
        type: nullable("TestPrefixRenamedEnum"),
        extensions: {
          protobufField: {
            name: "renamed_enum",
            typeFullName: "testapis.extensions.EnumWillRename",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage",
        name: "PrefixedMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixPrefixedMessagePartialInput"],
    ): PrefixedMessage => {
      const output = new PrefixedMessage();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.prefixedEnum != null) {
        output.setPrefixedEnum(input.prefixedEnum);
      }
      if (input.notIgnoredMessage != null) {
        output.setNotIgnoredMessage(
          TestPrefixIgnoredMessageNotIgnoredPartialInput.toProto(
            input.notIgnoredMessage,
          ),
        );
      }
      if (input.squashedMessage != null) {
        output.setSquashedMessage(
          TestPrefixPrefixedMessageSquashedMessagePartialInput.toProto(
            input.squashedMessage,
          ),
        );
      }
      if (input.thisFieldWasRenamed != null) {
        output.setThisFieldWillBeRenamed(input.thisFieldWasRenamed);
      }
      if (input.oneofNotIgnoredField != null) {
        output.setOneofNotIgnoredField(
          TestPrefixPrefixedMessageInnerMessagePartialInput.toProto(
            input.oneofNotIgnoredField,
          ),
        );
      }
      if (input.skipResolver != null) {
        output.setSkipResolver(input.skipResolver);
      }
      if (input.squashedMessages != null) {
        output.setSquashedMessagesList(input.squashedMessages.map((v) =>
          TestPrefixPrefixedMessageSquashedMessagePartialInput.toProto(v)
        ));
      }
      if (input.renamedMessage != null) {
        output.setRenamedMessage(
          TestPrefixRenamedMessagePartialInput.toProto(input.renamedMessage),
        );
      }
      if (input.renamedEnum != null) {
        output.setRenamedEnum(input.renamedEnum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        prefixedEnum: {
          type: nullable("TestPrefixPrefixedEnum"),
          extensions: {
            protobufField: {
              name: "prefixed_enum",
              typeFullName: "testapis.extensions.PrefixedEnum",
            },
          },
        },
        notIgnoredMessage: {
          type: nullable("TestPrefixIgnoredMessageNotIgnoredPartialInput"),
          extensions: {
            protobufField: {
              name: "not_ignored_message",
              typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
            },
          },
        },
        squashedMessage: {
          type: nullable(
            "TestPrefixPrefixedMessageSquashedMessagePartialInput",
          ),
          extensions: {
            protobufField: {
              name: "squashed_message",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        thisFieldWasRenamed: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "this_field_will_be_renamed",
              typeFullName: "string",
              options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
            },
          },
        },
        oneofNotIgnoredField: {
          type: nullable("TestPrefixPrefixedMessageInnerMessagePartialInput"),
          extensions: {
            protobufField: {
              name: "oneof_not_ignored_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        },
        skipResolver: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "skip_resolver",
              typeFullName: "string",
              options: { "[graphql.field]": { skipResolver: true } },
            },
          },
        },
        squashedMessages: {
          type: nullable(
            list(
              nonNull("TestPrefixPrefixedMessageSquashedMessagePartialInput"),
            ),
          ),
          extensions: {
            protobufField: {
              name: "squashed_messages",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        renamedMessage: {
          type: nullable("TestPrefixRenamedMessagePartialInput"),
          extensions: {
            protobufField: {
              name: "renamed_message",
              typeFullName: "testapis.extensions.MessageWillRename",
            },
          },
        },
        renamedEnum: {
          type: nullable("TestPrefixRenamedEnum"),
          extensions: {
            protobufField: {
              name: "renamed_enum",
              typeFullName: "testapis.extensions.EnumWillRename",
            },
          },
        },
      },
    },
  },
);

export const TestPrefixRenamedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixRenamedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.MessageWillRename",
        name: "MessageWillRename",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { name: "RenamedMessage" } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixRenamedMessageInput"],
    ): MessageWillRename => {
      const output = new MessageWillRename();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixRenamedMessagePartialInput = Object.assign(
  inputObjectType({
    name: "TestPrefixRenamedMessagePartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.MessageWillRename",
        name: "MessageWillRename",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { name: "RenamedMessage" } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixRenamedMessagePartialInput"],
    ): MessageWillRename => {
      const output = new MessageWillRename();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixInterfaceMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixInterfaceMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.InterfaceMessage",
        name: "InterfaceMessage",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { interface: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixInterfaceMessageInput"],
    ): InterfaceMessage => {
      const output = new InterfaceMessage();
      output.setId(stringToNumber(input.id));
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
      },
    },
  },
);

export const TestPrefixInterfaceMessagePartialInput = Object.assign(
  inputObjectType({
    name: "TestPrefixInterfaceMessagePartialInput",
    definition: (t) => {
      t.field("id", {
        type: nullable("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.InterfaceMessage",
        name: "InterfaceMessage",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { interface: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixInterfaceMessagePartialInput"],
    ): InterfaceMessage => {
      const output = new InterfaceMessage();
      if (input.id != null) {
        output.setId(stringToNumber(input.id));
      }
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nullable("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessageInput"],
    ): PrefixedMessage.InnerMessage => {
      const output = new PrefixedMessage.InnerMessage();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageInnerMessagePartialInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessagePartialInput",
    definition: (t) => {
      t.field("id", {
        type: nullable("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"][
          "TestPrefixPrefixedMessageInnerMessagePartialInput"
        ],
    ): PrefixedMessage.InnerMessage => {
      const output = new PrefixedMessage.InnerMessage();
      if (input.id != null) {
        output.setId(stringToNumber(input.id));
      }
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nullable("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageInnerMessage2Input = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessage2Input",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessage2Input"],
    ): PrefixedMessage.InnerMessage2 => {
      const output = new PrefixedMessage.InnerMessage2();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageInnerMessage2PartialInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessage2PartialInput",
    definition: (t) => {
      t.field("id", {
        type: nullable("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"][
          "TestPrefixPrefixedMessageInnerMessage2PartialInput"
        ],
    ): PrefixedMessage.InnerMessage2 => {
      const output = new PrefixedMessage.InnerMessage2();
      if (input.id != null) {
        output.setId(stringToNumber(input.id));
      }
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nullable("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageSquashedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageSquashedMessageInput",
    definition: (t) => {
      t.field("oneofField", {
        type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
        extensions: {
          protobufField: {
            name: "oneof_field",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
          },
        },
      });
      t.field("oneofField2", {
        type: nullable("TestPrefixPrefixedMessageInnerMessage2Input"),
        extensions: {
          protobufField: {
            name: "oneof_field_2",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        name: "SquashedMessage",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { squashUnion: true } },
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageSquashedMessageInput"],
    ): PrefixedMessage.SquashedMessage => {
      const output = new PrefixedMessage.SquashedMessage();
      if (input.oneofField != null) {
        output.setOneofField(
          TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofField),
        );
      }
      if (input.oneofField2 != null) {
        output.setOneofField2(
          TestPrefixPrefixedMessageInnerMessage2Input.toProto(
            input.oneofField2,
          ),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        oneofField: {
          type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
          extensions: {
            protobufField: {
              name: "oneof_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        },
        oneofField2: {
          type: nullable("TestPrefixPrefixedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "oneof_field_2",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
            },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageSquashedMessagePartialInput = Object
  .assign(
    inputObjectType({
      name: "TestPrefixPrefixedMessageSquashedMessagePartialInput",
      definition: (t) => {
        t.field("oneofField", {
          type: nullable("TestPrefixPrefixedMessageInnerMessagePartialInput"),
          extensions: {
            protobufField: {
              name: "oneof_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        });
        t.field("oneofField2", {
          type: nullable("TestPrefixPrefixedMessageInnerMessage2PartialInput"),
          extensions: {
            protobufField: {
              name: "oneof_field_2",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
            },
          },
        });
      },
      extensions: {
        protobufMessage: {
          fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          name: "SquashedMessage",
          package: "testapis.extensions",
          options: { "[graphql.object_type]": { squashUnion: true } },
        },
      },
    }),
    {
      toProto: (
        input:
          NexusGen["inputTypes"][
            "TestPrefixPrefixedMessageSquashedMessagePartialInput"
          ],
      ): PrefixedMessage.SquashedMessage => {
        const output = new PrefixedMessage.SquashedMessage();
        if (input.oneofField != null) {
          output.setOneofField(
            TestPrefixPrefixedMessageInnerMessagePartialInput.toProto(
              input.oneofField,
            ),
          );
        }
        if (input.oneofField2 != null) {
          output.setOneofField2(
            TestPrefixPrefixedMessageInnerMessage2PartialInput.toProto(
              input.oneofField2,
            ),
          );
        }
        return output;
      },
      _protoNexus: {
        fields: {
          oneofField: {
            type: nullable("TestPrefixPrefixedMessageInnerMessagePartialInput"),
            extensions: {
              protobufField: {
                name: "oneof_field",
                typeFullName:
                  "testapis.extensions.PrefixedMessage.InnerMessage",
              },
            },
          },
          oneofField2: {
            type: nullable(
              "TestPrefixPrefixedMessageInnerMessage2PartialInput",
            ),
            extensions: {
              protobufField: {
                name: "oneof_field_2",
                typeFullName:
                  "testapis.extensions.PrefixedMessage.InnerMessage2",
              },
            },
          },
        },
      },
    },
  );

export const TestPrefixIgnoredMessageNotIgnoredInput = Object.assign(
  inputObjectType({
    name: "TestPrefixIgnoredMessageNotIgnoredInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
        name: "NotIgnored",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixIgnoredMessageNotIgnoredInput"],
    ): IgnoredMessage.NotIgnored => {
      const output = new IgnoredMessage.NotIgnored();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixIgnoredMessageNotIgnoredPartialInput = Object.assign(
  inputObjectType({
    name: "TestPrefixIgnoredMessageNotIgnoredPartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
        name: "NotIgnored",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"][
          "TestPrefixIgnoredMessageNotIgnoredPartialInput"
        ],
    ): IgnoredMessage.NotIgnored => {
      const output = new IgnoredMessage.NotIgnored();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export type testapis$extensions$InterfaceMessage = InterfaceMessage;
export const TestPrefixInterfaceMessage = interfaceType({
  name: "TestPrefixInterfaceMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.InterfaceMessage",
      name: "InterfaceMessage",
      package: "testapis.extensions",
      options: { "[graphql.object_type]": { interface: true } },
    },
  },
});
export const TestPrefixPrefixedMessageSquashedMessage = unionType({
  name: "TestPrefixPrefixedMessageSquashedMessage",
  definition: (t) => {
    t.members(
      TestPrefixPrefixedMessageInnerMessage,
      TestPrefixPrefixedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
      name: "SquashedMessage",
      package: "testapis.extensions",
      fields: [{
        name: "oneof_field",
        type: "testapis.extensions.PrefixedMessage.InnerMessage",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }, {
        name: "oneof_field_2",
        type: "testapis.extensions.PrefixedMessage.InnerMessage2",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }],
    },
  },
});
export const TestPrefixPrefixedMessagePartialIgnoreOneof = unionType({
  name: "TestPrefixPrefixedMessagePartialIgnoreOneof",
  definition: (t) => {
    t.members(TestPrefixPrefixedMessageInnerMessage);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.extensions.PrefixedMessage.partial_ignore_oneof",
      name: "partial_ignore_oneof",
      messageName: "PrefixedMessage",
      package: "testapis.extensions",
      fields: [{
        name: "oneof_not_ignored_field",
        type: "testapis.extensions.PrefixedMessage.InnerMessage",
      }],
    },
  },
});
export const TestPrefixPrefixedEnum = enumType({
  name: "TestPrefixPrefixedEnum",
  members: [{
    name: "PREFIXED_FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "PREFIXED_FOO" } },
  }, {
    name: "PREFIXED_BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "PREFIXED_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "PrefixedEnum",
      fullName: "testapis.extensions.PrefixedEnum",
      package: "testapis.extensions",
    },
  },
});
export const TestPrefixRenamedEnum = enumType({
  name: "TestPrefixRenamedEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "ENUM_WILL_RENAME_FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "ENUM_WILL_RENAME_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "EnumWillRename",
      fullName: "testapis.extensions.EnumWillRename",
      package: "testapis.extensions",
      options: { "[graphql.enum_type]": { name: "RenamedEnum" } },
    },
  },
});
export const TestPrefixInterfaceMessageType = enumType({
  name: "TestPrefixInterfaceMessageType",
  members: [{
    name: "INNER",
    value: 1,
    extensions: { protobufEnumValue: { name: "INNER" } },
  }, {
    name: "INNER2",
    value: 2,
    extensions: { protobufEnumValue: { name: "INNER2" } },
  }],
  extensions: {
    protobufEnum: {
      name: "Type",
      fullName: "testapis.extensions.InterfaceMessage.Type",
      package: "testapis.extensions",
    },
  },
});
",
    "name": "testapis/extensions/extensions_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/ignored.proto

/* eslint-disable */

export {};
",
    "name": "testapis/extensions/ignored_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/extensions";
import {
  enumType,
  inputObjectType,
  interfaceType,
  list,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$extensions$PrefixedMessage =
  testapis.extensions.PrefixedMessage;
export const TestPrefixPrefixedMessage = objectType({
  name: "TestPrefixPrefixedMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Output only.",
      resolve: (source) => {
        const value = source.id;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("prefixedEnum", {
      type: nullable("TestPrefixPrefixedEnum"),
      resolve: (source) => {
        const value = source.prefixedEnum;
        if (value == null) {
          return null;
        }
        if (
          value === testapis.extensions.PrefixedEnum.PREFIXED_ENUM_UNSPECIFIED
        ) {
          return null;
        }
        if (value === testapis.extensions.PrefixedEnum.PREFIXED_IGNORED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "prefixed_enum",
          typeFullName: "testapis.extensions.PrefixedEnum",
        },
      },
    });
    t.field("notIgnoredMessage", {
      type: nullable("TestPrefixIgnoredMessageNotIgnored"),
      resolve: (source) => {
        const value = source.notIgnoredMessage;
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "not_ignored_message",
          typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
        },
      },
    });
    t.field("squashedMessage", {
      type: nullable("TestPrefixPrefixedMessageSquashedMessage"),
      resolve: (source) => {
        const value = source.squashedMessage;
        if (value == null) {
          return null;
        }
        if (value.oneofField != null) {
          return value.oneofField;
        }
        if (value.oneofField_2 != null) {
          return value.oneofField_2;
        }
        return null;
      },
      extensions: {
        protobufField: {
          name: "squashed_message",
          typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("thisFieldWasRenamed", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.thisFieldWillBeRenamed;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "this_field_will_be_renamed",
          typeFullName: "string",
          options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
        },
      },
    });
    t.field("skipResolver", {
      type: nonNull("String"),
      resolve: (source) => {
        throw new Error("not implemented");
      },
      extensions: {
        protobufField: {
          name: "skip_resolver",
          typeFullName: "string",
          options: { "[graphql.field]": { skipResolver: true } },
        },
      },
    });
    t.field("squashedMessages", {
      type: nullable(list(nonNull("TestPrefixPrefixedMessageSquashedMessage"))),
      resolve: (source) => {
        return source.squashedMessages.map((value) => {
          if (value.oneofField != null) {
            return value.oneofField;
          }
          if (value.oneofField_2 != null) {
            return value.oneofField_2;
          }
          throw new Error(
            "One of the following fields must be non-null: oneof_field, oneof_field_2",
          );
        });
      },
      extensions: {
        protobufField: {
          name: "squashed_messages",
          typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("renamedMessage", {
      type: nullable("TestPrefixRenamedMessage"),
      resolve: (source) => {
        const value = source.renamedMessage;
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "renamed_message",
          typeFullName: "testapis.extensions.MessageWillRename",
        },
      },
    });
    t.field("renamedEnum", {
      type: nullable("TestPrefixRenamedEnum"),
      resolve: (source) => {
        const value = source.renamedEnum;
        if (value == null) {
          return null;
        }
        if (
          value ===
            testapis.extensions.EnumWillRename.ENUM_WILL_RENAME_UNSPECIFIED
        ) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "renamed_enum",
          typeFullName: "testapis.extensions.EnumWillRename",
        },
      },
    });
    t.field("partialIgnoreOneof", {
      type: nullable("TestPrefixPrefixedMessagePartialIgnoreOneof"),
      resolve: (source) => {
        const value = source;
        if (value.oneofNotIgnoredField != null) {
          return value.oneofNotIgnoredField;
        }
        return null;
      },
      extensions: { protobufField: { name: "partial_ignore_oneof" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.extensions.PrefixedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage",
      name: "PrefixedMessage",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$MessageWillRename =
  testapis.extensions.MessageWillRename;
export const TestPrefixRenamedMessage = objectType({
  name: "TestPrefixRenamedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.extensions.MessageWillRename;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$MessageWillRename",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.MessageWillRename",
      name: "MessageWillRename",
      package: "testapis.extensions",
      options: { "[graphql.object_type]": { name: "RenamedMessage" } },
    },
  },
});

export type testapis$extensions$MessageOnlyOutput =
  testapis.extensions.MessageOnlyOutput;
export const TestPrefixMessageOnlyOutput = objectType({
  name: "TestPrefixMessageOnlyOutput",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.extensions.MessageOnlyOutput;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$MessageOnlyOutput",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.MessageOnlyOutput",
      name: "MessageOnlyOutput",
      package: "testapis.extensions",
      options: { "[graphql.input_type]": { ignore: true } },
    },
  },
});

export type testapis$extensions$PrefixedMessage$InnerMessage =
  testapis.extensions.PrefixedMessage.InnerMessage;
export const TestPrefixPrefixedMessageInnerMessage = objectType({
  name: "TestPrefixPrefixedMessageInnerMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.id;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.extensions.PrefixedMessage.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$PrefixedMessage$InnerMessage2 =
  testapis.extensions.PrefixedMessage.InnerMessage2;
export const TestPrefixPrefixedMessageInnerMessage2 = objectType({
  name: "TestPrefixPrefixedMessageInnerMessage2",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.id;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.extensions.PrefixedMessage.InnerMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage$InnerMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
      name: "InnerMessage2",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$IgnoredMessage$NotIgnored =
  testapis.extensions.IgnoredMessage.NotIgnored;
export const TestPrefixIgnoredMessageNotIgnored = objectType({
  name: "TestPrefixIgnoredMessageNotIgnored",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.extensions.IgnoredMessage.NotIgnored;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$IgnoredMessage$NotIgnored",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
      name: "NotIgnored",
      package: "testapis.extensions",
    },
  },
});

export const TestPrefixPrefixedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("prefixedEnum", {
        type: nullable("TestPrefixPrefixedEnum"),
        extensions: {
          protobufField: {
            name: "prefixed_enum",
            typeFullName: "testapis.extensions.PrefixedEnum",
          },
        },
      });
      t.field("notIgnoredMessage", {
        type: nullable("TestPrefixIgnoredMessageNotIgnoredInput"),
        extensions: {
          protobufField: {
            name: "not_ignored_message",
            typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
          },
        },
      });
      t.field("squashedMessage", {
        type: nullable("TestPrefixPrefixedMessageSquashedMessageInput"),
        extensions: {
          protobufField: {
            name: "squashed_message",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("thisFieldWasRenamed", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "this_field_will_be_renamed",
            typeFullName: "string",
            options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
          },
        },
      });
      t.field("oneofNotIgnoredField", {
        type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
        extensions: {
          protobufField: {
            name: "oneof_not_ignored_field",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
          },
        },
      });
      t.field("skipResolver", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "skip_resolver",
            typeFullName: "string",
            options: { "[graphql.field]": { skipResolver: true } },
          },
        },
      });
      t.field("squashedMessages", {
        type: nullable(
          list(nonNull("TestPrefixPrefixedMessageSquashedMessageInput")),
        ),
        extensions: {
          protobufField: {
            name: "squashed_messages",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("renamedMessage", {
        type: nullable("TestPrefixRenamedMessageInput"),
        extensions: {
          protobufField: {
            name: "renamed_message",
            typeFullName: "testapis.extensions.MessageWillRename",
          },
        },
      });
      t.field("renamedEnum", {
        type: nullable("TestPrefixRenamedEnum"),
        extensions: {
          protobufField: {
            name: "renamed_enum",
            typeFullName: "testapis.extensions.EnumWillRename",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage",
        name: "PrefixedMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixPrefixedMessageInput"],
    ): testapis.extensions.PrefixedMessage => {
      const output = new testapis.extensions.PrefixedMessage();
      output.body = input.body;
      if (input.prefixedEnum != null) {
        output.prefixedEnum = input.prefixedEnum;
      }
      if (input.notIgnoredMessage != null) {
        output.notIgnoredMessage = TestPrefixIgnoredMessageNotIgnoredInput
          .toProto(input.notIgnoredMessage);
      }
      if (input.squashedMessage != null) {
        output.squashedMessage = TestPrefixPrefixedMessageSquashedMessageInput
          .toProto(input.squashedMessage);
      }
      output.thisFieldWillBeRenamed = input.thisFieldWasRenamed;
      if (input.oneofNotIgnoredField != null) {
        output.oneofNotIgnoredField = TestPrefixPrefixedMessageInnerMessageInput
          .toProto(input.oneofNotIgnoredField);
      }
      output.skipResolver = input.skipResolver;
      if (input.squashedMessages != null) {
        output.squashedMessages = input.squashedMessages.map((v) =>
          TestPrefixPrefixedMessageSquashedMessageInput.toProto(v)
        );
      }
      if (input.renamedMessage != null) {
        output.renamedMessage = TestPrefixRenamedMessageInput.toProto(
          input.renamedMessage,
        );
      }
      if (input.renamedEnum != null) {
        output.renamedEnum = input.renamedEnum;
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        prefixedEnum: {
          type: nullable("TestPrefixPrefixedEnum"),
          extensions: {
            protobufField: {
              name: "prefixed_enum",
              typeFullName: "testapis.extensions.PrefixedEnum",
            },
          },
        },
        notIgnoredMessage: {
          type: nullable("TestPrefixIgnoredMessageNotIgnoredInput"),
          extensions: {
            protobufField: {
              name: "not_ignored_message",
              typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
            },
          },
        },
        squashedMessage: {
          type: nullable("TestPrefixPrefixedMessageSquashedMessageInput"),
          extensions: {
            protobufField: {
              name: "squashed_message",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        thisFieldWasRenamed: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "this_field_will_be_renamed",
              typeFullName: "string",
              options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
            },
          },
        },
        oneofNotIgnoredField: {
          type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
          extensions: {
            protobufField: {
              name: "oneof_not_ignored_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        },
        skipResolver: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "skip_resolver",
              typeFullName: "string",
              options: { "[graphql.field]": { skipResolver: true } },
            },
          },
        },
        squashedMessages: {
          type: nullable(
            list(nonNull("TestPrefixPrefixedMessageSquashedMessageInput")),
          ),
          extensions: {
            protobufField: {
              name: "squashed_messages",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        renamedMessage: {
          type: nullable("TestPrefixRenamedMessageInput"),
          extensions: {
            protobufField: {
              name: "renamed_message",
              typeFullName: "testapis.extensions.MessageWillRename",
            },
          },
        },
        renamedEnum: {
          type: nullable("TestPrefixRenamedEnum"),
          extensions: {
            protobufField: {
              name: "renamed_enum",
              typeFullName: "testapis.extensions.EnumWillRename",
            },
          },
        },
      },
    },
  },
);

export const TestPrefixRenamedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixRenamedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.MessageWillRename",
        name: "MessageWillRename",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { name: "RenamedMessage" } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixRenamedMessageInput"],
    ): testapis.extensions.MessageWillRename => {
      const output = new testapis.extensions.MessageWillRename();
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixInterfaceMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixInterfaceMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.InterfaceMessage",
        name: "InterfaceMessage",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { interface: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixInterfaceMessageInput"],
    ): testapis.extensions.InterfaceMessage => {
      const output = new testapis.extensions.InterfaceMessage();
      output.id = stringToNumber(input.id);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessageInput"],
    ): testapis.extensions.PrefixedMessage.InnerMessage => {
      const output = new testapis.extensions.PrefixedMessage.InnerMessage();
      output.id = stringToNumber(input.id);
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageInnerMessage2Input = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessage2Input",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessage2Input"],
    ): testapis.extensions.PrefixedMessage.InnerMessage2 => {
      const output = new testapis.extensions.PrefixedMessage.InnerMessage2();
      output.id = stringToNumber(input.id);
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageSquashedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageSquashedMessageInput",
    definition: (t) => {
      t.field("oneofField", {
        type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
        extensions: {
          protobufField: {
            name: "oneof_field",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
          },
        },
      });
      t.field("oneofField2", {
        type: nullable("TestPrefixPrefixedMessageInnerMessage2Input"),
        extensions: {
          protobufField: {
            name: "oneof_field_2",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        name: "SquashedMessage",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { squashUnion: true } },
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageSquashedMessageInput"],
    ): testapis.extensions.PrefixedMessage.SquashedMessage => {
      const output = new testapis.extensions.PrefixedMessage.SquashedMessage();
      if (input.oneofField != null) {
        output.oneofField = TestPrefixPrefixedMessageInnerMessageInput.toProto(
          input.oneofField,
        );
      }
      if (input.oneofField2 != null) {
        output.oneofField_2 = TestPrefixPrefixedMessageInnerMessage2Input
          .toProto(input.oneofField2);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        oneofField: {
          type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
          extensions: {
            protobufField: {
              name: "oneof_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        },
        oneofField2: {
          type: nullable("TestPrefixPrefixedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "oneof_field_2",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
            },
          },
        },
      },
    },
  },
);

export const TestPrefixIgnoredMessageNotIgnoredInput = Object.assign(
  inputObjectType({
    name: "TestPrefixIgnoredMessageNotIgnoredInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
        name: "NotIgnored",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixIgnoredMessageNotIgnoredInput"],
    ): testapis.extensions.IgnoredMessage.NotIgnored => {
      const output = new testapis.extensions.IgnoredMessage.NotIgnored();
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export type testapis$extensions$InterfaceMessage =
  testapis.extensions.InterfaceMessage;
export const TestPrefixInterfaceMessage = interfaceType({
  name: "TestPrefixInterfaceMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.id;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.InterfaceMessage",
      name: "InterfaceMessage",
      package: "testapis.extensions",
      options: { "[graphql.object_type]": { interface: true } },
    },
  },
});
export const TestPrefixPrefixedMessageSquashedMessage = unionType({
  name: "TestPrefixPrefixedMessageSquashedMessage",
  definition: (t) => {
    t.members(
      TestPrefixPrefixedMessageInnerMessage,
      TestPrefixPrefixedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
      name: "SquashedMessage",
      package: "testapis.extensions",
      fields: [{
        name: "oneof_field",
        type: "testapis.extensions.PrefixedMessage.InnerMessage",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }, {
        name: "oneof_field_2",
        type: "testapis.extensions.PrefixedMessage.InnerMessage2",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }],
    },
  },
});
export const TestPrefixPrefixedMessagePartialIgnoreOneof = unionType({
  name: "TestPrefixPrefixedMessagePartialIgnoreOneof",
  definition: (t) => {
    t.members(TestPrefixPrefixedMessageInnerMessage);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.extensions.PrefixedMessage.partial_ignore_oneof",
      name: "partial_ignore_oneof",
      messageName: "PrefixedMessage",
      package: "testapis.extensions",
      fields: [{
        name: "oneof_not_ignored_field",
        type: "testapis.extensions.PrefixedMessage.InnerMessage",
      }],
    },
  },
});
export const TestPrefixPrefixedEnum = enumType({
  name: "TestPrefixPrefixedEnum",
  members: [{
    name: "PREFIXED_FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "PREFIXED_FOO" } },
  }, {
    name: "PREFIXED_BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "PREFIXED_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "PrefixedEnum",
      fullName: "testapis.extensions.PrefixedEnum",
      package: "testapis.extensions",
    },
  },
});
export const TestPrefixRenamedEnum = enumType({
  name: "TestPrefixRenamedEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "ENUM_WILL_RENAME_FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "ENUM_WILL_RENAME_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "EnumWillRename",
      fullName: "testapis.extensions.EnumWillRename",
      package: "testapis.extensions",
      options: { "[graphql.enum_type]": { name: "RenamedEnum" } },
    },
  },
});
export const TestPrefixInterfaceMessageType = enumType({
  name: "TestPrefixInterfaceMessageType",
  members: [{
    name: "INNER",
    value: 1,
    extensions: { protobufEnumValue: { name: "INNER" } },
  }, {
    name: "INNER2",
    value: 2,
    extensions: { protobufEnumValue: { name: "INNER2" } },
  }],
  extensions: {
    protobufEnum: {
      name: "Type",
      fullName: "testapis.extensions.InterfaceMessage.Type",
      package: "testapis.extensions",
    },
  },
});
",
    "name": "testapis/extensions/extensions_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/ignored.proto

/* eslint-disable */

export {};
",
    "name": "testapis/extensions/ignored_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/extensions.proto

/* eslint-disable */

import {
  enumType,
  inputObjectType,
  interfaceType,
  list,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";
import { stringToNumber } from "proto-nexus";
import {
  EnumWillRename,
  IgnoredMessage,
  InterfaceMessage,
  MessageOnlyOutput,
  MessageWillRename,
  PrefixedEnum,
  PrefixedMessage,
} from "./testapis/extensions/extensions_pb";

export type testapis$extensions$PrefixedMessage = PrefixedMessage;
export const TestPrefixPrefixedMessage = objectType({
  name: "TestPrefixPrefixedMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Output only.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("prefixedEnum", {
      type: nullable("TestPrefixPrefixedEnum"),
      resolve: (source) => {
        const value = source.getPrefixedEnum();
        if (value == null) {
          return null;
        }
        if (value === PrefixedEnum.PREFIXED_ENUM_UNSPECIFIED) {
          return null;
        }
        if (value === PrefixedEnum.PREFIXED_IGNORED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "prefixed_enum",
          typeFullName: "testapis.extensions.PrefixedEnum",
        },
      },
    });
    t.field("notIgnoredMessage", {
      type: nullable("TestPrefixIgnoredMessageNotIgnored"),
      resolve: (source) => {
        const value = source.getNotIgnoredMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "not_ignored_message",
          typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
        },
      },
    });
    t.field("squashedMessage", {
      type: nullable("TestPrefixPrefixedMessageSquashedMessage"),
      resolve: (source) => {
        const value = source.getSquashedMessage();
        if (value == null) {
          return null;
        }
        switch (value.getSquashedMessageCase()) {
          case PrefixedMessage.SquashedMessage.SquashedMessageCase
            .ONEOF_FIELD: {
            return value.getOneofField()!;
          }

          case PrefixedMessage.SquashedMessage.SquashedMessageCase
            .ONEOF_FIELD_2: {
            return value.getOneofField2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: {
        protobufField: {
          name: "squashed_message",
          typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("thisFieldWasRenamed", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getThisFieldWillBeRenamed();
        return value;
      },
      extensions: {
        protobufField: {
          name: "this_field_will_be_renamed",
          typeFullName: "string",
          options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
        },
      },
    });
    t.field("skipResolver", {
      type: nonNull("String"),
      resolve: (source) => {
        throw new Error("not implemented");
      },
      extensions: {
        protobufField: {
          name: "skip_resolver",
          typeFullName: "string",
          options: { "[graphql.field]": { skipResolver: true } },
        },
      },
    });
    t.field("squashedMessages", {
      type: nullable(list(nonNull("TestPrefixPrefixedMessageSquashedMessage"))),
      resolve: (source) => {
        return source.getSquashedMessagesList().map((value) => {
          switch (value.getSquashedMessageCase()) {
            case PrefixedMessage.SquashedMessage.SquashedMessageCase
              .ONEOF_FIELD: {
              return value.getOneofField()!;
            }

            case PrefixedMessage.SquashedMessage.SquashedMessageCase
              .ONEOF_FIELD_2: {
              return value.getOneofField2()!;
            }

            default: {
              throw new Error(
                "One of the following fields must be non-null: oneof_field, oneof_field_2",
              );
            }
          }
        });
      },
      extensions: {
        protobufField: {
          name: "squashed_messages",
          typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("renamedMessage", {
      type: nullable("TestPrefixRenamedMessage"),
      resolve: (source) => {
        const value = source.getRenamedMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "renamed_message",
          typeFullName: "testapis.extensions.MessageWillRename",
        },
      },
    });
    t.field("renamedEnum", {
      type: nullable("TestPrefixRenamedEnum"),
      resolve: (source) => {
        const value = source.getRenamedEnum();
        if (value == null) {
          return null;
        }
        if (value === EnumWillRename.ENUM_WILL_RENAME_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "renamed_enum",
          typeFullName: "testapis.extensions.EnumWillRename",
        },
      },
    });
    t.field("partialIgnoreOneof", {
      type: nullable("TestPrefixPrefixedMessagePartialIgnoreOneof"),
      resolve: (source) => {
        const value = source;
        switch (value.getPartialIgnoreOneofCase()) {
          case PrefixedMessage.PartialIgnoreOneofCase.ONEOF_NOT_IGNORED_FIELD: {
            return value.getOneofNotIgnoredField()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "partial_ignore_oneof" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage",
      name: "PrefixedMessage",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$MessageWillRename = MessageWillRename;
export const TestPrefixRenamedMessage = objectType({
  name: "TestPrefixRenamedMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWillRename;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$MessageWillRename",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.MessageWillRename",
      name: "MessageWillRename",
      package: "testapis.extensions",
      options: { "[graphql.object_type]": { name: "RenamedMessage" } },
    },
  },
});

export type testapis$extensions$MessageOnlyOutput = MessageOnlyOutput;
export const TestPrefixMessageOnlyOutput = objectType({
  name: "TestPrefixMessageOnlyOutput",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageOnlyOutput;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$MessageOnlyOutput",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.MessageOnlyOutput",
      name: "MessageOnlyOutput",
      package: "testapis.extensions",
      options: { "[graphql.input_type]": { ignore: true } },
    },
  },
});

export type testapis$extensions$PrefixedMessage$InnerMessage =
  PrefixedMessage.InnerMessage;
export const TestPrefixPrefixedMessageInnerMessage = objectType({
  name: "TestPrefixPrefixedMessageInnerMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage.InnerMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage$InnerMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
      name: "InnerMessage",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$PrefixedMessage$InnerMessage2 =
  PrefixedMessage.InnerMessage2;
export const TestPrefixPrefixedMessageInnerMessage2 = objectType({
  name: "TestPrefixPrefixedMessageInnerMessage2",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PrefixedMessage.InnerMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$PrefixedMessage$InnerMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
      name: "InnerMessage2",
      package: "testapis.extensions",
    },
  },
});

export type testapis$extensions$IgnoredMessage$NotIgnored =
  IgnoredMessage.NotIgnored;
export const TestPrefixIgnoredMessageNotIgnored = objectType({
  name: "TestPrefixIgnoredMessageNotIgnored",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof IgnoredMessage.NotIgnored;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$IgnoredMessage$NotIgnored",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
      name: "NotIgnored",
      package: "testapis.extensions",
    },
  },
});

export const TestPrefixPrefixedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("prefixedEnum", {
        type: nullable("TestPrefixPrefixedEnum"),
        extensions: {
          protobufField: {
            name: "prefixed_enum",
            typeFullName: "testapis.extensions.PrefixedEnum",
          },
        },
      });
      t.field("notIgnoredMessage", {
        type: nullable("TestPrefixIgnoredMessageNotIgnoredInput"),
        extensions: {
          protobufField: {
            name: "not_ignored_message",
            typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
          },
        },
      });
      t.field("squashedMessage", {
        type: nullable("TestPrefixPrefixedMessageSquashedMessageInput"),
        extensions: {
          protobufField: {
            name: "squashed_message",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("thisFieldWasRenamed", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "this_field_will_be_renamed",
            typeFullName: "string",
            options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
          },
        },
      });
      t.field("oneofNotIgnoredField", {
        type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
        extensions: {
          protobufField: {
            name: "oneof_not_ignored_field",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
          },
        },
      });
      t.field("skipResolver", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "skip_resolver",
            typeFullName: "string",
            options: { "[graphql.field]": { skipResolver: true } },
          },
        },
      });
      t.field("squashedMessages", {
        type: nullable(
          list(nonNull("TestPrefixPrefixedMessageSquashedMessageInput")),
        ),
        extensions: {
          protobufField: {
            name: "squashed_messages",
            typeFullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
          },
        },
      });
      t.field("renamedMessage", {
        type: nullable("TestPrefixRenamedMessageInput"),
        extensions: {
          protobufField: {
            name: "renamed_message",
            typeFullName: "testapis.extensions.MessageWillRename",
          },
        },
      });
      t.field("renamedEnum", {
        type: nullable("TestPrefixRenamedEnum"),
        extensions: {
          protobufField: {
            name: "renamed_enum",
            typeFullName: "testapis.extensions.EnumWillRename",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage",
        name: "PrefixedMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixPrefixedMessageInput"],
    ): PrefixedMessage => {
      const output = new PrefixedMessage();
      output.setBody(input.body);
      if (input.prefixedEnum != null) {
        output.setPrefixedEnum(input.prefixedEnum);
      }
      if (input.notIgnoredMessage != null) {
        output.setNotIgnoredMessage(
          TestPrefixIgnoredMessageNotIgnoredInput.toProto(
            input.notIgnoredMessage,
          ),
        );
      }
      if (input.squashedMessage != null) {
        output.setSquashedMessage(
          TestPrefixPrefixedMessageSquashedMessageInput.toProto(
            input.squashedMessage,
          ),
        );
      }
      output.setThisFieldWillBeRenamed(input.thisFieldWasRenamed);
      if (input.oneofNotIgnoredField != null) {
        output.setOneofNotIgnoredField(
          TestPrefixPrefixedMessageInnerMessageInput.toProto(
            input.oneofNotIgnoredField,
          ),
        );
      }
      output.setSkipResolver(input.skipResolver);
      if (input.squashedMessages != null) {
        output.setSquashedMessagesList(input.squashedMessages.map((v) =>
          TestPrefixPrefixedMessageSquashedMessageInput.toProto(v)
        ));
      }
      if (input.renamedMessage != null) {
        output.setRenamedMessage(
          TestPrefixRenamedMessageInput.toProto(input.renamedMessage),
        );
      }
      if (input.renamedEnum != null) {
        output.setRenamedEnum(input.renamedEnum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        prefixedEnum: {
          type: nullable("TestPrefixPrefixedEnum"),
          extensions: {
            protobufField: {
              name: "prefixed_enum",
              typeFullName: "testapis.extensions.PrefixedEnum",
            },
          },
        },
        notIgnoredMessage: {
          type: nullable("TestPrefixIgnoredMessageNotIgnoredInput"),
          extensions: {
            protobufField: {
              name: "not_ignored_message",
              typeFullName: "testapis.extensions.IgnoredMessage.NotIgnored",
            },
          },
        },
        squashedMessage: {
          type: nullable("TestPrefixPrefixedMessageSquashedMessageInput"),
          extensions: {
            protobufField: {
              name: "squashed_message",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        thisFieldWasRenamed: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "this_field_will_be_renamed",
              typeFullName: "string",
              options: { "[graphql.field]": { name: "thisFieldWasRenamed" } },
            },
          },
        },
        oneofNotIgnoredField: {
          type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
          extensions: {
            protobufField: {
              name: "oneof_not_ignored_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        },
        skipResolver: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "skip_resolver",
              typeFullName: "string",
              options: { "[graphql.field]": { skipResolver: true } },
            },
          },
        },
        squashedMessages: {
          type: nullable(
            list(nonNull("TestPrefixPrefixedMessageSquashedMessageInput")),
          ),
          extensions: {
            protobufField: {
              name: "squashed_messages",
              typeFullName:
                "testapis.extensions.PrefixedMessage.SquashedMessage",
            },
          },
        },
        renamedMessage: {
          type: nullable("TestPrefixRenamedMessageInput"),
          extensions: {
            protobufField: {
              name: "renamed_message",
              typeFullName: "testapis.extensions.MessageWillRename",
            },
          },
        },
        renamedEnum: {
          type: nullable("TestPrefixRenamedEnum"),
          extensions: {
            protobufField: {
              name: "renamed_enum",
              typeFullName: "testapis.extensions.EnumWillRename",
            },
          },
        },
      },
    },
  },
);

export const TestPrefixRenamedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixRenamedMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.MessageWillRename",
        name: "MessageWillRename",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { name: "RenamedMessage" } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixRenamedMessageInput"],
    ): MessageWillRename => {
      const output = new MessageWillRename();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixInterfaceMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixInterfaceMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.InterfaceMessage",
        name: "InterfaceMessage",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { interface: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixInterfaceMessageInput"],
    ): InterfaceMessage => {
      const output = new InterfaceMessage();
      output.setId(stringToNumber(input.id));
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageInnerMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage",
        name: "InnerMessage",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessageInput"],
    ): PrefixedMessage.InnerMessage => {
      const output = new PrefixedMessage.InnerMessage();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageInnerMessage2Input = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageInnerMessage2Input",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
        name: "InnerMessage2",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageInnerMessage2Input"],
    ): PrefixedMessage.InnerMessage2 => {
      const output = new PrefixedMessage.InnerMessage2();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const TestPrefixPrefixedMessageSquashedMessageInput = Object.assign(
  inputObjectType({
    name: "TestPrefixPrefixedMessageSquashedMessageInput",
    definition: (t) => {
      t.field("oneofField", {
        type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
        extensions: {
          protobufField: {
            name: "oneof_field",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
          },
        },
      });
      t.field("oneofField2", {
        type: nullable("TestPrefixPrefixedMessageInnerMessage2Input"),
        extensions: {
          protobufField: {
            name: "oneof_field_2",
            typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
        name: "SquashedMessage",
        package: "testapis.extensions",
        options: { "[graphql.object_type]": { squashUnion: true } },
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["TestPrefixPrefixedMessageSquashedMessageInput"],
    ): PrefixedMessage.SquashedMessage => {
      const output = new PrefixedMessage.SquashedMessage();
      if (input.oneofField != null) {
        output.setOneofField(
          TestPrefixPrefixedMessageInnerMessageInput.toProto(input.oneofField),
        );
      }
      if (input.oneofField2 != null) {
        output.setOneofField2(
          TestPrefixPrefixedMessageInnerMessage2Input.toProto(
            input.oneofField2,
          ),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        oneofField: {
          type: nullable("TestPrefixPrefixedMessageInnerMessageInput"),
          extensions: {
            protobufField: {
              name: "oneof_field",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage",
            },
          },
        },
        oneofField2: {
          type: nullable("TestPrefixPrefixedMessageInnerMessage2Input"),
          extensions: {
            protobufField: {
              name: "oneof_field_2",
              typeFullName: "testapis.extensions.PrefixedMessage.InnerMessage2",
            },
          },
        },
      },
    },
  },
);

export const TestPrefixIgnoredMessageNotIgnoredInput = Object.assign(
  inputObjectType({
    name: "TestPrefixIgnoredMessageNotIgnoredInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.IgnoredMessage.NotIgnored",
        name: "NotIgnored",
        package: "testapis.extensions",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["TestPrefixIgnoredMessageNotIgnoredInput"],
    ): IgnoredMessage.NotIgnored => {
      const output = new IgnoredMessage.NotIgnored();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export type testapis$extensions$InterfaceMessage = InterfaceMessage;
export const TestPrefixInterfaceMessage = interfaceType({
  name: "TestPrefixInterfaceMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.InterfaceMessage",
      name: "InterfaceMessage",
      package: "testapis.extensions",
      options: { "[graphql.object_type]": { interface: true } },
    },
  },
});
export const TestPrefixPrefixedMessageSquashedMessage = unionType({
  name: "TestPrefixPrefixedMessageSquashedMessage",
  definition: (t) => {
    t.members(
      TestPrefixPrefixedMessageInnerMessage,
      TestPrefixPrefixedMessageInnerMessage2,
    );
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.extensions.PrefixedMessage.SquashedMessage",
      name: "SquashedMessage",
      package: "testapis.extensions",
      fields: [{
        name: "oneof_field",
        type: "testapis.extensions.PrefixedMessage.InnerMessage",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }, {
        name: "oneof_field_2",
        type: "testapis.extensions.PrefixedMessage.InnerMessage2",
        options: { "[graphql.object_type]": { squashUnion: true } },
      }],
    },
  },
});
export const TestPrefixPrefixedMessagePartialIgnoreOneof = unionType({
  name: "TestPrefixPrefixedMessagePartialIgnoreOneof",
  definition: (t) => {
    t.members(TestPrefixPrefixedMessageInnerMessage);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.extensions.PrefixedMessage.partial_ignore_oneof",
      name: "partial_ignore_oneof",
      messageName: "PrefixedMessage",
      package: "testapis.extensions",
      fields: [{
        name: "oneof_not_ignored_field",
        type: "testapis.extensions.PrefixedMessage.InnerMessage",
      }],
    },
  },
});
export const TestPrefixPrefixedEnum = enumType({
  name: "TestPrefixPrefixedEnum",
  members: [{
    name: "PREFIXED_FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "PREFIXED_FOO" } },
  }, {
    name: "PREFIXED_BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "PREFIXED_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "PrefixedEnum",
      fullName: "testapis.extensions.PrefixedEnum",
      package: "testapis.extensions",
    },
  },
});
export const TestPrefixRenamedEnum = enumType({
  name: "TestPrefixRenamedEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "ENUM_WILL_RENAME_FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "ENUM_WILL_RENAME_BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "EnumWillRename",
      fullName: "testapis.extensions.EnumWillRename",
      package: "testapis.extensions",
      options: { "[graphql.enum_type]": { name: "RenamedEnum" } },
    },
  },
});
export const TestPrefixInterfaceMessageType = enumType({
  name: "TestPrefixInterfaceMessageType",
  members: [{
    name: "INNER",
    value: 1,
    extensions: { protobufEnumValue: { name: "INNER" } },
  }, {
    name: "INNER2",
    value: 2,
    extensions: { protobufEnumValue: { name: "INNER2" } },
  }],
  extensions: {
    protobufEnum: {
      name: "Type",
      fullName: "testapis.extensions.InterfaceMessage.Type",
      package: "testapis.extensions",
    },
  },
});
",
    "name": "testapis/extensions/extensions_pb_nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/ignored.proto

/* eslint-disable */

export {};
",
    "name": "testapis/extensions/ignored_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions.field_nullability' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/field_nullability/nullability.proto

/* eslint-disable */

import { Message as Message1 } from "@testapis/proto/testapis/extensions/field_nullability/nullability_pb";
import { nonNull, nullable, objectType } from "nexus";
import { MessageStatus } from "./MessageStatus.nexus";

export type testapis$extensions$field_nullability$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("userId", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getUserId();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "user_id",
          typeFullName: "uint64",
          options: {
            "[graphql.field]": {
              outputNullability: "NON_NULL",
              inputNullability: "NULLABLE",
              partialInputNullability: "NON_NULL",
            },
          },
        },
      },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("status", {
      type: nullable(MessageStatus),
      description: "Required.",
      resolve: (source) => {
        const value = source.getStatus();
        if (value == null) {
          return null;
        }
        if (value === Message1.Status.STATUS_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "status",
          typeFullName: "testapis.extensions.field_nullability.Message.Status",
          options: {
            "[graphql.field]": {
              outputNullability: "NULLABLE",
              inputNullability: "NULLABLE",
            },
          },
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$field_nullability$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.field_nullability.Message",
      name: "Message",
      package: "testapis.extensions.field_nullability",
    },
  },
});
",
    "name": "testapis/extensions/field_nullability/Message.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/field_nullability/nullability.proto

/* eslint-disable */

import { Message } from "@testapis/proto/testapis/extensions/field_nullability/nullability_pb";
import { inputObjectType, nonNull, nullable } from "nexus";
import { stringToNumber } from "proto-nexus";
import { MessageStatus } from "./MessageStatus.nexus";

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("userId", {
        type: nullable("String"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "user_id",
            typeFullName: "uint64",
            options: {
              "[graphql.field]": {
                outputNullability: "NON_NULL",
                inputNullability: "NULLABLE",
                partialInputNullability: "NON_NULL",
              },
            },
          },
        },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("status", {
        type: nullable(MessageStatus),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "status",
            typeFullName:
              "testapis.extensions.field_nullability.Message.Status",
            options: {
              "[graphql.field]": {
                outputNullability: "NULLABLE",
                inputNullability: "NULLABLE",
              },
            },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.field_nullability.Message",
        name: "Message",
        package: "testapis.extensions.field_nullability",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message => {
      const output = new Message();
      if (input.userId != null) {
        output.setUserId(stringToNumber(input.userId));
      }
      output.setBody(input.body);
      if (input.status != null) {
        output.setStatus(input.status);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        userId: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "user_id",
              typeFullName: "uint64",
              options: {
                "[graphql.field]": {
                  outputNullability: "NON_NULL",
                  inputNullability: "NULLABLE",
                  partialInputNullability: "NON_NULL",
                },
              },
            },
          },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        status: {
          type: nullable(MessageStatus),
          extensions: {
            protobufField: {
              name: "status",
              typeFullName:
                "testapis.extensions.field_nullability.Message.Status",
              options: {
                "[graphql.field]": {
                  outputNullability: "NULLABLE",
                  inputNullability: "NULLABLE",
                },
              },
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/field_nullability/MessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/field_nullability/nullability.proto

/* eslint-disable */

import { enumType } from "nexus";

export const MessageStatus = enumType({
  name: "MessageStatus",
  members: [{
    name: "DRAFT",
    value: 1,
    extensions: { protobufEnumValue: { name: "DRAFT" } },
  }, {
    name: "PUBLISHED",
    value: 2,
    extensions: { protobufEnumValue: { name: "PUBLISHED" } },
  }],
  extensions: {
    protobufEnum: {
      name: "Status",
      fullName: "testapis.extensions.field_nullability.Message.Status",
      package: "testapis.extensions.field_nullability",
    },
  },
});
",
    "name": "testapis/extensions/field_nullability/MessageStatus.nexus.ts",
  },
]
`;

exports[`'testapis.extensions.field_nullability' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/field_nullability/nullability.proto

/* eslint-disable */

import { Message as Message1 } from "@testapis/proto/testapis/extensions/field_nullability/nullability_pb";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$extensions$field_nullability$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("userId", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getUserId();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "user_id",
          typeFullName: "uint64",
          options: {
            "[graphql.field]": {
              outputNullability: "NON_NULL",
              inputNullability: "NULLABLE",
              partialInputNullability: "NON_NULL",
            },
          },
        },
      },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("status", {
      type: nullable("MessageStatus"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getStatus();
        if (value == null) {
          return null;
        }
        if (value === Message1.Status.STATUS_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "status",
          typeFullName: "testapis.extensions.field_nullability.Message.Status",
          options: {
            "[graphql.field]": {
              outputNullability: "NULLABLE",
              inputNullability: "NULLABLE",
            },
          },
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$field_nullability$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.field_nullability.Message",
      name: "Message",
      package: "testapis.extensions.field_nullability",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("userId", {
        type: nullable("String"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "user_id",
            typeFullName: "uint64",
            options: {
              "[graphql.field]": {
                outputNullability: "NON_NULL",
                inputNullability: "NULLABLE",
                partialInputNullability: "NON_NULL",
              },
            },
          },
        },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("status", {
        type: nullable("MessageStatus"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "status",
            typeFullName:
              "testapis.extensions.field_nullability.Message.Status",
            options: {
              "[graphql.field]": {
                outputNullability: "NULLABLE",
                inputNullability: "NULLABLE",
              },
            },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.field_nullability.Message",
        name: "Message",
        package: "testapis.extensions.field_nullability",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      if (input.userId != null) {
        output.setUserId(stringToNumber(input.userId));
      }
      output.setBody(input.body);
      if (input.status != null) {
        output.setStatus(input.status);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        userId: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "user_id",
              typeFullName: "uint64",
              options: {
                "[graphql.field]": {
                  outputNullability: "NON_NULL",
                  inputNullability: "NULLABLE",
                  partialInputNullability: "NON_NULL",
                },
              },
            },
          },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        status: {
          type: nullable("MessageStatus"),
          extensions: {
            protobufField: {
              name: "status",
              typeFullName:
                "testapis.extensions.field_nullability.Message.Status",
              options: {
                "[graphql.field]": {
                  outputNullability: "NULLABLE",
                  inputNullability: "NULLABLE",
                },
              },
            },
          },
        },
      },
    },
  },
);
export const MessageStatus = enumType({
  name: "MessageStatus",
  members: [{
    name: "DRAFT",
    value: 1,
    extensions: { protobufEnumValue: { name: "DRAFT" } },
  }, {
    name: "PUBLISHED",
    value: 2,
    extensions: { protobufEnumValue: { name: "PUBLISHED" } },
  }],
  extensions: {
    protobufEnum: {
      name: "Status",
      fullName: "testapis.extensions.field_nullability.Message.Status",
      package: "testapis.extensions.field_nullability",
    },
  },
});
",
    "name": "testapis/extensions/field_nullability/nullability_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions.field_nullability' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/field_nullability/nullability.proto

/* eslint-disable */

import { Message as Message1 } from "@testapis/proto/testapis/extensions/field_nullability/nullability_pb";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$extensions$field_nullability$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("userId", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getUserId();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "user_id",
          typeFullName: "uint64",
          options: {
            "[graphql.field]": {
              outputNullability: "NON_NULL",
              inputNullability: "NULLABLE",
              partialInputNullability: "NON_NULL",
            },
          },
        },
      },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("status", {
      type: nullable("MessageStatus"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getStatus();
        if (value == null) {
          return null;
        }
        if (value === Message1.Status.STATUS_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "status",
          typeFullName: "testapis.extensions.field_nullability.Message.Status",
          options: {
            "[graphql.field]": {
              outputNullability: "NULLABLE",
              inputNullability: "NULLABLE",
            },
          },
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$field_nullability$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.field_nullability.Message",
      name: "Message",
      package: "testapis.extensions.field_nullability",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("userId", {
        type: nullable("String"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "user_id",
            typeFullName: "uint64",
            options: {
              "[graphql.field]": {
                outputNullability: "NON_NULL",
                inputNullability: "NULLABLE",
                partialInputNullability: "NON_NULL",
              },
            },
          },
        },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("status", {
        type: nullable("MessageStatus"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "status",
            typeFullName:
              "testapis.extensions.field_nullability.Message.Status",
            options: {
              "[graphql.field]": {
                outputNullability: "NULLABLE",
                inputNullability: "NULLABLE",
              },
            },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.field_nullability.Message",
        name: "Message",
        package: "testapis.extensions.field_nullability",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      if (input.userId != null) {
        output.setUserId(stringToNumber(input.userId));
      }
      output.setBody(input.body);
      if (input.status != null) {
        output.setStatus(input.status);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        userId: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "user_id",
              typeFullName: "uint64",
              options: {
                "[graphql.field]": {
                  outputNullability: "NON_NULL",
                  inputNullability: "NULLABLE",
                  partialInputNullability: "NON_NULL",
                },
              },
            },
          },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        status: {
          type: nullable("MessageStatus"),
          extensions: {
            protobufField: {
              name: "status",
              typeFullName:
                "testapis.extensions.field_nullability.Message.Status",
              options: {
                "[graphql.field]": {
                  outputNullability: "NULLABLE",
                  inputNullability: "NULLABLE",
                },
              },
            },
          },
        },
      },
    },
  },
);

export const MessagePartialInput = Object.assign(
  inputObjectType({
    name: "MessagePartialInput",
    definition: (t) => {
      t.field("userId", {
        type: nonNull("String"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "user_id",
            typeFullName: "uint64",
            options: {
              "[graphql.field]": {
                outputNullability: "NON_NULL",
                inputNullability: "NULLABLE",
                partialInputNullability: "NON_NULL",
              },
            },
          },
        },
      });
      t.field("body", {
        type: nullable("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("status", {
        type: nullable("MessageStatus"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "status",
            typeFullName:
              "testapis.extensions.field_nullability.Message.Status",
            options: {
              "[graphql.field]": {
                outputNullability: "NULLABLE",
                inputNullability: "NULLABLE",
              },
            },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.field_nullability.Message",
        name: "Message",
        package: "testapis.extensions.field_nullability",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessagePartialInput"],
    ): Message1 => {
      const output = new Message1();
      output.setUserId(stringToNumber(input.userId));
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.status != null) {
        output.setStatus(input.status);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        userId: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "user_id",
              typeFullName: "uint64",
              options: {
                "[graphql.field]": {
                  outputNullability: "NON_NULL",
                  inputNullability: "NULLABLE",
                  partialInputNullability: "NON_NULL",
                },
              },
            },
          },
        },
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        status: {
          type: nullable("MessageStatus"),
          extensions: {
            protobufField: {
              name: "status",
              typeFullName:
                "testapis.extensions.field_nullability.Message.Status",
              options: {
                "[graphql.field]": {
                  outputNullability: "NULLABLE",
                  inputNullability: "NULLABLE",
                },
              },
            },
          },
        },
      },
    },
  },
);
export const MessageStatus = enumType({
  name: "MessageStatus",
  members: [{
    name: "DRAFT",
    value: 1,
    extensions: { protobufEnumValue: { name: "DRAFT" } },
  }, {
    name: "PUBLISHED",
    value: 2,
    extensions: { protobufEnumValue: { name: "PUBLISHED" } },
  }],
  extensions: {
    protobufEnum: {
      name: "Status",
      fullName: "testapis.extensions.field_nullability.Message.Status",
      package: "testapis.extensions.field_nullability",
    },
  },
});
",
    "name": "testapis/extensions/field_nullability/nullability_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions.field_nullability' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/field_nullability/nullability.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/extensions/field_nullability";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$extensions$field_nullability$Message =
  testapis.extensions.field_nullability.Message;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("userId", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.userId;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "user_id",
          typeFullName: "uint64",
          options: {
            "[graphql.field]": {
              outputNullability: "NON_NULL",
              inputNullability: "NULLABLE",
              partialInputNullability: "NON_NULL",
            },
          },
        },
      },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("status", {
      type: nullable("MessageStatus"),
      description: "Required.",
      resolve: (source) => {
        const value = source.status;
        if (value == null) {
          return null;
        }
        if (
          value ===
            testapis.extensions.field_nullability.Message.Status
              .STATUS_UNSPECIFIED
        ) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "status",
          typeFullName: "testapis.extensions.field_nullability.Message.Status",
          options: {
            "[graphql.field]": {
              outputNullability: "NULLABLE",
              inputNullability: "NULLABLE",
            },
          },
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.extensions.field_nullability.Message;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$field_nullability$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.field_nullability.Message",
      name: "Message",
      package: "testapis.extensions.field_nullability",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("userId", {
        type: nullable("String"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "user_id",
            typeFullName: "uint64",
            options: {
              "[graphql.field]": {
                outputNullability: "NON_NULL",
                inputNullability: "NULLABLE",
                partialInputNullability: "NON_NULL",
              },
            },
          },
        },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("status", {
        type: nullable("MessageStatus"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "status",
            typeFullName:
              "testapis.extensions.field_nullability.Message.Status",
            options: {
              "[graphql.field]": {
                outputNullability: "NULLABLE",
                inputNullability: "NULLABLE",
              },
            },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.field_nullability.Message",
        name: "Message",
        package: "testapis.extensions.field_nullability",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageInput"],
    ): testapis.extensions.field_nullability.Message => {
      const output = new testapis.extensions.field_nullability.Message();
      if (input.userId != null) {
        output.userId = stringToNumber(input.userId);
      }
      output.body = input.body;
      if (input.status != null) {
        output.status = input.status;
      }
      return output;
    },
    _protoNexus: {
      fields: {
        userId: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "user_id",
              typeFullName: "uint64",
              options: {
                "[graphql.field]": {
                  outputNullability: "NON_NULL",
                  inputNullability: "NULLABLE",
                  partialInputNullability: "NON_NULL",
                },
              },
            },
          },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        status: {
          type: nullable("MessageStatus"),
          extensions: {
            protobufField: {
              name: "status",
              typeFullName:
                "testapis.extensions.field_nullability.Message.Status",
              options: {
                "[graphql.field]": {
                  outputNullability: "NULLABLE",
                  inputNullability: "NULLABLE",
                },
              },
            },
          },
        },
      },
    },
  },
);
export const MessageStatus = enumType({
  name: "MessageStatus",
  members: [{
    name: "DRAFT",
    value: 1,
    extensions: { protobufEnumValue: { name: "DRAFT" } },
  }, {
    name: "PUBLISHED",
    value: 2,
    extensions: { protobufEnumValue: { name: "PUBLISHED" } },
  }],
  extensions: {
    protobufEnum: {
      name: "Status",
      fullName: "testapis.extensions.field_nullability.Message.Status",
      package: "testapis.extensions.field_nullability",
    },
  },
});
",
    "name": "testapis/extensions/field_nullability/nullability_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions.field_nullability' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/field_nullability/nullability.proto

/* eslint-disable */

import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";
import { stringToNumber } from "proto-nexus";
import { Message as Message1 } from "./testapis/extensions/field_nullability/nullability_pb";

export type testapis$extensions$field_nullability$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("userId", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getUserId();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "user_id",
          typeFullName: "uint64",
          options: {
            "[graphql.field]": {
              outputNullability: "NON_NULL",
              inputNullability: "NULLABLE",
              partialInputNullability: "NON_NULL",
            },
          },
        },
      },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("status", {
      type: nullable("MessageStatus"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getStatus();
        if (value == null) {
          return null;
        }
        if (value === Message1.Status.STATUS_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "status",
          typeFullName: "testapis.extensions.field_nullability.Message.Status",
          options: {
            "[graphql.field]": {
              outputNullability: "NULLABLE",
              inputNullability: "NULLABLE",
            },
          },
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$field_nullability$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.field_nullability.Message",
      name: "Message",
      package: "testapis.extensions.field_nullability",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("userId", {
        type: nullable("String"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "user_id",
            typeFullName: "uint64",
            options: {
              "[graphql.field]": {
                outputNullability: "NON_NULL",
                inputNullability: "NULLABLE",
                partialInputNullability: "NON_NULL",
              },
            },
          },
        },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("status", {
        type: nullable("MessageStatus"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "status",
            typeFullName:
              "testapis.extensions.field_nullability.Message.Status",
            options: {
              "[graphql.field]": {
                outputNullability: "NULLABLE",
                inputNullability: "NULLABLE",
              },
            },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.field_nullability.Message",
        name: "Message",
        package: "testapis.extensions.field_nullability",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      if (input.userId != null) {
        output.setUserId(stringToNumber(input.userId));
      }
      output.setBody(input.body);
      if (input.status != null) {
        output.setStatus(input.status);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        userId: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "user_id",
              typeFullName: "uint64",
              options: {
                "[graphql.field]": {
                  outputNullability: "NON_NULL",
                  inputNullability: "NULLABLE",
                  partialInputNullability: "NON_NULL",
                },
              },
            },
          },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        status: {
          type: nullable("MessageStatus"),
          extensions: {
            protobufField: {
              name: "status",
              typeFullName:
                "testapis.extensions.field_nullability.Message.Status",
              options: {
                "[graphql.field]": {
                  outputNullability: "NULLABLE",
                  inputNullability: "NULLABLE",
                },
              },
            },
          },
        },
      },
    },
  },
);
export const MessageStatus = enumType({
  name: "MessageStatus",
  members: [{
    name: "DRAFT",
    value: 1,
    extensions: { protobufEnumValue: { name: "DRAFT" } },
  }, {
    name: "PUBLISHED",
    value: 2,
    extensions: { protobufEnumValue: { name: "PUBLISHED" } },
  }],
  extensions: {
    protobufEnum: {
      name: "Status",
      fullName: "testapis.extensions.field_nullability.Message.Status",
      package: "testapis.extensions.field_nullability",
    },
  },
});
",
    "name": "testapis/extensions/field_nullability/nullability_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions.no_partial' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import { ParentMessage as ParentMessage1 } from "@testapis/proto/testapis/extensions/no_partial/no_partial_pb";
import { nonNull, objectType } from "nexus";
import { NoPartialInputMessage } from "./NoPartialInputMessage.nexus";
import { PartialableInputMessage } from "./PartialableInputMessage.nexus";

export type testapis$extensions$no_partial$ParentMessage = ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("partialableInputMessage", {
      type: nonNull(PartialableInputMessage),
      description: "Required.",
      resolve: (source) => {
        const value = source.getPartialableInputMessage();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "partialable_input_message",
          typeFullName:
            "testapis.extensions.no_partial.PartialableInputMessage",
        },
      },
    });
    t.field("noPartialInputMessage", {
      type: nonNull(NoPartialInputMessage),
      description: "Required.",
      resolve: (source) => {
        const value = source.getNoPartialInputMessage();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "no_partial_input_message",
          typeFullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$ParentMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.ParentMessage",
      name: "ParentMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});
",
    "name": "testapis/extensions/no_partial/ParentMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import { PartialableInputMessage as PartialableInputMessage1 } from "@testapis/proto/testapis/extensions/no_partial/no_partial_pb";
import { nonNull, objectType } from "nexus";

export type testapis$extensions$no_partial$PartialableInputMessage =
  PartialableInputMessage1;
export const PartialableInputMessage = objectType({
  name: "PartialableInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PartialableInputMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$PartialableInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.PartialableInputMessage",
      name: "PartialableInputMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});
",
    "name": "testapis/extensions/no_partial/PartialableInputMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import { NoPartialInputMessage as NoPartialInputMessage1 } from "@testapis/proto/testapis/extensions/no_partial/no_partial_pb";
import { nonNull, objectType } from "nexus";

export type testapis$extensions$no_partial$NoPartialInputMessage =
  NoPartialInputMessage1;
export const NoPartialInputMessage = objectType({
  name: "NoPartialInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NoPartialInputMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$NoPartialInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
      name: "NoPartialInputMessage",
      package: "testapis.extensions.no_partial",
      options: { "[graphql.input_type]": { noPartial: true } },
    },
  },
});
",
    "name": "testapis/extensions/no_partial/NoPartialInputMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import { ParentMessage } from "@testapis/proto/testapis/extensions/no_partial/no_partial_pb";
import { inputObjectType, nonNull } from "nexus";
import { NoPartialInputMessageInput } from "./NoPartialInputMessageInput.nexus";
import { PartialableInputMessageInput } from "./PartialableInputMessageInput.nexus";

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("partialableInputMessage", {
        type: nonNull(PartialableInputMessageInput),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "partialable_input_message",
            typeFullName:
              "testapis.extensions.no_partial.PartialableInputMessage",
          },
        },
      });
      t.field("noPartialInputMessage", {
        type: nonNull(NoPartialInputMessageInput),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "no_partial_input_message",
            typeFullName:
              "testapis.extensions.no_partial.NoPartialInputMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.ParentMessage",
        name: "ParentMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage => {
      const output = new ParentMessage();
      output.setPartialableInputMessage(
        PartialableInputMessageInput.toProto(input.partialableInputMessage),
      );
      output.setNoPartialInputMessage(
        NoPartialInputMessageInput.toProto(input.noPartialInputMessage),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        partialableInputMessage: {
          type: nonNull(PartialableInputMessageInput),
          extensions: {
            protobufField: {
              name: "partialable_input_message",
              typeFullName:
                "testapis.extensions.no_partial.PartialableInputMessage",
            },
          },
        },
        noPartialInputMessage: {
          type: nonNull(NoPartialInputMessageInput),
          extensions: {
            protobufField: {
              name: "no_partial_input_message",
              typeFullName:
                "testapis.extensions.no_partial.NoPartialInputMessage",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/no_partial/ParentMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import { PartialableInputMessage } from "@testapis/proto/testapis/extensions/no_partial/no_partial_pb";
import { inputObjectType, nonNull } from "nexus";
import { stringToNumber } from "proto-nexus";

export const PartialableInputMessageInput = Object.assign(
  inputObjectType({
    name: "PartialableInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.PartialableInputMessage",
        name: "PartialableInputMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PartialableInputMessageInput"],
    ): PartialableInputMessage => {
      const output = new PartialableInputMessage();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/no_partial/PartialableInputMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import { NoPartialInputMessage } from "@testapis/proto/testapis/extensions/no_partial/no_partial_pb";
import { inputObjectType, nonNull } from "nexus";
import { stringToNumber } from "proto-nexus";

export const NoPartialInputMessageInput = Object.assign(
  inputObjectType({
    name: "NoPartialInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        name: "NoPartialInputMessage",
        package: "testapis.extensions.no_partial",
        options: { "[graphql.input_type]": { noPartial: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NoPartialInputMessageInput"],
    ): NoPartialInputMessage => {
      const output = new NoPartialInputMessage();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/no_partial/NoPartialInputMessageInput.nexus.ts",
  },
]
`;

exports[`'testapis.extensions.no_partial' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import {
  NoPartialInputMessage as NoPartialInputMessage3,
  ParentMessage as ParentMessage1,
  PartialableInputMessage as PartialableInputMessage2,
} from "@testapis/proto/testapis/extensions/no_partial/no_partial_pb";
import { inputObjectType, nonNull, objectType } from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$extensions$no_partial$ParentMessage = ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("partialableInputMessage", {
      type: nonNull("PartialableInputMessage"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getPartialableInputMessage();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "partialable_input_message",
          typeFullName:
            "testapis.extensions.no_partial.PartialableInputMessage",
        },
      },
    });
    t.field("noPartialInputMessage", {
      type: nonNull("NoPartialInputMessage"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getNoPartialInputMessage();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "no_partial_input_message",
          typeFullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$ParentMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.ParentMessage",
      name: "ParentMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});

export type testapis$extensions$no_partial$PartialableInputMessage =
  PartialableInputMessage2;
export const PartialableInputMessage = objectType({
  name: "PartialableInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PartialableInputMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$PartialableInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.PartialableInputMessage",
      name: "PartialableInputMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});

export type testapis$extensions$no_partial$NoPartialInputMessage =
  NoPartialInputMessage3;
export const NoPartialInputMessage = objectType({
  name: "NoPartialInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NoPartialInputMessage3;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$NoPartialInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
      name: "NoPartialInputMessage",
      package: "testapis.extensions.no_partial",
      options: { "[graphql.input_type]": { noPartial: true } },
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("partialableInputMessage", {
        type: nonNull("PartialableInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "partialable_input_message",
            typeFullName:
              "testapis.extensions.no_partial.PartialableInputMessage",
          },
        },
      });
      t.field("noPartialInputMessage", {
        type: nonNull("NoPartialInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "no_partial_input_message",
            typeFullName:
              "testapis.extensions.no_partial.NoPartialInputMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.ParentMessage",
        name: "ParentMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      output.setPartialableInputMessage(
        PartialableInputMessageInput.toProto(input.partialableInputMessage),
      );
      output.setNoPartialInputMessage(
        NoPartialInputMessageInput.toProto(input.noPartialInputMessage),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        partialableInputMessage: {
          type: nonNull("PartialableInputMessageInput"),
          extensions: {
            protobufField: {
              name: "partialable_input_message",
              typeFullName:
                "testapis.extensions.no_partial.PartialableInputMessage",
            },
          },
        },
        noPartialInputMessage: {
          type: nonNull("NoPartialInputMessageInput"),
          extensions: {
            protobufField: {
              name: "no_partial_input_message",
              typeFullName:
                "testapis.extensions.no_partial.NoPartialInputMessage",
            },
          },
        },
      },
    },
  },
);

export const PartialableInputMessageInput = Object.assign(
  inputObjectType({
    name: "PartialableInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.PartialableInputMessage",
        name: "PartialableInputMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PartialableInputMessageInput"],
    ): PartialableInputMessage2 => {
      const output = new PartialableInputMessage2();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NoPartialInputMessageInput = Object.assign(
  inputObjectType({
    name: "NoPartialInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        name: "NoPartialInputMessage",
        package: "testapis.extensions.no_partial",
        options: { "[graphql.input_type]": { noPartial: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NoPartialInputMessageInput"],
    ): NoPartialInputMessage3 => {
      const output = new NoPartialInputMessage3();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/no_partial/no_partial_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions.no_partial' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import {
  NoPartialInputMessage as NoPartialInputMessage3,
  ParentMessage as ParentMessage1,
  PartialableInputMessage as PartialableInputMessage2,
} from "@testapis/proto/testapis/extensions/no_partial/no_partial_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$extensions$no_partial$ParentMessage = ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("partialableInputMessage", {
      type: nonNull("PartialableInputMessage"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getPartialableInputMessage();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "partialable_input_message",
          typeFullName:
            "testapis.extensions.no_partial.PartialableInputMessage",
        },
      },
    });
    t.field("noPartialInputMessage", {
      type: nonNull("NoPartialInputMessage"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getNoPartialInputMessage();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "no_partial_input_message",
          typeFullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$ParentMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.ParentMessage",
      name: "ParentMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});

export type testapis$extensions$no_partial$PartialableInputMessage =
  PartialableInputMessage2;
export const PartialableInputMessage = objectType({
  name: "PartialableInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PartialableInputMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$PartialableInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.PartialableInputMessage",
      name: "PartialableInputMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});

export type testapis$extensions$no_partial$NoPartialInputMessage =
  NoPartialInputMessage3;
export const NoPartialInputMessage = objectType({
  name: "NoPartialInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NoPartialInputMessage3;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$NoPartialInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
      name: "NoPartialInputMessage",
      package: "testapis.extensions.no_partial",
      options: { "[graphql.input_type]": { noPartial: true } },
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("partialableInputMessage", {
        type: nonNull("PartialableInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "partialable_input_message",
            typeFullName:
              "testapis.extensions.no_partial.PartialableInputMessage",
          },
        },
      });
      t.field("noPartialInputMessage", {
        type: nonNull("NoPartialInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "no_partial_input_message",
            typeFullName:
              "testapis.extensions.no_partial.NoPartialInputMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.ParentMessage",
        name: "ParentMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      output.setPartialableInputMessage(
        PartialableInputMessageInput.toProto(input.partialableInputMessage),
      );
      output.setNoPartialInputMessage(
        NoPartialInputMessageInput.toProto(input.noPartialInputMessage),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        partialableInputMessage: {
          type: nonNull("PartialableInputMessageInput"),
          extensions: {
            protobufField: {
              name: "partialable_input_message",
              typeFullName:
                "testapis.extensions.no_partial.PartialableInputMessage",
            },
          },
        },
        noPartialInputMessage: {
          type: nonNull("NoPartialInputMessageInput"),
          extensions: {
            protobufField: {
              name: "no_partial_input_message",
              typeFullName:
                "testapis.extensions.no_partial.NoPartialInputMessage",
            },
          },
        },
      },
    },
  },
);

export const ParentMessagePartialInput = Object.assign(
  inputObjectType({
    name: "ParentMessagePartialInput",
    definition: (t) => {
      t.field("partialableInputMessage", {
        type: nullable("PartialableInputMessagePartialInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "partialable_input_message",
            typeFullName:
              "testapis.extensions.no_partial.PartialableInputMessage",
          },
        },
      });
      t.field("noPartialInputMessage", {
        type: nullable("NoPartialInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "no_partial_input_message",
            typeFullName:
              "testapis.extensions.no_partial.NoPartialInputMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.ParentMessage",
        name: "ParentMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessagePartialInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      if (input.partialableInputMessage != null) {
        output.setPartialableInputMessage(
          PartialableInputMessagePartialInput.toProto(
            input.partialableInputMessage,
          ),
        );
      }
      if (input.noPartialInputMessage != null) {
        output.setNoPartialInputMessage(
          NoPartialInputMessageInput.toProto(input.noPartialInputMessage),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        partialableInputMessage: {
          type: nullable("PartialableInputMessagePartialInput"),
          extensions: {
            protobufField: {
              name: "partialable_input_message",
              typeFullName:
                "testapis.extensions.no_partial.PartialableInputMessage",
            },
          },
        },
        noPartialInputMessage: {
          type: nullable("NoPartialInputMessageInput"),
          extensions: {
            protobufField: {
              name: "no_partial_input_message",
              typeFullName:
                "testapis.extensions.no_partial.NoPartialInputMessage",
            },
          },
        },
      },
    },
  },
);

export const PartialableInputMessageInput = Object.assign(
  inputObjectType({
    name: "PartialableInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.PartialableInputMessage",
        name: "PartialableInputMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PartialableInputMessageInput"],
    ): PartialableInputMessage2 => {
      const output = new PartialableInputMessage2();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const PartialableInputMessagePartialInput = Object.assign(
  inputObjectType({
    name: "PartialableInputMessagePartialInput",
    definition: (t) => {
      t.field("id", {
        type: nullable("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nullable("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.PartialableInputMessage",
        name: "PartialableInputMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PartialableInputMessagePartialInput"],
    ): PartialableInputMessage2 => {
      const output = new PartialableInputMessage2();
      if (input.id != null) {
        output.setId(stringToNumber(input.id));
      }
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nullable("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NoPartialInputMessageInput = Object.assign(
  inputObjectType({
    name: "NoPartialInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        name: "NoPartialInputMessage",
        package: "testapis.extensions.no_partial",
        options: { "[graphql.input_type]": { noPartial: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NoPartialInputMessageInput"],
    ): NoPartialInputMessage3 => {
      const output = new NoPartialInputMessage3();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/no_partial/no_partial_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions.no_partial' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/extensions/no_partial";
import { inputObjectType, nonNull, objectType } from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$extensions$no_partial$ParentMessage =
  testapis.extensions.no_partial.ParentMessage;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("partialableInputMessage", {
      type: nonNull("PartialableInputMessage"),
      description: "Required.",
      resolve: (source) => {
        const value = source.partialableInputMessage;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "partialable_input_message",
          typeFullName:
            "testapis.extensions.no_partial.PartialableInputMessage",
        },
      },
    });
    t.field("noPartialInputMessage", {
      type: nonNull("NoPartialInputMessage"),
      description: "Required.",
      resolve: (source) => {
        const value = source.noPartialInputMessage;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "no_partial_input_message",
          typeFullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.extensions.no_partial.ParentMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$ParentMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.ParentMessage",
      name: "ParentMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});

export type testapis$extensions$no_partial$PartialableInputMessage =
  testapis.extensions.no_partial.PartialableInputMessage;
export const PartialableInputMessage = objectType({
  name: "PartialableInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.id;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof
      testapis.extensions.no_partial.PartialableInputMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$PartialableInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.PartialableInputMessage",
      name: "PartialableInputMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});

export type testapis$extensions$no_partial$NoPartialInputMessage =
  testapis.extensions.no_partial.NoPartialInputMessage;
export const NoPartialInputMessage = objectType({
  name: "NoPartialInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.id;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.extensions.no_partial.NoPartialInputMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$NoPartialInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
      name: "NoPartialInputMessage",
      package: "testapis.extensions.no_partial",
      options: { "[graphql.input_type]": { noPartial: true } },
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("partialableInputMessage", {
        type: nonNull("PartialableInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "partialable_input_message",
            typeFullName:
              "testapis.extensions.no_partial.PartialableInputMessage",
          },
        },
      });
      t.field("noPartialInputMessage", {
        type: nonNull("NoPartialInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "no_partial_input_message",
            typeFullName:
              "testapis.extensions.no_partial.NoPartialInputMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.ParentMessage",
        name: "ParentMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): testapis.extensions.no_partial.ParentMessage => {
      const output = new testapis.extensions.no_partial.ParentMessage();
      output.partialableInputMessage = PartialableInputMessageInput.toProto(
        input.partialableInputMessage,
      );
      output.noPartialInputMessage = NoPartialInputMessageInput.toProto(
        input.noPartialInputMessage,
      );
      return output;
    },
    _protoNexus: {
      fields: {
        partialableInputMessage: {
          type: nonNull("PartialableInputMessageInput"),
          extensions: {
            protobufField: {
              name: "partialable_input_message",
              typeFullName:
                "testapis.extensions.no_partial.PartialableInputMessage",
            },
          },
        },
        noPartialInputMessage: {
          type: nonNull("NoPartialInputMessageInput"),
          extensions: {
            protobufField: {
              name: "no_partial_input_message",
              typeFullName:
                "testapis.extensions.no_partial.NoPartialInputMessage",
            },
          },
        },
      },
    },
  },
);

export const PartialableInputMessageInput = Object.assign(
  inputObjectType({
    name: "PartialableInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.PartialableInputMessage",
        name: "PartialableInputMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PartialableInputMessageInput"],
    ): testapis.extensions.no_partial.PartialableInputMessage => {
      const output = new testapis.extensions.no_partial
        .PartialableInputMessage();
      output.id = stringToNumber(input.id);
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NoPartialInputMessageInput = Object.assign(
  inputObjectType({
    name: "NoPartialInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        name: "NoPartialInputMessage",
        package: "testapis.extensions.no_partial",
        options: { "[graphql.input_type]": { noPartial: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NoPartialInputMessageInput"],
    ): testapis.extensions.no_partial.NoPartialInputMessage => {
      const output = new testapis.extensions.no_partial.NoPartialInputMessage();
      output.id = stringToNumber(input.id);
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/no_partial/no_partial_pb_nexus.ts",
  },
]
`;

exports[`'testapis.extensions.no_partial' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import { inputObjectType, nonNull, objectType } from "nexus";
import { stringToNumber } from "proto-nexus";
import {
  NoPartialInputMessage as NoPartialInputMessage3,
  ParentMessage as ParentMessage1,
  PartialableInputMessage as PartialableInputMessage2,
} from "./testapis/extensions/no_partial/no_partial_pb";

export type testapis$extensions$no_partial$ParentMessage = ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("partialableInputMessage", {
      type: nonNull("PartialableInputMessage"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getPartialableInputMessage();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "partialable_input_message",
          typeFullName:
            "testapis.extensions.no_partial.PartialableInputMessage",
        },
      },
    });
    t.field("noPartialInputMessage", {
      type: nonNull("NoPartialInputMessage"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getNoPartialInputMessage();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "no_partial_input_message",
          typeFullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$ParentMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.ParentMessage",
      name: "ParentMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});

export type testapis$extensions$no_partial$PartialableInputMessage =
  PartialableInputMessage2;
export const PartialableInputMessage = objectType({
  name: "PartialableInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PartialableInputMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$PartialableInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.PartialableInputMessage",
      name: "PartialableInputMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});

export type testapis$extensions$no_partial$NoPartialInputMessage =
  NoPartialInputMessage3;
export const NoPartialInputMessage = objectType({
  name: "NoPartialInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NoPartialInputMessage3;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$NoPartialInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
      name: "NoPartialInputMessage",
      package: "testapis.extensions.no_partial",
      options: { "[graphql.input_type]": { noPartial: true } },
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("partialableInputMessage", {
        type: nonNull("PartialableInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "partialable_input_message",
            typeFullName:
              "testapis.extensions.no_partial.PartialableInputMessage",
          },
        },
      });
      t.field("noPartialInputMessage", {
        type: nonNull("NoPartialInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "no_partial_input_message",
            typeFullName:
              "testapis.extensions.no_partial.NoPartialInputMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.ParentMessage",
        name: "ParentMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      output.setPartialableInputMessage(
        PartialableInputMessageInput.toProto(input.partialableInputMessage),
      );
      output.setNoPartialInputMessage(
        NoPartialInputMessageInput.toProto(input.noPartialInputMessage),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        partialableInputMessage: {
          type: nonNull("PartialableInputMessageInput"),
          extensions: {
            protobufField: {
              name: "partialable_input_message",
              typeFullName:
                "testapis.extensions.no_partial.PartialableInputMessage",
            },
          },
        },
        noPartialInputMessage: {
          type: nonNull("NoPartialInputMessageInput"),
          extensions: {
            protobufField: {
              name: "no_partial_input_message",
              typeFullName:
                "testapis.extensions.no_partial.NoPartialInputMessage",
            },
          },
        },
      },
    },
  },
);

export const PartialableInputMessageInput = Object.assign(
  inputObjectType({
    name: "PartialableInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.PartialableInputMessage",
        name: "PartialableInputMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PartialableInputMessageInput"],
    ): PartialableInputMessage2 => {
      const output = new PartialableInputMessage2();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NoPartialInputMessageInput = Object.assign(
  inputObjectType({
    name: "NoPartialInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        name: "NoPartialInputMessage",
        package: "testapis.extensions.no_partial",
        options: { "[graphql.input_type]": { noPartial: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NoPartialInputMessageInput"],
    ): NoPartialInputMessage3 => {
      const output = new NoPartialInputMessage3();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/extensions/no_partial/no_partial_pb_nexus.ts",
  },
]
`;

exports[`'testapis.field_behavior' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

/* eslint-disable */

import { FieldBehaviorComentsMessage as FieldBehaviorComentsMessage1 } from "@testapis/proto/testapis/field_behavior/comments_pb";
import { nonNull, nullable, objectType } from "nexus";
import { FieldBehaviorComentsMessagePost } from "./FieldBehaviorComentsMessagePost.nexus";

export type testapis$field_behavior$FieldBehaviorComentsMessage =
  FieldBehaviorComentsMessage1;
export const FieldBehaviorComentsMessage = objectType({
  name: "FieldBehaviorComentsMessage",
  definition: (t) => {
    t.field("requiredField", {
      type: nonNull(FieldBehaviorComentsMessagePost),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("requiredOutputOnlyField", {
      type: nonNull(FieldBehaviorComentsMessagePost),
      description: "Required. Output only.",
      resolve: (source) => {
        const value = source.getRequiredOutputOnlyField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_output_only_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("outputOnlyRequiredField", {
      type: nonNull(FieldBehaviorComentsMessagePost),
      description: "Output only. Required.",
      resolve: (source) => {
        const value = source.getOutputOnlyRequiredField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "output_only_required_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("outputOnlyField", {
      type: nullable(FieldBehaviorComentsMessagePost),
      description: "Output only.",
      resolve: (source) => {
        const value = source.getOutputOnlyField();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "output_only_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof FieldBehaviorComentsMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$field_behavior$FieldBehaviorComentsMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.field_behavior.FieldBehaviorComentsMessage",
      name: "FieldBehaviorComentsMessage",
      package: "testapis.field_behavior",
    },
  },
});
",
    "name": "testapis/field_behavior/FieldBehaviorComentsMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

/* eslint-disable */

import { FieldBehaviorComentsMessage } from "@testapis/proto/testapis/field_behavior/comments_pb";
import { nonNull, objectType } from "nexus";

export type testapis$field_behavior$FieldBehaviorComentsMessage$Post =
  FieldBehaviorComentsMessage.Post;
export const FieldBehaviorComentsMessagePost = objectType({
  name: "FieldBehaviorComentsMessagePost",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof FieldBehaviorComentsMessage.Post;
  },
  sourceType: {
    module: __filename,
    export: "testapis$field_behavior$FieldBehaviorComentsMessage$Post",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
      name: "Post",
      package: "testapis.field_behavior",
    },
  },
});
",
    "name": "testapis/field_behavior/FieldBehaviorComentsMessagePost.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

/* eslint-disable */

import { FieldBehaviorComentsMessage } from "@testapis/proto/testapis/field_behavior/comments_pb";
import { inputObjectType, nonNull, nullable } from "nexus";
import { FieldBehaviorComentsMessagePostInput } from "./FieldBehaviorComentsMessagePostInput.nexus";

export const FieldBehaviorComentsMessageInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessageInput",
    definition: (t) => {
      t.field("requiredField", {
        type: nonNull(FieldBehaviorComentsMessagePostInput),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("requiredInputOnlyField", {
        type: nonNull(FieldBehaviorComentsMessagePostInput),
        description: "Required. Input only.",
        extensions: {
          protobufField: {
            name: "required_input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyRequiredField", {
        type: nonNull(FieldBehaviorComentsMessagePostInput),
        description: "Input only. Required.",
        extensions: {
          protobufField: {
            name: "input_only_required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyField", {
        type: nullable(FieldBehaviorComentsMessagePostInput),
        description: "Input only.",
        extensions: {
          protobufField: {
            name: "input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage",
        name: "FieldBehaviorComentsMessage",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["FieldBehaviorComentsMessageInput"],
    ): FieldBehaviorComentsMessage => {
      const output = new FieldBehaviorComentsMessage();
      output.setRequiredField(
        FieldBehaviorComentsMessagePostInput.toProto(input.requiredField),
      );
      output.setRequiredInputOnlyField(
        FieldBehaviorComentsMessagePostInput.toProto(
          input.requiredInputOnlyField,
        ),
      );
      output.setInputOnlyRequiredField(
        FieldBehaviorComentsMessagePostInput.toProto(
          input.inputOnlyRequiredField,
        ),
      );
      if (input.inputOnlyField != null) {
        output.setInputOnlyField(
          FieldBehaviorComentsMessagePostInput.toProto(input.inputOnlyField),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredField: {
          type: nonNull(FieldBehaviorComentsMessagePostInput),
          extensions: {
            protobufField: {
              name: "required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        requiredInputOnlyField: {
          type: nonNull(FieldBehaviorComentsMessagePostInput),
          extensions: {
            protobufField: {
              name: "required_input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyRequiredField: {
          type: nonNull(FieldBehaviorComentsMessagePostInput),
          extensions: {
            protobufField: {
              name: "input_only_required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyField: {
          type: nullable(FieldBehaviorComentsMessagePostInput),
          extensions: {
            protobufField: {
              name: "input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/field_behavior/FieldBehaviorComentsMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

/* eslint-disable */

import { FieldBehaviorComentsMessage } from "@testapis/proto/testapis/field_behavior/comments_pb";
import { inputObjectType, nonNull } from "nexus";

export const FieldBehaviorComentsMessagePostInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessagePostInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        name: "Post",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["FieldBehaviorComentsMessagePostInput"],
    ): FieldBehaviorComentsMessage.Post => {
      const output = new FieldBehaviorComentsMessage.Post();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/field_behavior/FieldBehaviorComentsMessagePostInput.nexus.ts",
  },
]
`;

exports[`'testapis.field_behavior' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

/* eslint-disable */

import { FieldBehaviorComentsMessage as FieldBehaviorComentsMessage1 } from "@testapis/proto/testapis/field_behavior/comments_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";

export type testapis$field_behavior$FieldBehaviorComentsMessage =
  FieldBehaviorComentsMessage1;
export const FieldBehaviorComentsMessage = objectType({
  name: "FieldBehaviorComentsMessage",
  definition: (t) => {
    t.field("requiredField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("requiredOutputOnlyField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Required. Output only.",
      resolve: (source) => {
        const value = source.getRequiredOutputOnlyField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_output_only_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("outputOnlyRequiredField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Output only. Required.",
      resolve: (source) => {
        const value = source.getOutputOnlyRequiredField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "output_only_required_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("outputOnlyField", {
      type: nullable("FieldBehaviorComentsMessagePost"),
      description: "Output only.",
      resolve: (source) => {
        const value = source.getOutputOnlyField();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "output_only_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof FieldBehaviorComentsMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$field_behavior$FieldBehaviorComentsMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.field_behavior.FieldBehaviorComentsMessage",
      name: "FieldBehaviorComentsMessage",
      package: "testapis.field_behavior",
    },
  },
});

export type testapis$field_behavior$FieldBehaviorComentsMessage$Post =
  FieldBehaviorComentsMessage1.Post;
export const FieldBehaviorComentsMessagePost = objectType({
  name: "FieldBehaviorComentsMessagePost",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof FieldBehaviorComentsMessage1.Post;
  },
  sourceType: {
    module: __filename,
    export: "testapis$field_behavior$FieldBehaviorComentsMessage$Post",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
      name: "Post",
      package: "testapis.field_behavior",
    },
  },
});

export const FieldBehaviorComentsMessageInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessageInput",
    definition: (t) => {
      t.field("requiredField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("requiredInputOnlyField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Required. Input only.",
        extensions: {
          protobufField: {
            name: "required_input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyRequiredField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Input only. Required.",
        extensions: {
          protobufField: {
            name: "input_only_required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyField", {
        type: nullable("FieldBehaviorComentsMessagePostInput"),
        description: "Input only.",
        extensions: {
          protobufField: {
            name: "input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage",
        name: "FieldBehaviorComentsMessage",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["FieldBehaviorComentsMessageInput"],
    ): FieldBehaviorComentsMessage1 => {
      const output = new FieldBehaviorComentsMessage1();
      output.setRequiredField(
        FieldBehaviorComentsMessagePostInput.toProto(input.requiredField),
      );
      output.setRequiredInputOnlyField(
        FieldBehaviorComentsMessagePostInput.toProto(
          input.requiredInputOnlyField,
        ),
      );
      output.setInputOnlyRequiredField(
        FieldBehaviorComentsMessagePostInput.toProto(
          input.inputOnlyRequiredField,
        ),
      );
      if (input.inputOnlyField != null) {
        output.setInputOnlyField(
          FieldBehaviorComentsMessagePostInput.toProto(input.inputOnlyField),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        requiredInputOnlyField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "required_input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyRequiredField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "input_only_required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyField: {
          type: nullable("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
      },
    },
  },
);

export const FieldBehaviorComentsMessagePostInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessagePostInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        name: "Post",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["FieldBehaviorComentsMessagePostInput"],
    ): FieldBehaviorComentsMessage1.Post => {
      const output = new FieldBehaviorComentsMessage1.Post();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/field_behavior/comments_pb_nexus.ts",
  },
]
`;

exports[`'testapis.field_behavior' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

/* eslint-disable */

import { FieldBehaviorComentsMessage as FieldBehaviorComentsMessage1 } from "@testapis/proto/testapis/field_behavior/comments_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";

export type testapis$field_behavior$FieldBehaviorComentsMessage =
  FieldBehaviorComentsMessage1;
export const FieldBehaviorComentsMessage = objectType({
  name: "FieldBehaviorComentsMessage",
  definition: (t) => {
    t.field("requiredField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("requiredOutputOnlyField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Required. Output only.",
      resolve: (source) => {
        const value = source.getRequiredOutputOnlyField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_output_only_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("outputOnlyRequiredField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Output only. Required.",
      resolve: (source) => {
        const value = source.getOutputOnlyRequiredField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "output_only_required_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("outputOnlyField", {
      type: nullable("FieldBehaviorComentsMessagePost"),
      description: "Output only.",
      resolve: (source) => {
        const value = source.getOutputOnlyField();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "output_only_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof FieldBehaviorComentsMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$field_behavior$FieldBehaviorComentsMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.field_behavior.FieldBehaviorComentsMessage",
      name: "FieldBehaviorComentsMessage",
      package: "testapis.field_behavior",
    },
  },
});

export type testapis$field_behavior$FieldBehaviorComentsMessage$Post =
  FieldBehaviorComentsMessage1.Post;
export const FieldBehaviorComentsMessagePost = objectType({
  name: "FieldBehaviorComentsMessagePost",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof FieldBehaviorComentsMessage1.Post;
  },
  sourceType: {
    module: __filename,
    export: "testapis$field_behavior$FieldBehaviorComentsMessage$Post",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
      name: "Post",
      package: "testapis.field_behavior",
    },
  },
});

export const FieldBehaviorComentsMessageInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessageInput",
    definition: (t) => {
      t.field("requiredField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("requiredInputOnlyField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Required. Input only.",
        extensions: {
          protobufField: {
            name: "required_input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyRequiredField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Input only. Required.",
        extensions: {
          protobufField: {
            name: "input_only_required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyField", {
        type: nullable("FieldBehaviorComentsMessagePostInput"),
        description: "Input only.",
        extensions: {
          protobufField: {
            name: "input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage",
        name: "FieldBehaviorComentsMessage",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["FieldBehaviorComentsMessageInput"],
    ): FieldBehaviorComentsMessage1 => {
      const output = new FieldBehaviorComentsMessage1();
      output.setRequiredField(
        FieldBehaviorComentsMessagePostInput.toProto(input.requiredField),
      );
      output.setRequiredInputOnlyField(
        FieldBehaviorComentsMessagePostInput.toProto(
          input.requiredInputOnlyField,
        ),
      );
      output.setInputOnlyRequiredField(
        FieldBehaviorComentsMessagePostInput.toProto(
          input.inputOnlyRequiredField,
        ),
      );
      if (input.inputOnlyField != null) {
        output.setInputOnlyField(
          FieldBehaviorComentsMessagePostInput.toProto(input.inputOnlyField),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        requiredInputOnlyField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "required_input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyRequiredField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "input_only_required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyField: {
          type: nullable("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
      },
    },
  },
);

export const FieldBehaviorComentsMessagePartialInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessagePartialInput",
    definition: (t) => {
      t.field("requiredField", {
        type: nullable("FieldBehaviorComentsMessagePostPartialInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("requiredInputOnlyField", {
        type: nullable("FieldBehaviorComentsMessagePostPartialInput"),
        description: "Required. Input only.",
        extensions: {
          protobufField: {
            name: "required_input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyRequiredField", {
        type: nullable("FieldBehaviorComentsMessagePostPartialInput"),
        description: "Input only. Required.",
        extensions: {
          protobufField: {
            name: "input_only_required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyField", {
        type: nullable("FieldBehaviorComentsMessagePostPartialInput"),
        description: "Input only.",
        extensions: {
          protobufField: {
            name: "input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage",
        name: "FieldBehaviorComentsMessage",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["FieldBehaviorComentsMessagePartialInput"],
    ): FieldBehaviorComentsMessage1 => {
      const output = new FieldBehaviorComentsMessage1();
      if (input.requiredField != null) {
        output.setRequiredField(
          FieldBehaviorComentsMessagePostPartialInput.toProto(
            input.requiredField,
          ),
        );
      }
      if (input.requiredInputOnlyField != null) {
        output.setRequiredInputOnlyField(
          FieldBehaviorComentsMessagePostPartialInput.toProto(
            input.requiredInputOnlyField,
          ),
        );
      }
      if (input.inputOnlyRequiredField != null) {
        output.setInputOnlyRequiredField(
          FieldBehaviorComentsMessagePostPartialInput.toProto(
            input.inputOnlyRequiredField,
          ),
        );
      }
      if (input.inputOnlyField != null) {
        output.setInputOnlyField(
          FieldBehaviorComentsMessagePostPartialInput.toProto(
            input.inputOnlyField,
          ),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredField: {
          type: nullable("FieldBehaviorComentsMessagePostPartialInput"),
          extensions: {
            protobufField: {
              name: "required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        requiredInputOnlyField: {
          type: nullable("FieldBehaviorComentsMessagePostPartialInput"),
          extensions: {
            protobufField: {
              name: "required_input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyRequiredField: {
          type: nullable("FieldBehaviorComentsMessagePostPartialInput"),
          extensions: {
            protobufField: {
              name: "input_only_required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyField: {
          type: nullable("FieldBehaviorComentsMessagePostPartialInput"),
          extensions: {
            protobufField: {
              name: "input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
      },
    },
  },
);

export const FieldBehaviorComentsMessagePostInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessagePostInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        name: "Post",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["FieldBehaviorComentsMessagePostInput"],
    ): FieldBehaviorComentsMessage1.Post => {
      const output = new FieldBehaviorComentsMessage1.Post();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const FieldBehaviorComentsMessagePostPartialInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessagePostPartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        name: "Post",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input:
        NexusGen["inputTypes"]["FieldBehaviorComentsMessagePostPartialInput"],
    ): FieldBehaviorComentsMessage1.Post => {
      const output = new FieldBehaviorComentsMessage1.Post();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/field_behavior/comments_pb_nexus.ts",
  },
]
`;

exports[`'testapis.field_behavior' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/field_behavior";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";

export type testapis$field_behavior$FieldBehaviorComentsMessage =
  testapis.field_behavior.FieldBehaviorComentsMessage;
export const FieldBehaviorComentsMessage = objectType({
  name: "FieldBehaviorComentsMessage",
  definition: (t) => {
    t.field("requiredField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Required.",
      resolve: (source) => {
        const value = source.requiredField;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("requiredOutputOnlyField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Required. Output only.",
      resolve: (source) => {
        const value = source.requiredOutputOnlyField;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_output_only_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("outputOnlyRequiredField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Output only. Required.",
      resolve: (source) => {
        const value = source.outputOnlyRequiredField;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "output_only_required_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("outputOnlyField", {
      type: nullable("FieldBehaviorComentsMessagePost"),
      description: "Output only.",
      resolve: (source) => {
        const value = source.outputOnlyField;
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "output_only_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.field_behavior.FieldBehaviorComentsMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$field_behavior$FieldBehaviorComentsMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.field_behavior.FieldBehaviorComentsMessage",
      name: "FieldBehaviorComentsMessage",
      package: "testapis.field_behavior",
    },
  },
});

export type testapis$field_behavior$FieldBehaviorComentsMessage$Post =
  testapis.field_behavior.FieldBehaviorComentsMessage.Post;
export const FieldBehaviorComentsMessagePost = objectType({
  name: "FieldBehaviorComentsMessagePost",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof
      testapis.field_behavior.FieldBehaviorComentsMessage.Post;
  },
  sourceType: {
    module: __filename,
    export: "testapis$field_behavior$FieldBehaviorComentsMessage$Post",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
      name: "Post",
      package: "testapis.field_behavior",
    },
  },
});

export const FieldBehaviorComentsMessageInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessageInput",
    definition: (t) => {
      t.field("requiredField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("requiredInputOnlyField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Required. Input only.",
        extensions: {
          protobufField: {
            name: "required_input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyRequiredField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Input only. Required.",
        extensions: {
          protobufField: {
            name: "input_only_required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyField", {
        type: nullable("FieldBehaviorComentsMessagePostInput"),
        description: "Input only.",
        extensions: {
          protobufField: {
            name: "input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage",
        name: "FieldBehaviorComentsMessage",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["FieldBehaviorComentsMessageInput"],
    ): testapis.field_behavior.FieldBehaviorComentsMessage => {
      const output = new testapis.field_behavior.FieldBehaviorComentsMessage();
      output.requiredField = FieldBehaviorComentsMessagePostInput.toProto(
        input.requiredField,
      );
      output.requiredInputOnlyField = FieldBehaviorComentsMessagePostInput
        .toProto(input.requiredInputOnlyField);
      output.inputOnlyRequiredField = FieldBehaviorComentsMessagePostInput
        .toProto(input.inputOnlyRequiredField);
      if (input.inputOnlyField != null) {
        output.inputOnlyField = FieldBehaviorComentsMessagePostInput.toProto(
          input.inputOnlyField,
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        requiredInputOnlyField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "required_input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyRequiredField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "input_only_required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyField: {
          type: nullable("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
      },
    },
  },
);

export const FieldBehaviorComentsMessagePostInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessagePostInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        name: "Post",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["FieldBehaviorComentsMessagePostInput"],
    ): testapis.field_behavior.FieldBehaviorComentsMessage.Post => {
      const output = new testapis.field_behavior.FieldBehaviorComentsMessage
        .Post();
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/field_behavior/comments_pb_nexus.ts",
  },
]
`;

exports[`'testapis.field_behavior' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/field_behavior/comments.proto

/* eslint-disable */

import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { FieldBehaviorComentsMessage as FieldBehaviorComentsMessage1 } from "./testapis/field_behavior/comments_pb";

export type testapis$field_behavior$FieldBehaviorComentsMessage =
  FieldBehaviorComentsMessage1;
export const FieldBehaviorComentsMessage = objectType({
  name: "FieldBehaviorComentsMessage",
  definition: (t) => {
    t.field("requiredField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("requiredOutputOnlyField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Required. Output only.",
      resolve: (source) => {
        const value = source.getRequiredOutputOnlyField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_output_only_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("outputOnlyRequiredField", {
      type: nonNull("FieldBehaviorComentsMessagePost"),
      description: "Output only. Required.",
      resolve: (source) => {
        const value = source.getOutputOnlyRequiredField();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "output_only_required_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
    t.field("outputOnlyField", {
      type: nullable("FieldBehaviorComentsMessagePost"),
      description: "Output only.",
      resolve: (source) => {
        const value = source.getOutputOnlyField();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "output_only_field",
          typeFullName:
            "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof FieldBehaviorComentsMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$field_behavior$FieldBehaviorComentsMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.field_behavior.FieldBehaviorComentsMessage",
      name: "FieldBehaviorComentsMessage",
      package: "testapis.field_behavior",
    },
  },
});

export type testapis$field_behavior$FieldBehaviorComentsMessage$Post =
  FieldBehaviorComentsMessage1.Post;
export const FieldBehaviorComentsMessagePost = objectType({
  name: "FieldBehaviorComentsMessagePost",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof FieldBehaviorComentsMessage1.Post;
  },
  sourceType: {
    module: __filename,
    export: "testapis$field_behavior$FieldBehaviorComentsMessage$Post",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
      name: "Post",
      package: "testapis.field_behavior",
    },
  },
});

export const FieldBehaviorComentsMessageInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessageInput",
    definition: (t) => {
      t.field("requiredField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("requiredInputOnlyField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Required. Input only.",
        extensions: {
          protobufField: {
            name: "required_input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyRequiredField", {
        type: nonNull("FieldBehaviorComentsMessagePostInput"),
        description: "Input only. Required.",
        extensions: {
          protobufField: {
            name: "input_only_required_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
      t.field("inputOnlyField", {
        type: nullable("FieldBehaviorComentsMessagePostInput"),
        description: "Input only.",
        extensions: {
          protobufField: {
            name: "input_only_field",
            typeFullName:
              "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage",
        name: "FieldBehaviorComentsMessage",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["FieldBehaviorComentsMessageInput"],
    ): FieldBehaviorComentsMessage1 => {
      const output = new FieldBehaviorComentsMessage1();
      output.setRequiredField(
        FieldBehaviorComentsMessagePostInput.toProto(input.requiredField),
      );
      output.setRequiredInputOnlyField(
        FieldBehaviorComentsMessagePostInput.toProto(
          input.requiredInputOnlyField,
        ),
      );
      output.setInputOnlyRequiredField(
        FieldBehaviorComentsMessagePostInput.toProto(
          input.inputOnlyRequiredField,
        ),
      );
      if (input.inputOnlyField != null) {
        output.setInputOnlyField(
          FieldBehaviorComentsMessagePostInput.toProto(input.inputOnlyField),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        requiredInputOnlyField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "required_input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyRequiredField: {
          type: nonNull("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "input_only_required_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
        inputOnlyField: {
          type: nullable("FieldBehaviorComentsMessagePostInput"),
          extensions: {
            protobufField: {
              name: "input_only_field",
              typeFullName:
                "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
            },
          },
        },
      },
    },
  },
);

export const FieldBehaviorComentsMessagePostInput = Object.assign(
  inputObjectType({
    name: "FieldBehaviorComentsMessagePostInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.field_behavior.FieldBehaviorComentsMessage.Post",
        name: "Post",
        package: "testapis.field_behavior",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["FieldBehaviorComentsMessagePostInput"],
    ): FieldBehaviorComentsMessage1.Post => {
      const output = new FieldBehaviorComentsMessage1.Post();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/field_behavior/comments_pb_nexus.ts",
  },
]
`;

exports[`'testapis.multipkgs' > generates files by plugin 'with graphql_type layout' 1`] = `[]`;

exports[`'testapis.multipkgs' > generates files by plugin 'with import prefix' 1`] = `[]`;

exports[`'testapis.multipkgs' > generates files by plugin 'with partial inputs' 1`] = `[]`;

exports[`'testapis.multipkgs' > generates files by plugin 'with use_protobufjs' 1`] = `[]`;

exports[`'testapis.multipkgs' > generates files by plugin 'without import prefix' 1`] = `[]`;

exports[`'testapis.multipkgs.subpkg1' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg1/types.proto

/* eslint-disable */

import { SubpkgMessage as SubpkgMessage1 } from "@testapis/proto/testapis/multipkgs/subpkg1/types_pb";
import { nonNull, objectType } from "nexus";

export type testapis$multipkgs$subpkg1$SubpkgMessage = SubpkgMessage1;
export const SubpkgMessage = objectType({
  name: "SubpkgMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof SubpkgMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$multipkgs$subpkg1$SubpkgMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
      name: "SubpkgMessage",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});
",
    "name": "testapis/multipkgs/subpkg1/SubpkgMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg1/types.proto

/* eslint-disable */

import { SubpkgMessage } from "@testapis/proto/testapis/multipkgs/subpkg1/types_pb";
import { inputObjectType, nonNull } from "nexus";

export const SubpkgMessageInput = Object.assign(
  inputObjectType({
    name: "SubpkgMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
        name: "SubpkgMessage",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SubpkgMessageInput"],
    ): SubpkgMessage => {
      const output = new SubpkgMessage();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/multipkgs/subpkg1/SubpkgMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg1/types.proto

/* eslint-disable */

import { enumType } from "nexus";

export const SubpkgEnum = enumType({
  name: "SubpkgEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "SubpkgEnum",
      fullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});
",
    "name": "testapis/multipkgs/subpkg1/SubpkgEnum.nexus.ts",
  },
]
`;

exports[`'testapis.multipkgs.subpkg1' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg1/types.proto

/* eslint-disable */

import { SubpkgMessage as SubpkgMessage1 } from "@testapis/proto/testapis/multipkgs/subpkg1/types_pb";
import { enumType, inputObjectType, nonNull, objectType } from "nexus";

export type testapis$multipkgs$subpkg1$SubpkgMessage = SubpkgMessage1;
export const SubpkgMessage = objectType({
  name: "SubpkgMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof SubpkgMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$multipkgs$subpkg1$SubpkgMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
      name: "SubpkgMessage",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});

export const SubpkgMessageInput = Object.assign(
  inputObjectType({
    name: "SubpkgMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
        name: "SubpkgMessage",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SubpkgMessageInput"],
    ): SubpkgMessage1 => {
      const output = new SubpkgMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const SubpkgEnum = enumType({
  name: "SubpkgEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "SubpkgEnum",
      fullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});
",
    "name": "testapis/multipkgs/subpkg1/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.multipkgs.subpkg1' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg1/types.proto

/* eslint-disable */

import { SubpkgMessage as SubpkgMessage1 } from "@testapis/proto/testapis/multipkgs/subpkg1/types_pb";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";

export type testapis$multipkgs$subpkg1$SubpkgMessage = SubpkgMessage1;
export const SubpkgMessage = objectType({
  name: "SubpkgMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof SubpkgMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$multipkgs$subpkg1$SubpkgMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
      name: "SubpkgMessage",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});

export const SubpkgMessageInput = Object.assign(
  inputObjectType({
    name: "SubpkgMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
        name: "SubpkgMessage",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SubpkgMessageInput"],
    ): SubpkgMessage1 => {
      const output = new SubpkgMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const SubpkgMessagePartialInput = Object.assign(
  inputObjectType({
    name: "SubpkgMessagePartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
        name: "SubpkgMessage",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SubpkgMessagePartialInput"],
    ): SubpkgMessage1 => {
      const output = new SubpkgMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const SubpkgEnum = enumType({
  name: "SubpkgEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "SubpkgEnum",
      fullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});
",
    "name": "testapis/multipkgs/subpkg1/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.multipkgs.subpkg1' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg1/types.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/multipkgs/subpkg1";
import { enumType, inputObjectType, nonNull, objectType } from "nexus";

export type testapis$multipkgs$subpkg1$SubpkgMessage =
  testapis.multipkgs.subpkg1.SubpkgMessage;
export const SubpkgMessage = objectType({
  name: "SubpkgMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.multipkgs.subpkg1.SubpkgMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$multipkgs$subpkg1$SubpkgMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
      name: "SubpkgMessage",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});

export const SubpkgMessageInput = Object.assign(
  inputObjectType({
    name: "SubpkgMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
        name: "SubpkgMessage",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SubpkgMessageInput"],
    ): testapis.multipkgs.subpkg1.SubpkgMessage => {
      const output = new testapis.multipkgs.subpkg1.SubpkgMessage();
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const SubpkgEnum = enumType({
  name: "SubpkgEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "SubpkgEnum",
      fullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});
",
    "name": "testapis/multipkgs/subpkg1/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.multipkgs.subpkg1' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg1/types.proto

/* eslint-disable */

import { enumType, inputObjectType, nonNull, objectType } from "nexus";
import { SubpkgMessage as SubpkgMessage1 } from "./testapis/multipkgs/subpkg1/types_pb";

export type testapis$multipkgs$subpkg1$SubpkgMessage = SubpkgMessage1;
export const SubpkgMessage = objectType({
  name: "SubpkgMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof SubpkgMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$multipkgs$subpkg1$SubpkgMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
      name: "SubpkgMessage",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});

export const SubpkgMessageInput = Object.assign(
  inputObjectType({
    name: "SubpkgMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
        name: "SubpkgMessage",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["SubpkgMessageInput"],
    ): SubpkgMessage1 => {
      const output = new SubpkgMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const SubpkgEnum = enumType({
  name: "SubpkgEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "SubpkgEnum",
      fullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});
",
    "name": "testapis/multipkgs/subpkg1/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.multipkgs.subpkg2' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg2/types.proto

/* eslint-disable */

import { SubpkgEnum as SubpkgEnum2 } from "@testapis/proto/testapis/multipkgs/subpkg1/types_pb";
import { MessageWithSubpkg as MessageWithSubpkg1 } from "@testapis/proto/testapis/multipkgs/subpkg2/types_pb";
import { nullable, objectType } from "nexus";
import { SubpkgEnum } from "../subpkg1/SubpkgEnum.nexus";
import { SubpkgMessage } from "../subpkg1/SubpkgMessage.nexus";

export type testapis$multipkgs$subpkg1$MessageWithSubpkg = MessageWithSubpkg1;
export const MessageWithSubpkg = objectType({
  name: "MessageWithSubpkg",
  definition: (t) => {
    t.field("message", {
      type: nullable(SubpkgMessage),
      resolve: (source) => {
        const value = source.getMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "message",
          typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
        },
      },
    });
    t.field("enum", {
      type: nullable(SubpkgEnum),
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === SubpkgEnum2.SUBPKG_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWithSubpkg1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$multipkgs$subpkg1$MessageWithSubpkg",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.multipkgs.subpkg1.MessageWithSubpkg",
      name: "MessageWithSubpkg",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});
",
    "name": "testapis/multipkgs/subpkg2/MessageWithSubpkg.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg2/types.proto

/* eslint-disable */

import { MessageWithSubpkg } from "@testapis/proto/testapis/multipkgs/subpkg2/types_pb";
import { inputObjectType, nullable } from "nexus";
import { SubpkgEnum } from "../subpkg1/SubpkgEnum.nexus";
import { SubpkgMessageInput } from "../subpkg1/SubpkgMessageInput.nexus";

export const MessageWithSubpkgInput = Object.assign(
  inputObjectType({
    name: "MessageWithSubpkgInput",
    definition: (t) => {
      t.field("message", {
        type: nullable(SubpkgMessageInput),
        extensions: {
          protobufField: {
            name: "message",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
          },
        },
      });
      t.field("enum", {
        type: nullable(SubpkgEnum),
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.MessageWithSubpkg",
        name: "MessageWithSubpkg",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithSubpkgInput"],
    ): MessageWithSubpkg => {
      const output = new MessageWithSubpkg();
      if (input.message != null) {
        output.setMessage(SubpkgMessageInput.toProto(input.message));
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        message: {
          type: nullable(SubpkgMessageInput),
          extensions: {
            protobufField: {
              name: "message",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
            },
          },
        },
        enum: {
          type: nullable(SubpkgEnum),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/multipkgs/subpkg2/MessageWithSubpkgInput.nexus.ts",
  },
]
`;

exports[`'testapis.multipkgs.subpkg2' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg2/types.proto

/* eslint-disable */

import { SubpkgEnum } from "@testapis/proto/testapis/multipkgs/subpkg1/types_pb";
import { MessageWithSubpkg as MessageWithSubpkg1 } from "@testapis/proto/testapis/multipkgs/subpkg2/types_pb";
import { inputObjectType, nullable, objectType } from "nexus";
import { SubpkgMessageInput } from "../subpkg1/types_pb_nexus";

export type testapis$multipkgs$subpkg1$MessageWithSubpkg = MessageWithSubpkg1;
export const MessageWithSubpkg = objectType({
  name: "MessageWithSubpkg",
  definition: (t) => {
    t.field("message", {
      type: nullable("SubpkgMessage"),
      resolve: (source) => {
        const value = source.getMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "message",
          typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
        },
      },
    });
    t.field("enum", {
      type: nullable("SubpkgEnum"),
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === SubpkgEnum.SUBPKG_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWithSubpkg1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$multipkgs$subpkg1$MessageWithSubpkg",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.multipkgs.subpkg1.MessageWithSubpkg",
      name: "MessageWithSubpkg",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});

export const MessageWithSubpkgInput = Object.assign(
  inputObjectType({
    name: "MessageWithSubpkgInput",
    definition: (t) => {
      t.field("message", {
        type: nullable("SubpkgMessageInput"),
        extensions: {
          protobufField: {
            name: "message",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
          },
        },
      });
      t.field("enum", {
        type: nullable("SubpkgEnum"),
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.MessageWithSubpkg",
        name: "MessageWithSubpkg",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithSubpkgInput"],
    ): MessageWithSubpkg1 => {
      const output = new MessageWithSubpkg1();
      if (input.message != null) {
        output.setMessage(SubpkgMessageInput.toProto(input.message));
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        message: {
          type: nullable("SubpkgMessageInput"),
          extensions: {
            protobufField: {
              name: "message",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
            },
          },
        },
        enum: {
          type: nullable("SubpkgEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/multipkgs/subpkg2/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.multipkgs.subpkg2' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg2/types.proto

/* eslint-disable */

import { SubpkgEnum } from "@testapis/proto/testapis/multipkgs/subpkg1/types_pb";
import { MessageWithSubpkg as MessageWithSubpkg1 } from "@testapis/proto/testapis/multipkgs/subpkg2/types_pb";
import { inputObjectType, nullable, objectType } from "nexus";
import {
  SubpkgMessageInput,
  SubpkgMessagePartialInput,
} from "../subpkg1/types_pb_nexus";

export type testapis$multipkgs$subpkg1$MessageWithSubpkg = MessageWithSubpkg1;
export const MessageWithSubpkg = objectType({
  name: "MessageWithSubpkg",
  definition: (t) => {
    t.field("message", {
      type: nullable("SubpkgMessage"),
      resolve: (source) => {
        const value = source.getMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "message",
          typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
        },
      },
    });
    t.field("enum", {
      type: nullable("SubpkgEnum"),
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === SubpkgEnum.SUBPKG_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWithSubpkg1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$multipkgs$subpkg1$MessageWithSubpkg",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.multipkgs.subpkg1.MessageWithSubpkg",
      name: "MessageWithSubpkg",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});

export const MessageWithSubpkgInput = Object.assign(
  inputObjectType({
    name: "MessageWithSubpkgInput",
    definition: (t) => {
      t.field("message", {
        type: nullable("SubpkgMessageInput"),
        extensions: {
          protobufField: {
            name: "message",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
          },
        },
      });
      t.field("enum", {
        type: nullable("SubpkgEnum"),
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.MessageWithSubpkg",
        name: "MessageWithSubpkg",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithSubpkgInput"],
    ): MessageWithSubpkg1 => {
      const output = new MessageWithSubpkg1();
      if (input.message != null) {
        output.setMessage(SubpkgMessageInput.toProto(input.message));
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        message: {
          type: nullable("SubpkgMessageInput"),
          extensions: {
            protobufField: {
              name: "message",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
            },
          },
        },
        enum: {
          type: nullable("SubpkgEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
            },
          },
        },
      },
    },
  },
);

export const MessageWithSubpkgPartialInput = Object.assign(
  inputObjectType({
    name: "MessageWithSubpkgPartialInput",
    definition: (t) => {
      t.field("message", {
        type: nullable("SubpkgMessagePartialInput"),
        extensions: {
          protobufField: {
            name: "message",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
          },
        },
      });
      t.field("enum", {
        type: nullable("SubpkgEnum"),
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.MessageWithSubpkg",
        name: "MessageWithSubpkg",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithSubpkgPartialInput"],
    ): MessageWithSubpkg1 => {
      const output = new MessageWithSubpkg1();
      if (input.message != null) {
        output.setMessage(SubpkgMessagePartialInput.toProto(input.message));
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        message: {
          type: nullable("SubpkgMessagePartialInput"),
          extensions: {
            protobufField: {
              name: "message",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
            },
          },
        },
        enum: {
          type: nullable("SubpkgEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/multipkgs/subpkg2/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.multipkgs.subpkg2' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg2/types.proto

/* eslint-disable */

import { testapis as testapis1 } from "@testapis/proto/testapis/multipkgs/subpkg1";
import { testapis } from "@testapis/proto/testapis/multipkgs/subpkg2";
import { inputObjectType, nullable, objectType } from "nexus";
import { SubpkgMessageInput } from "../subpkg1/types_pb_nexus";

export type testapis$multipkgs$subpkg1$MessageWithSubpkg =
  testapis.multipkgs.subpkg1.MessageWithSubpkg;
export const MessageWithSubpkg = objectType({
  name: "MessageWithSubpkg",
  definition: (t) => {
    t.field("message", {
      type: nullable("SubpkgMessage"),
      resolve: (source) => {
        const value = source.message;
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "message",
          typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
        },
      },
    });
    t.field("enum", {
      type: nullable("SubpkgEnum"),
      resolve: (source) => {
        const value = source.enum;
        if (value == null) {
          return null;
        }
        if (
          value ===
            testapis1.multipkgs.subpkg1.SubpkgEnum.SUBPKG_ENUM_UNSPECIFIED
        ) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.multipkgs.subpkg1.MessageWithSubpkg;
  },
  sourceType: {
    module: __filename,
    export: "testapis$multipkgs$subpkg1$MessageWithSubpkg",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.multipkgs.subpkg1.MessageWithSubpkg",
      name: "MessageWithSubpkg",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});

export const MessageWithSubpkgInput = Object.assign(
  inputObjectType({
    name: "MessageWithSubpkgInput",
    definition: (t) => {
      t.field("message", {
        type: nullable("SubpkgMessageInput"),
        extensions: {
          protobufField: {
            name: "message",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
          },
        },
      });
      t.field("enum", {
        type: nullable("SubpkgEnum"),
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.MessageWithSubpkg",
        name: "MessageWithSubpkg",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithSubpkgInput"],
    ): testapis.multipkgs.subpkg1.MessageWithSubpkg => {
      const output = new testapis.multipkgs.subpkg1.MessageWithSubpkg();
      if (input.message != null) {
        output.message = SubpkgMessageInput.toProto(input.message);
      }
      if (input.enum != null) {
        output.enum = input.enum;
      }
      return output;
    },
    _protoNexus: {
      fields: {
        message: {
          type: nullable("SubpkgMessageInput"),
          extensions: {
            protobufField: {
              name: "message",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
            },
          },
        },
        enum: {
          type: nullable("SubpkgEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/multipkgs/subpkg2/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.multipkgs.subpkg2' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/multipkgs/subpkg2/types.proto

/* eslint-disable */

import { inputObjectType, nullable, objectType } from "nexus";
import { SubpkgMessageInput } from "../subpkg1/types_pb_nexus";
import { SubpkgEnum } from "./testapis/multipkgs/subpkg1/types_pb";
import { MessageWithSubpkg as MessageWithSubpkg1 } from "./testapis/multipkgs/subpkg2/types_pb";

export type testapis$multipkgs$subpkg1$MessageWithSubpkg = MessageWithSubpkg1;
export const MessageWithSubpkg = objectType({
  name: "MessageWithSubpkg",
  definition: (t) => {
    t.field("message", {
      type: nullable("SubpkgMessage"),
      resolve: (source) => {
        const value = source.getMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "message",
          typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
        },
      },
    });
    t.field("enum", {
      type: nullable("SubpkgEnum"),
      resolve: (source) => {
        const value = source.getEnum();
        if (value == null) {
          return null;
        }
        if (value === SubpkgEnum.SUBPKG_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "enum",
          typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof MessageWithSubpkg1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$multipkgs$subpkg1$MessageWithSubpkg",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.multipkgs.subpkg1.MessageWithSubpkg",
      name: "MessageWithSubpkg",
      package: "testapis.multipkgs.subpkg1",
    },
  },
});

export const MessageWithSubpkgInput = Object.assign(
  inputObjectType({
    name: "MessageWithSubpkgInput",
    definition: (t) => {
      t.field("message", {
        type: nullable("SubpkgMessageInput"),
        extensions: {
          protobufField: {
            name: "message",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
          },
        },
      });
      t.field("enum", {
        type: nullable("SubpkgEnum"),
        extensions: {
          protobufField: {
            name: "enum",
            typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.multipkgs.subpkg1.MessageWithSubpkg",
        name: "MessageWithSubpkg",
        package: "testapis.multipkgs.subpkg1",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageWithSubpkgInput"],
    ): MessageWithSubpkg1 => {
      const output = new MessageWithSubpkg1();
      if (input.message != null) {
        output.setMessage(SubpkgMessageInput.toProto(input.message));
      }
      if (input.enum != null) {
        output.setEnum(input.enum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        message: {
          type: nullable("SubpkgMessageInput"),
          extensions: {
            protobufField: {
              name: "message",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgMessage",
            },
          },
        },
        enum: {
          type: nullable("SubpkgEnum"),
          extensions: {
            protobufField: {
              name: "enum",
              typeFullName: "testapis.multipkgs.subpkg1.SubpkgEnum",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/multipkgs/subpkg2/types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.nested' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

/* eslint-disable */

import { ParentMessage as ParentMessage1 } from "@testapis/proto/testapis/nested/nested_pb";
import { nonNull, nullable, objectType } from "nexus";
import { ParentMessageNestedEnum } from "./ParentMessageNestedEnum.nexus";
import { ParentMessageNestedMessage } from "./ParentMessageNestedMessage.nexus";

export type testapis$nested$ParentMessage = ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("nested", {
      type: nullable(ParentMessageNestedMessage),
      resolve: (source) => {
        const value = source.getNested();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "nested",
          typeFullName: "testapis.nested.ParentMessage.NestedMessage",
        },
      },
    });
    t.field("nestedEnum", {
      type: nullable(ParentMessageNestedEnum),
      resolve: (source) => {
        const value = source.getNestedEnum();
        if (value == null) {
          return null;
        }
        if (value === ParentMessage1.NestedEnum.NESTED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "nested_enum",
          typeFullName: "testapis.nested.ParentMessage.NestedEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: { module: __filename, export: "testapis$nested$ParentMessage" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.nested.ParentMessage",
      name: "ParentMessage",
      package: "testapis.nested",
    },
  },
});
",
    "name": "testapis/nested/ParentMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

/* eslint-disable */

import { ParentMessage } from "@testapis/proto/testapis/nested/nested_pb";
import { nonNull, objectType } from "nexus";

export type testapis$nested$ParentMessage$NestedMessage =
  ParentMessage.NestedMessage;
export const ParentMessageNestedMessage = objectType({
  name: "ParentMessageNestedMessage",
  definition: (t) => {
    t.field("nestedBody", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getNestedBody();
        return value;
      },
      extensions: {
        protobufField: { name: "nested_body", typeFullName: "string" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage.NestedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$nested$ParentMessage$NestedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.nested.ParentMessage.NestedMessage",
      name: "NestedMessage",
      package: "testapis.nested",
    },
  },
});
",
    "name": "testapis/nested/ParentMessageNestedMessage.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

/* eslint-disable */

import { ParentMessage } from "@testapis/proto/testapis/nested/nested_pb";
import { inputObjectType, nonNull, nullable } from "nexus";
import { ParentMessageNestedEnum } from "./ParentMessageNestedEnum.nexus";
import { ParentMessageNestedMessageInput } from "./ParentMessageNestedMessageInput.nexus";

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("nested", {
        type: nullable(ParentMessageNestedMessageInput),
        extensions: {
          protobufField: {
            name: "nested",
            typeFullName: "testapis.nested.ParentMessage.NestedMessage",
          },
        },
      });
      t.field("nestedEnum", {
        type: nullable(ParentMessageNestedEnum),
        extensions: {
          protobufField: {
            name: "nested_enum",
            typeFullName: "testapis.nested.ParentMessage.NestedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage",
        name: "ParentMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage => {
      const output = new ParentMessage();
      output.setBody(input.body);
      if (input.nested != null) {
        output.setNested(ParentMessageNestedMessageInput.toProto(input.nested));
      }
      if (input.nestedEnum != null) {
        output.setNestedEnum(input.nestedEnum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        nested: {
          type: nullable(ParentMessageNestedMessageInput),
          extensions: {
            protobufField: {
              name: "nested",
              typeFullName: "testapis.nested.ParentMessage.NestedMessage",
            },
          },
        },
        nestedEnum: {
          type: nullable(ParentMessageNestedEnum),
          extensions: {
            protobufField: {
              name: "nested_enum",
              typeFullName: "testapis.nested.ParentMessage.NestedEnum",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/nested/ParentMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

/* eslint-disable */

import { ParentMessage } from "@testapis/proto/testapis/nested/nested_pb";
import { inputObjectType, nonNull } from "nexus";

export const ParentMessageNestedMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageNestedMessageInput",
    definition: (t) => {
      t.field("nestedBody", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "nested_body", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage.NestedMessage",
        name: "NestedMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageNestedMessageInput"],
    ): ParentMessage.NestedMessage => {
      const output = new ParentMessage.NestedMessage();
      output.setNestedBody(input.nestedBody);
      return output;
    },
    _protoNexus: {
      fields: {
        nestedBody: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "nested_body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/nested/ParentMessageNestedMessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

/* eslint-disable */

import { enumType } from "nexus";

export const ParentMessageNestedEnum = enumType({
  name: "ParentMessageNestedEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "NestedEnum",
      fullName: "testapis.nested.ParentMessage.NestedEnum",
      package: "testapis.nested",
    },
  },
});
",
    "name": "testapis/nested/ParentMessageNestedEnum.nexus.ts",
  },
]
`;

exports[`'testapis.nested' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

/* eslint-disable */

import { ParentMessage as ParentMessage1 } from "@testapis/proto/testapis/nested/nested_pb";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";

export type testapis$nested$ParentMessage = ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("nested", {
      type: nullable("ParentMessageNestedMessage"),
      resolve: (source) => {
        const value = source.getNested();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "nested",
          typeFullName: "testapis.nested.ParentMessage.NestedMessage",
        },
      },
    });
    t.field("nestedEnum", {
      type: nullable("ParentMessageNestedEnum"),
      resolve: (source) => {
        const value = source.getNestedEnum();
        if (value == null) {
          return null;
        }
        if (value === ParentMessage1.NestedEnum.NESTED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "nested_enum",
          typeFullName: "testapis.nested.ParentMessage.NestedEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: { module: __filename, export: "testapis$nested$ParentMessage" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.nested.ParentMessage",
      name: "ParentMessage",
      package: "testapis.nested",
    },
  },
});

export type testapis$nested$ParentMessage$NestedMessage =
  ParentMessage1.NestedMessage;
export const ParentMessageNestedMessage = objectType({
  name: "ParentMessageNestedMessage",
  definition: (t) => {
    t.field("nestedBody", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getNestedBody();
        return value;
      },
      extensions: {
        protobufField: { name: "nested_body", typeFullName: "string" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1.NestedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$nested$ParentMessage$NestedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.nested.ParentMessage.NestedMessage",
      name: "NestedMessage",
      package: "testapis.nested",
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("nested", {
        type: nullable("ParentMessageNestedMessageInput"),
        extensions: {
          protobufField: {
            name: "nested",
            typeFullName: "testapis.nested.ParentMessage.NestedMessage",
          },
        },
      });
      t.field("nestedEnum", {
        type: nullable("ParentMessageNestedEnum"),
        extensions: {
          protobufField: {
            name: "nested_enum",
            typeFullName: "testapis.nested.ParentMessage.NestedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage",
        name: "ParentMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      output.setBody(input.body);
      if (input.nested != null) {
        output.setNested(ParentMessageNestedMessageInput.toProto(input.nested));
      }
      if (input.nestedEnum != null) {
        output.setNestedEnum(input.nestedEnum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        nested: {
          type: nullable("ParentMessageNestedMessageInput"),
          extensions: {
            protobufField: {
              name: "nested",
              typeFullName: "testapis.nested.ParentMessage.NestedMessage",
            },
          },
        },
        nestedEnum: {
          type: nullable("ParentMessageNestedEnum"),
          extensions: {
            protobufField: {
              name: "nested_enum",
              typeFullName: "testapis.nested.ParentMessage.NestedEnum",
            },
          },
        },
      },
    },
  },
);

export const ParentMessageNestedMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageNestedMessageInput",
    definition: (t) => {
      t.field("nestedBody", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "nested_body", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage.NestedMessage",
        name: "NestedMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageNestedMessageInput"],
    ): ParentMessage1.NestedMessage => {
      const output = new ParentMessage1.NestedMessage();
      output.setNestedBody(input.nestedBody);
      return output;
    },
    _protoNexus: {
      fields: {
        nestedBody: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "nested_body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const ParentMessageNestedEnum = enumType({
  name: "ParentMessageNestedEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "NestedEnum",
      fullName: "testapis.nested.ParentMessage.NestedEnum",
      package: "testapis.nested",
    },
  },
});
",
    "name": "testapis/nested/nested_pb_nexus.ts",
  },
]
`;

exports[`'testapis.nested' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

/* eslint-disable */

import { ParentMessage as ParentMessage1 } from "@testapis/proto/testapis/nested/nested_pb";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";

export type testapis$nested$ParentMessage = ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("nested", {
      type: nullable("ParentMessageNestedMessage"),
      resolve: (source) => {
        const value = source.getNested();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "nested",
          typeFullName: "testapis.nested.ParentMessage.NestedMessage",
        },
      },
    });
    t.field("nestedEnum", {
      type: nullable("ParentMessageNestedEnum"),
      resolve: (source) => {
        const value = source.getNestedEnum();
        if (value == null) {
          return null;
        }
        if (value === ParentMessage1.NestedEnum.NESTED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "nested_enum",
          typeFullName: "testapis.nested.ParentMessage.NestedEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: { module: __filename, export: "testapis$nested$ParentMessage" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.nested.ParentMessage",
      name: "ParentMessage",
      package: "testapis.nested",
    },
  },
});

export type testapis$nested$ParentMessage$NestedMessage =
  ParentMessage1.NestedMessage;
export const ParentMessageNestedMessage = objectType({
  name: "ParentMessageNestedMessage",
  definition: (t) => {
    t.field("nestedBody", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getNestedBody();
        return value;
      },
      extensions: {
        protobufField: { name: "nested_body", typeFullName: "string" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1.NestedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$nested$ParentMessage$NestedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.nested.ParentMessage.NestedMessage",
      name: "NestedMessage",
      package: "testapis.nested",
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("nested", {
        type: nullable("ParentMessageNestedMessageInput"),
        extensions: {
          protobufField: {
            name: "nested",
            typeFullName: "testapis.nested.ParentMessage.NestedMessage",
          },
        },
      });
      t.field("nestedEnum", {
        type: nullable("ParentMessageNestedEnum"),
        extensions: {
          protobufField: {
            name: "nested_enum",
            typeFullName: "testapis.nested.ParentMessage.NestedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage",
        name: "ParentMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      output.setBody(input.body);
      if (input.nested != null) {
        output.setNested(ParentMessageNestedMessageInput.toProto(input.nested));
      }
      if (input.nestedEnum != null) {
        output.setNestedEnum(input.nestedEnum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        nested: {
          type: nullable("ParentMessageNestedMessageInput"),
          extensions: {
            protobufField: {
              name: "nested",
              typeFullName: "testapis.nested.ParentMessage.NestedMessage",
            },
          },
        },
        nestedEnum: {
          type: nullable("ParentMessageNestedEnum"),
          extensions: {
            protobufField: {
              name: "nested_enum",
              typeFullName: "testapis.nested.ParentMessage.NestedEnum",
            },
          },
        },
      },
    },
  },
);

export const ParentMessagePartialInput = Object.assign(
  inputObjectType({
    name: "ParentMessagePartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("nested", {
        type: nullable("ParentMessageNestedMessagePartialInput"),
        extensions: {
          protobufField: {
            name: "nested",
            typeFullName: "testapis.nested.ParentMessage.NestedMessage",
          },
        },
      });
      t.field("nestedEnum", {
        type: nullable("ParentMessageNestedEnum"),
        extensions: {
          protobufField: {
            name: "nested_enum",
            typeFullName: "testapis.nested.ParentMessage.NestedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage",
        name: "ParentMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessagePartialInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.nested != null) {
        output.setNested(
          ParentMessageNestedMessagePartialInput.toProto(input.nested),
        );
      }
      if (input.nestedEnum != null) {
        output.setNestedEnum(input.nestedEnum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        nested: {
          type: nullable("ParentMessageNestedMessagePartialInput"),
          extensions: {
            protobufField: {
              name: "nested",
              typeFullName: "testapis.nested.ParentMessage.NestedMessage",
            },
          },
        },
        nestedEnum: {
          type: nullable("ParentMessageNestedEnum"),
          extensions: {
            protobufField: {
              name: "nested_enum",
              typeFullName: "testapis.nested.ParentMessage.NestedEnum",
            },
          },
        },
      },
    },
  },
);

export const ParentMessageNestedMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageNestedMessageInput",
    definition: (t) => {
      t.field("nestedBody", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "nested_body", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage.NestedMessage",
        name: "NestedMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageNestedMessageInput"],
    ): ParentMessage1.NestedMessage => {
      const output = new ParentMessage1.NestedMessage();
      output.setNestedBody(input.nestedBody);
      return output;
    },
    _protoNexus: {
      fields: {
        nestedBody: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "nested_body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const ParentMessageNestedMessagePartialInput = Object.assign(
  inputObjectType({
    name: "ParentMessageNestedMessagePartialInput",
    definition: (t) => {
      t.field("nestedBody", {
        type: nullable("String"),
        extensions: {
          protobufField: { name: "nested_body", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage.NestedMessage",
        name: "NestedMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageNestedMessagePartialInput"],
    ): ParentMessage1.NestedMessage => {
      const output = new ParentMessage1.NestedMessage();
      if (input.nestedBody != null) {
        output.setNestedBody(input.nestedBody);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        nestedBody: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "nested_body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const ParentMessageNestedEnum = enumType({
  name: "ParentMessageNestedEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "NestedEnum",
      fullName: "testapis.nested.ParentMessage.NestedEnum",
      package: "testapis.nested",
    },
  },
});
",
    "name": "testapis/nested/nested_pb_nexus.ts",
  },
]
`;

exports[`'testapis.nested' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/nested";
import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";

export type testapis$nested$ParentMessage = testapis.nested.ParentMessage;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("nested", {
      type: nullable("ParentMessageNestedMessage"),
      resolve: (source) => {
        const value = source.nested;
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "nested",
          typeFullName: "testapis.nested.ParentMessage.NestedMessage",
        },
      },
    });
    t.field("nestedEnum", {
      type: nullable("ParentMessageNestedEnum"),
      resolve: (source) => {
        const value = source.nestedEnum;
        if (value == null) {
          return null;
        }
        if (
          value ===
            testapis.nested.ParentMessage.NestedEnum.NESTED_ENUM_UNSPECIFIED
        ) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "nested_enum",
          typeFullName: "testapis.nested.ParentMessage.NestedEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.nested.ParentMessage;
  },
  sourceType: { module: __filename, export: "testapis$nested$ParentMessage" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.nested.ParentMessage",
      name: "ParentMessage",
      package: "testapis.nested",
    },
  },
});

export type testapis$nested$ParentMessage$NestedMessage =
  testapis.nested.ParentMessage.NestedMessage;
export const ParentMessageNestedMessage = objectType({
  name: "ParentMessageNestedMessage",
  definition: (t) => {
    t.field("nestedBody", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.nestedBody;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: { name: "nested_body", typeFullName: "string" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.nested.ParentMessage.NestedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$nested$ParentMessage$NestedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.nested.ParentMessage.NestedMessage",
      name: "NestedMessage",
      package: "testapis.nested",
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("nested", {
        type: nullable("ParentMessageNestedMessageInput"),
        extensions: {
          protobufField: {
            name: "nested",
            typeFullName: "testapis.nested.ParentMessage.NestedMessage",
          },
        },
      });
      t.field("nestedEnum", {
        type: nullable("ParentMessageNestedEnum"),
        extensions: {
          protobufField: {
            name: "nested_enum",
            typeFullName: "testapis.nested.ParentMessage.NestedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage",
        name: "ParentMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): testapis.nested.ParentMessage => {
      const output = new testapis.nested.ParentMessage();
      output.body = input.body;
      if (input.nested != null) {
        output.nested = ParentMessageNestedMessageInput.toProto(input.nested);
      }
      if (input.nestedEnum != null) {
        output.nestedEnum = input.nestedEnum;
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        nested: {
          type: nullable("ParentMessageNestedMessageInput"),
          extensions: {
            protobufField: {
              name: "nested",
              typeFullName: "testapis.nested.ParentMessage.NestedMessage",
            },
          },
        },
        nestedEnum: {
          type: nullable("ParentMessageNestedEnum"),
          extensions: {
            protobufField: {
              name: "nested_enum",
              typeFullName: "testapis.nested.ParentMessage.NestedEnum",
            },
          },
        },
      },
    },
  },
);

export const ParentMessageNestedMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageNestedMessageInput",
    definition: (t) => {
      t.field("nestedBody", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "nested_body", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage.NestedMessage",
        name: "NestedMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageNestedMessageInput"],
    ): testapis.nested.ParentMessage.NestedMessage => {
      const output = new testapis.nested.ParentMessage.NestedMessage();
      output.nestedBody = input.nestedBody;
      return output;
    },
    _protoNexus: {
      fields: {
        nestedBody: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "nested_body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const ParentMessageNestedEnum = enumType({
  name: "ParentMessageNestedEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "NestedEnum",
      fullName: "testapis.nested.ParentMessage.NestedEnum",
      package: "testapis.nested",
    },
  },
});
",
    "name": "testapis/nested/nested_pb_nexus.ts",
  },
]
`;

exports[`'testapis.nested' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/nested/nested.proto

/* eslint-disable */

import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";
import { ParentMessage as ParentMessage1 } from "./testapis/nested/nested_pb";

export type testapis$nested$ParentMessage = ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("nested", {
      type: nullable("ParentMessageNestedMessage"),
      resolve: (source) => {
        const value = source.getNested();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "nested",
          typeFullName: "testapis.nested.ParentMessage.NestedMessage",
        },
      },
    });
    t.field("nestedEnum", {
      type: nullable("ParentMessageNestedEnum"),
      resolve: (source) => {
        const value = source.getNestedEnum();
        if (value == null) {
          return null;
        }
        if (value === ParentMessage1.NestedEnum.NESTED_ENUM_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "nested_enum",
          typeFullName: "testapis.nested.ParentMessage.NestedEnum",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: { module: __filename, export: "testapis$nested$ParentMessage" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.nested.ParentMessage",
      name: "ParentMessage",
      package: "testapis.nested",
    },
  },
});

export type testapis$nested$ParentMessage$NestedMessage =
  ParentMessage1.NestedMessage;
export const ParentMessageNestedMessage = objectType({
  name: "ParentMessageNestedMessage",
  definition: (t) => {
    t.field("nestedBody", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getNestedBody();
        return value;
      },
      extensions: {
        protobufField: { name: "nested_body", typeFullName: "string" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1.NestedMessage;
  },
  sourceType: {
    module: __filename,
    export: "testapis$nested$ParentMessage$NestedMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.nested.ParentMessage.NestedMessage",
      name: "NestedMessage",
      package: "testapis.nested",
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("nested", {
        type: nullable("ParentMessageNestedMessageInput"),
        extensions: {
          protobufField: {
            name: "nested",
            typeFullName: "testapis.nested.ParentMessage.NestedMessage",
          },
        },
      });
      t.field("nestedEnum", {
        type: nullable("ParentMessageNestedEnum"),
        extensions: {
          protobufField: {
            name: "nested_enum",
            typeFullName: "testapis.nested.ParentMessage.NestedEnum",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage",
        name: "ParentMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      output.setBody(input.body);
      if (input.nested != null) {
        output.setNested(ParentMessageNestedMessageInput.toProto(input.nested));
      }
      if (input.nestedEnum != null) {
        output.setNestedEnum(input.nestedEnum);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        nested: {
          type: nullable("ParentMessageNestedMessageInput"),
          extensions: {
            protobufField: {
              name: "nested",
              typeFullName: "testapis.nested.ParentMessage.NestedMessage",
            },
          },
        },
        nestedEnum: {
          type: nullable("ParentMessageNestedEnum"),
          extensions: {
            protobufField: {
              name: "nested_enum",
              typeFullName: "testapis.nested.ParentMessage.NestedEnum",
            },
          },
        },
      },
    },
  },
);

export const ParentMessageNestedMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageNestedMessageInput",
    definition: (t) => {
      t.field("nestedBody", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "nested_body", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.nested.ParentMessage.NestedMessage",
        name: "NestedMessage",
        package: "testapis.nested",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageNestedMessageInput"],
    ): ParentMessage1.NestedMessage => {
      const output = new ParentMessage1.NestedMessage();
      output.setNestedBody(input.nestedBody);
      return output;
    },
    _protoNexus: {
      fields: {
        nestedBody: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "nested_body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const ParentMessageNestedEnum = enumType({
  name: "ParentMessageNestedEnum",
  members: [{
    name: "FOO",
    value: 1,
    extensions: { protobufEnumValue: { name: "FOO" } },
  }, {
    name: "BAR",
    value: 2,
    extensions: { protobufEnumValue: { name: "BAR" } },
  }],
  extensions: {
    protobufEnum: {
      name: "NestedEnum",
      fullName: "testapis.nested.ParentMessage.NestedEnum",
      package: "testapis.nested",
    },
  },
});
",
    "name": "testapis/nested/nested_pb_nexus.ts",
  },
]
`;

exports[`'testapis.oneof' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import { OneofParent as OneofParent1 } from "@testapis/proto/testapis/oneof/oneof_pb";
import { nonNull, nullable, objectType } from "nexus";

export type testapis$oneof$OneofParent = OneofParent1;
export const OneofParent = objectType({
  name: "OneofParent",
  definition: (t) => {
    t.field("normalField", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getNormalField();
        return value;
      },
      extensions: {
        protobufField: { name: "normal_field", typeFullName: "string" },
      },
    });
    t.field("requiredOneofMembers", {
      type: nonNull(OneofParentRequiredOneofMembers),
      description: "Required. disallow not_set.",
      resolve: (source) => {
        const value = source;
        switch (value.getRequiredOneofMembersCase()) {
          case OneofParent1.RequiredOneofMembersCase.REQUIRED_MESSAGE1: {
            return value.getRequiredMessage1()!;
          }

          case OneofParent1.RequiredOneofMembersCase.REQUIRED_MESSAGE2: {
            return value.getRequiredMessage2()!;
          }

          default: {
            throw new Error(
              "One of the following fields must be non-null: required_message1, required_message2",
            );
          }
        }
      },
      extensions: { protobufField: { name: "required_oneof_members" } },
    });
    t.field("optionalOneofMembers", {
      type: nullable(OneofParentOptionalOneofMembers),
      resolve: (source) => {
        const value = source;
        switch (value.getOptionalOneofMembersCase()) {
          case OneofParent1.OptionalOneofMembersCase.OPTOINAL_MESSAGE1: {
            return value.getOptoinalMessage1()!;
          }

          case OneofParent1.OptionalOneofMembersCase.OPTOINAL_MESSAGE2: {
            return value.getOptoinalMessage2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "optional_oneof_members" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofParent1;
  },
  sourceType: { module: __filename, export: "testapis$oneof$OneofParent" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofParent",
      name: "OneofParent",
      package: "testapis.oneof",
    },
  },
});
",
    "name": "testapis/oneof/OneofParent.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import { OneofMemberMessage1 as OneofMemberMessage11 } from "@testapis/proto/testapis/oneof/oneof_pb";
import { nonNull, objectType } from "nexus";

export type testapis$oneof$OneofMemberMessage1 = OneofMemberMessage11;
export const OneofMemberMessage1 = objectType({
  name: "OneofMemberMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMemberMessage11;
  },
  sourceType: {
    module: __filename,
    export: "testapis$oneof$OneofMemberMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofMemberMessage1",
      name: "OneofMemberMessage1",
      package: "testapis.oneof",
    },
  },
});
",
    "name": "testapis/oneof/OneofMemberMessage1.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import { OneofMemberMessage2 as OneofMemberMessage21 } from "@testapis/proto/testapis/oneof/oneof_pb";
import { nonNull, objectType } from "nexus";

export type testapis$oneof$OneofMemberMessage2 = OneofMemberMessage21;
export const OneofMemberMessage2 = objectType({
  name: "OneofMemberMessage2",
  definition: (t) => {
    t.field("imageUrl", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getImageUrl();
        return value;
      },
      extensions: {
        protobufField: { name: "image_url", typeFullName: "string" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMemberMessage21;
  },
  sourceType: {
    module: __filename,
    export: "testapis$oneof$OneofMemberMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofMemberMessage2",
      name: "OneofMemberMessage2",
      package: "testapis.oneof",
    },
  },
});
",
    "name": "testapis/oneof/OneofMemberMessage2.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import { OneofParent } from "@testapis/proto/testapis/oneof/oneof_pb";
import { inputObjectType, nonNull, nullable } from "nexus";
import { OneofMemberMessage1Input } from "./OneofMemberMessage1Input.nexus";
import { OneofMemberMessage2Input } from "./OneofMemberMessage2Input.nexus";

export const OneofParentInput = Object.assign(
  inputObjectType({
    name: "OneofParentInput",
    definition: (t) => {
      t.field("normalField", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "normal_field", typeFullName: "string" },
        },
      });
      t.field("requiredMessage1", {
        type: nullable(OneofMemberMessage1Input),
        extensions: {
          protobufField: {
            name: "required_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("requiredMessage2", {
        type: nullable(OneofMemberMessage2Input),
        extensions: {
          protobufField: {
            name: "required_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
      t.field("optoinalMessage1", {
        type: nullable(OneofMemberMessage1Input),
        extensions: {
          protobufField: {
            name: "optoinal_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("optoinalMessage2", {
        type: nullable(OneofMemberMessage2Input),
        extensions: {
          protobufField: {
            name: "optoinal_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofParent",
        name: "OneofParent",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentInput"],
    ): OneofParent => {
      const output = new OneofParent();
      output.setNormalField(input.normalField);
      if (input.requiredMessage1 != null) {
        output.setRequiredMessage1(
          OneofMemberMessage1Input.toProto(input.requiredMessage1),
        );
      }
      if (input.requiredMessage2 != null) {
        output.setRequiredMessage2(
          OneofMemberMessage2Input.toProto(input.requiredMessage2),
        );
      }
      if (input.optoinalMessage1 != null) {
        output.setOptoinalMessage1(
          OneofMemberMessage1Input.toProto(input.optoinalMessage1),
        );
      }
      if (input.optoinalMessage2 != null) {
        output.setOptoinalMessage2(
          OneofMemberMessage2Input.toProto(input.optoinalMessage2),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        normalField: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "normal_field", typeFullName: "string" },
          },
        },
        requiredMessage1: {
          type: nullable(OneofMemberMessage1Input),
          extensions: {
            protobufField: {
              name: "required_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        requiredMessage2: {
          type: nullable(OneofMemberMessage2Input),
          extensions: {
            protobufField: {
              name: "required_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
        optoinalMessage1: {
          type: nullable(OneofMemberMessage1Input),
          extensions: {
            protobufField: {
              name: "optoinal_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        optoinalMessage2: {
          type: nullable(OneofMemberMessage2Input),
          extensions: {
            protobufField: {
              name: "optoinal_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/oneof/OneofParentInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import { OneofMemberMessage1 } from "@testapis/proto/testapis/oneof/oneof_pb";
import { inputObjectType, nonNull } from "nexus";

export const OneofMemberMessage1Input = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage1",
        name: "OneofMemberMessage1",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage1Input"],
    ): OneofMemberMessage1 => {
      const output = new OneofMemberMessage1();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/oneof/OneofMemberMessage1Input.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import { OneofMemberMessage2 } from "@testapis/proto/testapis/oneof/oneof_pb";
import { inputObjectType, nonNull } from "nexus";

export const OneofMemberMessage2Input = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage2Input",
    definition: (t) => {
      t.field("imageUrl", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "image_url", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage2",
        name: "OneofMemberMessage2",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage2Input"],
    ): OneofMemberMessage2 => {
      const output = new OneofMemberMessage2();
      output.setImageUrl(input.imageUrl);
      return output;
    },
    _protoNexus: {
      fields: {
        imageUrl: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "image_url", typeFullName: "string" },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/oneof/OneofMemberMessage2Input.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import { unionType } from "nexus";
import { OneofMemberMessage1 } from "./OneofMemberMessage1.nexus";
import { OneofMemberMessage2 } from "./OneofMemberMessage2.nexus";

export const OneofParentRequiredOneofMembers = unionType({
  name: "OneofParentRequiredOneofMembers",
  description: "Required. disallow not_set.",
  definition: (t) => {
    t.members(OneofMemberMessage1, OneofMemberMessage2);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.oneof.OneofParent.required_oneof_members",
      name: "required_oneof_members",
      messageName: "OneofParent",
      package: "testapis.oneof",
      fields: [{
        name: "required_message1",
        type: "testapis.oneof.OneofMemberMessage1",
      }, {
        name: "required_message2",
        type: "testapis.oneof.OneofMemberMessage2",
      }],
    },
  },
});
",
    "name": "testapis/oneof/OneofParentRequiredOneofMembers.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import { unionType } from "nexus";
import { OneofMemberMessage1 } from "./OneofMemberMessage1.nexus";
import { OneofMemberMessage2 } from "./OneofMemberMessage2.nexus";

export const OneofParentOptionalOneofMembers = unionType({
  name: "OneofParentOptionalOneofMembers",
  definition: (t) => {
    t.members(OneofMemberMessage1, OneofMemberMessage2);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.oneof.OneofParent.optional_oneof_members",
      name: "optional_oneof_members",
      messageName: "OneofParent",
      package: "testapis.oneof",
      fields: [{
        name: "optoinal_message1",
        type: "testapis.oneof.OneofMemberMessage1",
      }, {
        name: "optoinal_message2",
        type: "testapis.oneof.OneofMemberMessage2",
      }],
    },
  },
});
",
    "name": "testapis/oneof/OneofParentOptionalOneofMembers.nexus.ts",
  },
]
`;

exports[`'testapis.oneof' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import {
  OneofMemberMessage1 as OneofMemberMessage12,
  OneofMemberMessage2 as OneofMemberMessage23,
  OneofParent as OneofParent1,
} from "@testapis/proto/testapis/oneof/oneof_pb";
import {
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";

export type testapis$oneof$OneofParent = OneofParent1;
export const OneofParent = objectType({
  name: "OneofParent",
  definition: (t) => {
    t.field("normalField", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getNormalField();
        return value;
      },
      extensions: {
        protobufField: { name: "normal_field", typeFullName: "string" },
      },
    });
    t.field("requiredOneofMembers", {
      type: nonNull("OneofParentRequiredOneofMembers"),
      description: "Required. disallow not_set.",
      resolve: (source) => {
        const value = source;
        switch (value.getRequiredOneofMembersCase()) {
          case OneofParent1.RequiredOneofMembersCase.REQUIRED_MESSAGE1: {
            return value.getRequiredMessage1()!;
          }

          case OneofParent1.RequiredOneofMembersCase.REQUIRED_MESSAGE2: {
            return value.getRequiredMessage2()!;
          }

          default: {
            throw new Error(
              "One of the following fields must be non-null: required_message1, required_message2",
            );
          }
        }
      },
      extensions: { protobufField: { name: "required_oneof_members" } },
    });
    t.field("optionalOneofMembers", {
      type: nullable("OneofParentOptionalOneofMembers"),
      resolve: (source) => {
        const value = source;
        switch (value.getOptionalOneofMembersCase()) {
          case OneofParent1.OptionalOneofMembersCase.OPTOINAL_MESSAGE1: {
            return value.getOptoinalMessage1()!;
          }

          case OneofParent1.OptionalOneofMembersCase.OPTOINAL_MESSAGE2: {
            return value.getOptoinalMessage2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "optional_oneof_members" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofParent1;
  },
  sourceType: { module: __filename, export: "testapis$oneof$OneofParent" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofParent",
      name: "OneofParent",
      package: "testapis.oneof",
    },
  },
});

export type testapis$oneof$OneofMemberMessage1 = OneofMemberMessage12;
export const OneofMemberMessage1 = objectType({
  name: "OneofMemberMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMemberMessage12;
  },
  sourceType: {
    module: __filename,
    export: "testapis$oneof$OneofMemberMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofMemberMessage1",
      name: "OneofMemberMessage1",
      package: "testapis.oneof",
    },
  },
});

export type testapis$oneof$OneofMemberMessage2 = OneofMemberMessage23;
export const OneofMemberMessage2 = objectType({
  name: "OneofMemberMessage2",
  definition: (t) => {
    t.field("imageUrl", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getImageUrl();
        return value;
      },
      extensions: {
        protobufField: { name: "image_url", typeFullName: "string" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMemberMessage23;
  },
  sourceType: {
    module: __filename,
    export: "testapis$oneof$OneofMemberMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofMemberMessage2",
      name: "OneofMemberMessage2",
      package: "testapis.oneof",
    },
  },
});

export const OneofParentInput = Object.assign(
  inputObjectType({
    name: "OneofParentInput",
    definition: (t) => {
      t.field("normalField", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "normal_field", typeFullName: "string" },
        },
      });
      t.field("requiredMessage1", {
        type: nullable("OneofMemberMessage1Input"),
        extensions: {
          protobufField: {
            name: "required_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("requiredMessage2", {
        type: nullable("OneofMemberMessage2Input"),
        extensions: {
          protobufField: {
            name: "required_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
      t.field("optoinalMessage1", {
        type: nullable("OneofMemberMessage1Input"),
        extensions: {
          protobufField: {
            name: "optoinal_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("optoinalMessage2", {
        type: nullable("OneofMemberMessage2Input"),
        extensions: {
          protobufField: {
            name: "optoinal_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofParent",
        name: "OneofParent",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentInput"],
    ): OneofParent1 => {
      const output = new OneofParent1();
      output.setNormalField(input.normalField);
      if (input.requiredMessage1 != null) {
        output.setRequiredMessage1(
          OneofMemberMessage1Input.toProto(input.requiredMessage1),
        );
      }
      if (input.requiredMessage2 != null) {
        output.setRequiredMessage2(
          OneofMemberMessage2Input.toProto(input.requiredMessage2),
        );
      }
      if (input.optoinalMessage1 != null) {
        output.setOptoinalMessage1(
          OneofMemberMessage1Input.toProto(input.optoinalMessage1),
        );
      }
      if (input.optoinalMessage2 != null) {
        output.setOptoinalMessage2(
          OneofMemberMessage2Input.toProto(input.optoinalMessage2),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        normalField: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "normal_field", typeFullName: "string" },
          },
        },
        requiredMessage1: {
          type: nullable("OneofMemberMessage1Input"),
          extensions: {
            protobufField: {
              name: "required_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        requiredMessage2: {
          type: nullable("OneofMemberMessage2Input"),
          extensions: {
            protobufField: {
              name: "required_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
        optoinalMessage1: {
          type: nullable("OneofMemberMessage1Input"),
          extensions: {
            protobufField: {
              name: "optoinal_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        optoinalMessage2: {
          type: nullable("OneofMemberMessage2Input"),
          extensions: {
            protobufField: {
              name: "optoinal_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
      },
    },
  },
);

export const OneofMemberMessage1Input = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage1",
        name: "OneofMemberMessage1",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage1Input"],
    ): OneofMemberMessage12 => {
      const output = new OneofMemberMessage12();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMemberMessage2Input = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage2Input",
    definition: (t) => {
      t.field("imageUrl", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "image_url", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage2",
        name: "OneofMemberMessage2",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage2Input"],
    ): OneofMemberMessage23 => {
      const output = new OneofMemberMessage23();
      output.setImageUrl(input.imageUrl);
      return output;
    },
    _protoNexus: {
      fields: {
        imageUrl: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "image_url", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const OneofParentRequiredOneofMembers = unionType({
  name: "OneofParentRequiredOneofMembers",
  description: "Required. disallow not_set.",
  definition: (t) => {
    t.members(OneofMemberMessage1, OneofMemberMessage2);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.oneof.OneofParent.required_oneof_members",
      name: "required_oneof_members",
      messageName: "OneofParent",
      package: "testapis.oneof",
      fields: [{
        name: "required_message1",
        type: "testapis.oneof.OneofMemberMessage1",
      }, {
        name: "required_message2",
        type: "testapis.oneof.OneofMemberMessage2",
      }],
    },
  },
});
export const OneofParentOptionalOneofMembers = unionType({
  name: "OneofParentOptionalOneofMembers",
  definition: (t) => {
    t.members(OneofMemberMessage1, OneofMemberMessage2);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.oneof.OneofParent.optional_oneof_members",
      name: "optional_oneof_members",
      messageName: "OneofParent",
      package: "testapis.oneof",
      fields: [{
        name: "optoinal_message1",
        type: "testapis.oneof.OneofMemberMessage1",
      }, {
        name: "optoinal_message2",
        type: "testapis.oneof.OneofMemberMessage2",
      }],
    },
  },
});
",
    "name": "testapis/oneof/oneof_pb_nexus.ts",
  },
]
`;

exports[`'testapis.oneof' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import {
  OneofMemberMessage1 as OneofMemberMessage12,
  OneofMemberMessage2 as OneofMemberMessage23,
  OneofParent as OneofParent1,
} from "@testapis/proto/testapis/oneof/oneof_pb";
import {
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";

export type testapis$oneof$OneofParent = OneofParent1;
export const OneofParent = objectType({
  name: "OneofParent",
  definition: (t) => {
    t.field("normalField", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getNormalField();
        return value;
      },
      extensions: {
        protobufField: { name: "normal_field", typeFullName: "string" },
      },
    });
    t.field("requiredOneofMembers", {
      type: nonNull("OneofParentRequiredOneofMembers"),
      description: "Required. disallow not_set.",
      resolve: (source) => {
        const value = source;
        switch (value.getRequiredOneofMembersCase()) {
          case OneofParent1.RequiredOneofMembersCase.REQUIRED_MESSAGE1: {
            return value.getRequiredMessage1()!;
          }

          case OneofParent1.RequiredOneofMembersCase.REQUIRED_MESSAGE2: {
            return value.getRequiredMessage2()!;
          }

          default: {
            throw new Error(
              "One of the following fields must be non-null: required_message1, required_message2",
            );
          }
        }
      },
      extensions: { protobufField: { name: "required_oneof_members" } },
    });
    t.field("optionalOneofMembers", {
      type: nullable("OneofParentOptionalOneofMembers"),
      resolve: (source) => {
        const value = source;
        switch (value.getOptionalOneofMembersCase()) {
          case OneofParent1.OptionalOneofMembersCase.OPTOINAL_MESSAGE1: {
            return value.getOptoinalMessage1()!;
          }

          case OneofParent1.OptionalOneofMembersCase.OPTOINAL_MESSAGE2: {
            return value.getOptoinalMessage2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "optional_oneof_members" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofParent1;
  },
  sourceType: { module: __filename, export: "testapis$oneof$OneofParent" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofParent",
      name: "OneofParent",
      package: "testapis.oneof",
    },
  },
});

export type testapis$oneof$OneofMemberMessage1 = OneofMemberMessage12;
export const OneofMemberMessage1 = objectType({
  name: "OneofMemberMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMemberMessage12;
  },
  sourceType: {
    module: __filename,
    export: "testapis$oneof$OneofMemberMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofMemberMessage1",
      name: "OneofMemberMessage1",
      package: "testapis.oneof",
    },
  },
});

export type testapis$oneof$OneofMemberMessage2 = OneofMemberMessage23;
export const OneofMemberMessage2 = objectType({
  name: "OneofMemberMessage2",
  definition: (t) => {
    t.field("imageUrl", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getImageUrl();
        return value;
      },
      extensions: {
        protobufField: { name: "image_url", typeFullName: "string" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMemberMessage23;
  },
  sourceType: {
    module: __filename,
    export: "testapis$oneof$OneofMemberMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofMemberMessage2",
      name: "OneofMemberMessage2",
      package: "testapis.oneof",
    },
  },
});

export const OneofParentInput = Object.assign(
  inputObjectType({
    name: "OneofParentInput",
    definition: (t) => {
      t.field("normalField", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "normal_field", typeFullName: "string" },
        },
      });
      t.field("requiredMessage1", {
        type: nullable("OneofMemberMessage1Input"),
        extensions: {
          protobufField: {
            name: "required_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("requiredMessage2", {
        type: nullable("OneofMemberMessage2Input"),
        extensions: {
          protobufField: {
            name: "required_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
      t.field("optoinalMessage1", {
        type: nullable("OneofMemberMessage1Input"),
        extensions: {
          protobufField: {
            name: "optoinal_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("optoinalMessage2", {
        type: nullable("OneofMemberMessage2Input"),
        extensions: {
          protobufField: {
            name: "optoinal_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofParent",
        name: "OneofParent",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentInput"],
    ): OneofParent1 => {
      const output = new OneofParent1();
      output.setNormalField(input.normalField);
      if (input.requiredMessage1 != null) {
        output.setRequiredMessage1(
          OneofMemberMessage1Input.toProto(input.requiredMessage1),
        );
      }
      if (input.requiredMessage2 != null) {
        output.setRequiredMessage2(
          OneofMemberMessage2Input.toProto(input.requiredMessage2),
        );
      }
      if (input.optoinalMessage1 != null) {
        output.setOptoinalMessage1(
          OneofMemberMessage1Input.toProto(input.optoinalMessage1),
        );
      }
      if (input.optoinalMessage2 != null) {
        output.setOptoinalMessage2(
          OneofMemberMessage2Input.toProto(input.optoinalMessage2),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        normalField: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "normal_field", typeFullName: "string" },
          },
        },
        requiredMessage1: {
          type: nullable("OneofMemberMessage1Input"),
          extensions: {
            protobufField: {
              name: "required_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        requiredMessage2: {
          type: nullable("OneofMemberMessage2Input"),
          extensions: {
            protobufField: {
              name: "required_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
        optoinalMessage1: {
          type: nullable("OneofMemberMessage1Input"),
          extensions: {
            protobufField: {
              name: "optoinal_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        optoinalMessage2: {
          type: nullable("OneofMemberMessage2Input"),
          extensions: {
            protobufField: {
              name: "optoinal_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
      },
    },
  },
);

export const OneofParentPartialInput = Object.assign(
  inputObjectType({
    name: "OneofParentPartialInput",
    definition: (t) => {
      t.field("normalField", {
        type: nullable("String"),
        extensions: {
          protobufField: { name: "normal_field", typeFullName: "string" },
        },
      });
      t.field("requiredMessage1", {
        type: nullable("OneofMemberMessage1PartialInput"),
        extensions: {
          protobufField: {
            name: "required_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("requiredMessage2", {
        type: nullable("OneofMemberMessage2PartialInput"),
        extensions: {
          protobufField: {
            name: "required_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
      t.field("optoinalMessage1", {
        type: nullable("OneofMemberMessage1PartialInput"),
        extensions: {
          protobufField: {
            name: "optoinal_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("optoinalMessage2", {
        type: nullable("OneofMemberMessage2PartialInput"),
        extensions: {
          protobufField: {
            name: "optoinal_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofParent",
        name: "OneofParent",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentPartialInput"],
    ): OneofParent1 => {
      const output = new OneofParent1();
      if (input.normalField != null) {
        output.setNormalField(input.normalField);
      }
      if (input.requiredMessage1 != null) {
        output.setRequiredMessage1(
          OneofMemberMessage1PartialInput.toProto(input.requiredMessage1),
        );
      }
      if (input.requiredMessage2 != null) {
        output.setRequiredMessage2(
          OneofMemberMessage2PartialInput.toProto(input.requiredMessage2),
        );
      }
      if (input.optoinalMessage1 != null) {
        output.setOptoinalMessage1(
          OneofMemberMessage1PartialInput.toProto(input.optoinalMessage1),
        );
      }
      if (input.optoinalMessage2 != null) {
        output.setOptoinalMessage2(
          OneofMemberMessage2PartialInput.toProto(input.optoinalMessage2),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        normalField: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "normal_field", typeFullName: "string" },
          },
        },
        requiredMessage1: {
          type: nullable("OneofMemberMessage1PartialInput"),
          extensions: {
            protobufField: {
              name: "required_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        requiredMessage2: {
          type: nullable("OneofMemberMessage2PartialInput"),
          extensions: {
            protobufField: {
              name: "required_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
        optoinalMessage1: {
          type: nullable("OneofMemberMessage1PartialInput"),
          extensions: {
            protobufField: {
              name: "optoinal_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        optoinalMessage2: {
          type: nullable("OneofMemberMessage2PartialInput"),
          extensions: {
            protobufField: {
              name: "optoinal_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
      },
    },
  },
);

export const OneofMemberMessage1Input = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage1",
        name: "OneofMemberMessage1",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage1Input"],
    ): OneofMemberMessage12 => {
      const output = new OneofMemberMessage12();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMemberMessage1PartialInput = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage1PartialInput",
    definition: (t) => {
      t.field("body", {
        type: nullable("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage1",
        name: "OneofMemberMessage1",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage1PartialInput"],
    ): OneofMemberMessage12 => {
      const output = new OneofMemberMessage12();
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMemberMessage2Input = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage2Input",
    definition: (t) => {
      t.field("imageUrl", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "image_url", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage2",
        name: "OneofMemberMessage2",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage2Input"],
    ): OneofMemberMessage23 => {
      const output = new OneofMemberMessage23();
      output.setImageUrl(input.imageUrl);
      return output;
    },
    _protoNexus: {
      fields: {
        imageUrl: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "image_url", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMemberMessage2PartialInput = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage2PartialInput",
    definition: (t) => {
      t.field("imageUrl", {
        type: nullable("String"),
        extensions: {
          protobufField: { name: "image_url", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage2",
        name: "OneofMemberMessage2",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage2PartialInput"],
    ): OneofMemberMessage23 => {
      const output = new OneofMemberMessage23();
      if (input.imageUrl != null) {
        output.setImageUrl(input.imageUrl);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        imageUrl: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "image_url", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const OneofParentRequiredOneofMembers = unionType({
  name: "OneofParentRequiredOneofMembers",
  description: "Required. disallow not_set.",
  definition: (t) => {
    t.members(OneofMemberMessage1, OneofMemberMessage2);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.oneof.OneofParent.required_oneof_members",
      name: "required_oneof_members",
      messageName: "OneofParent",
      package: "testapis.oneof",
      fields: [{
        name: "required_message1",
        type: "testapis.oneof.OneofMemberMessage1",
      }, {
        name: "required_message2",
        type: "testapis.oneof.OneofMemberMessage2",
      }],
    },
  },
});
export const OneofParentOptionalOneofMembers = unionType({
  name: "OneofParentOptionalOneofMembers",
  definition: (t) => {
    t.members(OneofMemberMessage1, OneofMemberMessage2);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.oneof.OneofParent.optional_oneof_members",
      name: "optional_oneof_members",
      messageName: "OneofParent",
      package: "testapis.oneof",
      fields: [{
        name: "optoinal_message1",
        type: "testapis.oneof.OneofMemberMessage1",
      }, {
        name: "optoinal_message2",
        type: "testapis.oneof.OneofMemberMessage2",
      }],
    },
  },
});
",
    "name": "testapis/oneof/oneof_pb_nexus.ts",
  },
]
`;

exports[`'testapis.oneof' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/oneof";
import {
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";

export type testapis$oneof$OneofParent = testapis.oneof.OneofParent;
export const OneofParent = objectType({
  name: "OneofParent",
  definition: (t) => {
    t.field("normalField", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.normalField;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: { name: "normal_field", typeFullName: "string" },
      },
    });
    t.field("requiredOneofMembers", {
      type: nonNull("OneofParentRequiredOneofMembers"),
      description: "Required. disallow not_set.",
      resolve: (source) => {
        const value = source;
        if (value.requiredMessage1 != null) {
          return value.requiredMessage1;
        }
        if (value.requiredMessage2 != null) {
          return value.requiredMessage2;
        }
        throw new Error(
          "One of the following fields must be non-null: required_message1, required_message2",
        );
      },
      extensions: { protobufField: { name: "required_oneof_members" } },
    });
    t.field("optionalOneofMembers", {
      type: nullable("OneofParentOptionalOneofMembers"),
      resolve: (source) => {
        const value = source;
        if (value.optoinalMessage1 != null) {
          return value.optoinalMessage1;
        }
        if (value.optoinalMessage2 != null) {
          return value.optoinalMessage2;
        }
        return null;
      },
      extensions: { protobufField: { name: "optional_oneof_members" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.oneof.OneofParent;
  },
  sourceType: { module: __filename, export: "testapis$oneof$OneofParent" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofParent",
      name: "OneofParent",
      package: "testapis.oneof",
    },
  },
});

export type testapis$oneof$OneofMemberMessage1 =
  testapis.oneof.OneofMemberMessage1;
export const OneofMemberMessage1 = objectType({
  name: "OneofMemberMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.body;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.oneof.OneofMemberMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$oneof$OneofMemberMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofMemberMessage1",
      name: "OneofMemberMessage1",
      package: "testapis.oneof",
    },
  },
});

export type testapis$oneof$OneofMemberMessage2 =
  testapis.oneof.OneofMemberMessage2;
export const OneofMemberMessage2 = objectType({
  name: "OneofMemberMessage2",
  definition: (t) => {
    t.field("imageUrl", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.imageUrl;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: { name: "image_url", typeFullName: "string" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.oneof.OneofMemberMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$oneof$OneofMemberMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofMemberMessage2",
      name: "OneofMemberMessage2",
      package: "testapis.oneof",
    },
  },
});

export const OneofParentInput = Object.assign(
  inputObjectType({
    name: "OneofParentInput",
    definition: (t) => {
      t.field("normalField", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "normal_field", typeFullName: "string" },
        },
      });
      t.field("requiredMessage1", {
        type: nullable("OneofMemberMessage1Input"),
        extensions: {
          protobufField: {
            name: "required_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("requiredMessage2", {
        type: nullable("OneofMemberMessage2Input"),
        extensions: {
          protobufField: {
            name: "required_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
      t.field("optoinalMessage1", {
        type: nullable("OneofMemberMessage1Input"),
        extensions: {
          protobufField: {
            name: "optoinal_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("optoinalMessage2", {
        type: nullable("OneofMemberMessage2Input"),
        extensions: {
          protobufField: {
            name: "optoinal_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofParent",
        name: "OneofParent",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentInput"],
    ): testapis.oneof.OneofParent => {
      const output = new testapis.oneof.OneofParent();
      output.normalField = input.normalField;
      if (input.requiredMessage1 != null) {
        output.requiredMessage1 = OneofMemberMessage1Input.toProto(
          input.requiredMessage1,
        );
      }
      if (input.requiredMessage2 != null) {
        output.requiredMessage2 = OneofMemberMessage2Input.toProto(
          input.requiredMessage2,
        );
      }
      if (input.optoinalMessage1 != null) {
        output.optoinalMessage1 = OneofMemberMessage1Input.toProto(
          input.optoinalMessage1,
        );
      }
      if (input.optoinalMessage2 != null) {
        output.optoinalMessage2 = OneofMemberMessage2Input.toProto(
          input.optoinalMessage2,
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        normalField: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "normal_field", typeFullName: "string" },
          },
        },
        requiredMessage1: {
          type: nullable("OneofMemberMessage1Input"),
          extensions: {
            protobufField: {
              name: "required_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        requiredMessage2: {
          type: nullable("OneofMemberMessage2Input"),
          extensions: {
            protobufField: {
              name: "required_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
        optoinalMessage1: {
          type: nullable("OneofMemberMessage1Input"),
          extensions: {
            protobufField: {
              name: "optoinal_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        optoinalMessage2: {
          type: nullable("OneofMemberMessage2Input"),
          extensions: {
            protobufField: {
              name: "optoinal_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
      },
    },
  },
);

export const OneofMemberMessage1Input = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage1",
        name: "OneofMemberMessage1",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage1Input"],
    ): testapis.oneof.OneofMemberMessage1 => {
      const output = new testapis.oneof.OneofMemberMessage1();
      output.body = input.body;
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMemberMessage2Input = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage2Input",
    definition: (t) => {
      t.field("imageUrl", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "image_url", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage2",
        name: "OneofMemberMessage2",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage2Input"],
    ): testapis.oneof.OneofMemberMessage2 => {
      const output = new testapis.oneof.OneofMemberMessage2();
      output.imageUrl = input.imageUrl;
      return output;
    },
    _protoNexus: {
      fields: {
        imageUrl: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "image_url", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const OneofParentRequiredOneofMembers = unionType({
  name: "OneofParentRequiredOneofMembers",
  description: "Required. disallow not_set.",
  definition: (t) => {
    t.members(OneofMemberMessage1, OneofMemberMessage2);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.oneof.OneofParent.required_oneof_members",
      name: "required_oneof_members",
      messageName: "OneofParent",
      package: "testapis.oneof",
      fields: [{
        name: "required_message1",
        type: "testapis.oneof.OneofMemberMessage1",
      }, {
        name: "required_message2",
        type: "testapis.oneof.OneofMemberMessage2",
      }],
    },
  },
});
export const OneofParentOptionalOneofMembers = unionType({
  name: "OneofParentOptionalOneofMembers",
  definition: (t) => {
    t.members(OneofMemberMessage1, OneofMemberMessage2);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.oneof.OneofParent.optional_oneof_members",
      name: "optional_oneof_members",
      messageName: "OneofParent",
      package: "testapis.oneof",
      fields: [{
        name: "optoinal_message1",
        type: "testapis.oneof.OneofMemberMessage1",
      }, {
        name: "optoinal_message2",
        type: "testapis.oneof.OneofMemberMessage2",
      }],
    },
  },
});
",
    "name": "testapis/oneof/oneof_pb_nexus.ts",
  },
]
`;

exports[`'testapis.oneof' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/oneof/oneof.proto

/* eslint-disable */

import {
  inputObjectType,
  nonNull,
  nullable,
  objectType,
  unionType,
} from "nexus";
import {
  OneofMemberMessage1 as OneofMemberMessage12,
  OneofMemberMessage2 as OneofMemberMessage23,
  OneofParent as OneofParent1,
} from "./testapis/oneof/oneof_pb";

export type testapis$oneof$OneofParent = OneofParent1;
export const OneofParent = objectType({
  name: "OneofParent",
  definition: (t) => {
    t.field("normalField", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getNormalField();
        return value;
      },
      extensions: {
        protobufField: { name: "normal_field", typeFullName: "string" },
      },
    });
    t.field("requiredOneofMembers", {
      type: nonNull("OneofParentRequiredOneofMembers"),
      description: "Required. disallow not_set.",
      resolve: (source) => {
        const value = source;
        switch (value.getRequiredOneofMembersCase()) {
          case OneofParent1.RequiredOneofMembersCase.REQUIRED_MESSAGE1: {
            return value.getRequiredMessage1()!;
          }

          case OneofParent1.RequiredOneofMembersCase.REQUIRED_MESSAGE2: {
            return value.getRequiredMessage2()!;
          }

          default: {
            throw new Error(
              "One of the following fields must be non-null: required_message1, required_message2",
            );
          }
        }
      },
      extensions: { protobufField: { name: "required_oneof_members" } },
    });
    t.field("optionalOneofMembers", {
      type: nullable("OneofParentOptionalOneofMembers"),
      resolve: (source) => {
        const value = source;
        switch (value.getOptionalOneofMembersCase()) {
          case OneofParent1.OptionalOneofMembersCase.OPTOINAL_MESSAGE1: {
            return value.getOptoinalMessage1()!;
          }

          case OneofParent1.OptionalOneofMembersCase.OPTOINAL_MESSAGE2: {
            return value.getOptoinalMessage2()!;
          }

          default: {
            return null;
          }
        }
      },
      extensions: { protobufField: { name: "optional_oneof_members" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofParent1;
  },
  sourceType: { module: __filename, export: "testapis$oneof$OneofParent" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofParent",
      name: "OneofParent",
      package: "testapis.oneof",
    },
  },
});

export type testapis$oneof$OneofMemberMessage1 = OneofMemberMessage12;
export const OneofMemberMessage1 = objectType({
  name: "OneofMemberMessage1",
  definition: (t) => {
    t.field("body", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMemberMessage12;
  },
  sourceType: {
    module: __filename,
    export: "testapis$oneof$OneofMemberMessage1",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofMemberMessage1",
      name: "OneofMemberMessage1",
      package: "testapis.oneof",
    },
  },
});

export type testapis$oneof$OneofMemberMessage2 = OneofMemberMessage23;
export const OneofMemberMessage2 = objectType({
  name: "OneofMemberMessage2",
  definition: (t) => {
    t.field("imageUrl", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getImageUrl();
        return value;
      },
      extensions: {
        protobufField: { name: "image_url", typeFullName: "string" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof OneofMemberMessage23;
  },
  sourceType: {
    module: __filename,
    export: "testapis$oneof$OneofMemberMessage2",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.oneof.OneofMemberMessage2",
      name: "OneofMemberMessage2",
      package: "testapis.oneof",
    },
  },
});

export const OneofParentInput = Object.assign(
  inputObjectType({
    name: "OneofParentInput",
    definition: (t) => {
      t.field("normalField", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "normal_field", typeFullName: "string" },
        },
      });
      t.field("requiredMessage1", {
        type: nullable("OneofMemberMessage1Input"),
        extensions: {
          protobufField: {
            name: "required_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("requiredMessage2", {
        type: nullable("OneofMemberMessage2Input"),
        extensions: {
          protobufField: {
            name: "required_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
      t.field("optoinalMessage1", {
        type: nullable("OneofMemberMessage1Input"),
        extensions: {
          protobufField: {
            name: "optoinal_message1",
            typeFullName: "testapis.oneof.OneofMemberMessage1",
          },
        },
      });
      t.field("optoinalMessage2", {
        type: nullable("OneofMemberMessage2Input"),
        extensions: {
          protobufField: {
            name: "optoinal_message2",
            typeFullName: "testapis.oneof.OneofMemberMessage2",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofParent",
        name: "OneofParent",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofParentInput"],
    ): OneofParent1 => {
      const output = new OneofParent1();
      output.setNormalField(input.normalField);
      if (input.requiredMessage1 != null) {
        output.setRequiredMessage1(
          OneofMemberMessage1Input.toProto(input.requiredMessage1),
        );
      }
      if (input.requiredMessage2 != null) {
        output.setRequiredMessage2(
          OneofMemberMessage2Input.toProto(input.requiredMessage2),
        );
      }
      if (input.optoinalMessage1 != null) {
        output.setOptoinalMessage1(
          OneofMemberMessage1Input.toProto(input.optoinalMessage1),
        );
      }
      if (input.optoinalMessage2 != null) {
        output.setOptoinalMessage2(
          OneofMemberMessage2Input.toProto(input.optoinalMessage2),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        normalField: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "normal_field", typeFullName: "string" },
          },
        },
        requiredMessage1: {
          type: nullable("OneofMemberMessage1Input"),
          extensions: {
            protobufField: {
              name: "required_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        requiredMessage2: {
          type: nullable("OneofMemberMessage2Input"),
          extensions: {
            protobufField: {
              name: "required_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
        optoinalMessage1: {
          type: nullable("OneofMemberMessage1Input"),
          extensions: {
            protobufField: {
              name: "optoinal_message1",
              typeFullName: "testapis.oneof.OneofMemberMessage1",
            },
          },
        },
        optoinalMessage2: {
          type: nullable("OneofMemberMessage2Input"),
          extensions: {
            protobufField: {
              name: "optoinal_message2",
              typeFullName: "testapis.oneof.OneofMemberMessage2",
            },
          },
        },
      },
    },
  },
);

export const OneofMemberMessage1Input = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage1Input",
    definition: (t) => {
      t.field("body", {
        type: nonNull("String"),
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage1",
        name: "OneofMemberMessage1",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage1Input"],
    ): OneofMemberMessage12 => {
      const output = new OneofMemberMessage12();
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const OneofMemberMessage2Input = Object.assign(
  inputObjectType({
    name: "OneofMemberMessage2Input",
    definition: (t) => {
      t.field("imageUrl", {
        type: nonNull("String"),
        extensions: {
          protobufField: { name: "image_url", typeFullName: "string" },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.oneof.OneofMemberMessage2",
        name: "OneofMemberMessage2",
        package: "testapis.oneof",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["OneofMemberMessage2Input"],
    ): OneofMemberMessage23 => {
      const output = new OneofMemberMessage23();
      output.setImageUrl(input.imageUrl);
      return output;
    },
    _protoNexus: {
      fields: {
        imageUrl: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "image_url", typeFullName: "string" },
          },
        },
      },
    },
  },
);
export const OneofParentRequiredOneofMembers = unionType({
  name: "OneofParentRequiredOneofMembers",
  description: "Required. disallow not_set.",
  definition: (t) => {
    t.members(OneofMemberMessage1, OneofMemberMessage2);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.oneof.OneofParent.required_oneof_members",
      name: "required_oneof_members",
      messageName: "OneofParent",
      package: "testapis.oneof",
      fields: [{
        name: "required_message1",
        type: "testapis.oneof.OneofMemberMessage1",
      }, {
        name: "required_message2",
        type: "testapis.oneof.OneofMemberMessage2",
      }],
    },
  },
});
export const OneofParentOptionalOneofMembers = unionType({
  name: "OneofParentOptionalOneofMembers",
  definition: (t) => {
    t.members(OneofMemberMessage1, OneofMemberMessage2);
  },
  extensions: {
    protobufOneof: {
      fullName: "testapis.oneof.OneofParent.optional_oneof_members",
      name: "optional_oneof_members",
      messageName: "OneofParent",
      package: "testapis.oneof",
      fields: [{
        name: "optoinal_message1",
        type: "testapis.oneof.OneofMemberMessage1",
      }, {
        name: "optoinal_message2",
        type: "testapis.oneof.OneofMemberMessage2",
      }],
    },
  },
});
",
    "name": "testapis/oneof/oneof_pb_nexus.ts",
  },
]
`;

exports[`'testapis.primitives' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

/* eslint-disable */

import { Message as Message1 } from "@testapis/proto/testapis/primitives/primitives_pb";
import { list, nonNull, nullable, objectType } from "nexus";
import { Primitives } from "./Primitives.nexus";

export type testapis$primitives$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("requiredPrimitives", {
      type: nonNull(Primitives),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredPrimitives();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_primitives",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("optionalPrimitives", {
      type: nullable(Primitives),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalPrimitives();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_primitives",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("requiredPrimitivesList", {
      type: nonNull(list(nonNull(Primitives))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredPrimitivesListList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_primitives_list",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("optionalPrimitivesList", {
      type: nullable(list(nonNull(Primitives))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalPrimitivesListList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "optional_primitives_list",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: { module: __filename, export: "testapis$primitives$Message" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.primitives.Message",
      name: "Message",
      package: "testapis.primitives",
    },
  },
});
",
    "name": "testapis/primitives/Message.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

/* eslint-disable */

import { Primitives as Primitives1 } from "@testapis/proto/testapis/primitives/primitives_pb";
import { list, nonNull, objectType } from "nexus";

export type testapis$primitives$Primitives = Primitives1;
export const Primitives = objectType({
  name: "Primitives",
  definition: (t) => {
    t.field("requiredDoubleValue", {
      type: nonNull("Float"),
      resolve: (source) => {
        const value = source.getRequiredDoubleValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_double_value",
          typeFullName: "double",
        },
      },
    });
    t.field("requiredFloatValue", {
      type: nonNull("Float"),
      resolve: (source) => {
        const value = source.getRequiredFloatValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_float_value", typeFullName: "float" },
      },
    });
    t.field("requiredInt32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredInt32Value();
        return value;
      },
      extensions: {
        protobufField: { name: "required_int32_value", typeFullName: "int32" },
      },
    });
    t.field("requiredInt64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredInt64Value();
        return value.toString();
      },
      extensions: {
        protobufField: { name: "required_int64_value", typeFullName: "int64" },
      },
    });
    t.field("requiredUint32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredUint32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_uint32_value",
          typeFullName: "uint32",
        },
      },
    });
    t.field("requiredUint64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredUint64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_uint64_value",
          typeFullName: "uint64",
        },
      },
    });
    t.field("requiredSint32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredSint32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_sint32_value",
          typeFullName: "sint32",
        },
      },
    });
    t.field("requiredSint64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredSint64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_sint64_value",
          typeFullName: "sint64",
        },
      },
    });
    t.field("requiredFixed32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredFixed32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_fixed32_value",
          typeFullName: "fixed32",
        },
      },
    });
    t.field("requiredFixed64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredFixed64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_fixed64_value",
          typeFullName: "fixed64",
        },
      },
    });
    t.field("requiredSfixed32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredSfixed32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_sfixed32_value",
          typeFullName: "sfixed32",
        },
      },
    });
    t.field("requiredSfixed64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredSfixed64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_sfixed64_value",
          typeFullName: "sfixed64",
        },
      },
    });
    t.field("requiredBoolValue", {
      type: nonNull("Boolean"),
      resolve: (source) => {
        const value = source.getRequiredBoolValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_bool_value", typeFullName: "bool" },
      },
    });
    t.field("requiredStringValue", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_string_value",
          typeFullName: "string",
        },
      },
    });
    t.field("requiredBytesValue", {
      type: nonNull("Byte"),
      resolve: (source) => {
        const value = source.getRequiredBytesValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_bytes_value", typeFullName: "bytes" },
      },
    });
    t.field("requiredDoubleValues", {
      type: nonNull(list(nonNull("Float"))),
      resolve: (source) => {
        return source.getRequiredDoubleValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_double_values",
          typeFullName: "double",
        },
      },
    });
    t.field("requiredFloatValues", {
      type: nonNull(list(nonNull("Float"))),
      resolve: (source) => {
        return source.getRequiredFloatValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_float_values", typeFullName: "float" },
      },
    });
    t.field("requiredInt32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredInt32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_int32_values", typeFullName: "int32" },
      },
    });
    t.field("requiredInt64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredInt64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: { name: "required_int64_values", typeFullName: "int64" },
      },
    });
    t.field("requiredUint32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredUint32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_uint32_values",
          typeFullName: "uint32",
        },
      },
    });
    t.field("requiredUint64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredUint64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_uint64_values",
          typeFullName: "uint64",
        },
      },
    });
    t.field("requiredSint32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredSint32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_sint32_values",
          typeFullName: "sint32",
        },
      },
    });
    t.field("requiredSint64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredSint64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_sint64_values",
          typeFullName: "sint64",
        },
      },
    });
    t.field("requiredFixed32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredFixed32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_fixed32_values",
          typeFullName: "fixed32",
        },
      },
    });
    t.field("requiredFixed64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredFixed64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_fixed64_values",
          typeFullName: "fixed64",
        },
      },
    });
    t.field("requiredSfixed32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredSfixed32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_sfixed32_values",
          typeFullName: "sfixed32",
        },
      },
    });
    t.field("requiredSfixed64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredSfixed64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_sfixed64_values",
          typeFullName: "sfixed64",
        },
      },
    });
    t.field("requiredBoolValues", {
      type: nonNull(list(nonNull("Boolean"))),
      resolve: (source) => {
        return source.getRequiredBoolValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_bool_values", typeFullName: "bool" },
      },
    });
    t.field("requiredStringValues", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredStringValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_string_values",
          typeFullName: "string",
        },
      },
    });
    t.field("requiredBytesValues", {
      type: nonNull(list(nonNull("Byte"))),
      resolve: (source) => {
        return source.getRequiredBytesValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_bytes_values", typeFullName: "bytes" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Primitives1;
  },
  sourceType: { module: __filename, export: "testapis$primitives$Primitives" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.primitives.Primitives",
      name: "Primitives",
      package: "testapis.primitives",
    },
  },
});
",
    "name": "testapis/primitives/Primitives.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

/* eslint-disable */

import { Message } from "@testapis/proto/testapis/primitives/primitives_pb";
import { inputObjectType, list, nonNull, nullable } from "nexus";
import { PrimitivesInput } from "./PrimitivesInput.nexus";

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("requiredPrimitives", {
        type: nonNull(PrimitivesInput),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitives", {
        type: nullable(PrimitivesInput),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("requiredPrimitivesList", {
        type: nonNull(list(nonNull(PrimitivesInput))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitivesList", {
        type: nullable(list(nonNull(PrimitivesInput))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Message",
        name: "Message",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message => {
      const output = new Message();
      output.setRequiredPrimitives(
        PrimitivesInput.toProto(input.requiredPrimitives),
      );
      if (input.optionalPrimitives != null) {
        output.setOptionalPrimitives(
          PrimitivesInput.toProto(input.optionalPrimitives),
        );
      }
      output.setRequiredPrimitivesListList(
        input.requiredPrimitivesList.map((v) => PrimitivesInput.toProto(v)),
      );
      if (input.optionalPrimitivesList != null) {
        output.setOptionalPrimitivesListList(
          input.optionalPrimitivesList.map((v) => PrimitivesInput.toProto(v)),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredPrimitives: {
          type: nonNull(PrimitivesInput),
          extensions: {
            protobufField: {
              name: "required_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitives: {
          type: nullable(PrimitivesInput),
          extensions: {
            protobufField: {
              name: "optional_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        requiredPrimitivesList: {
          type: nonNull(list(nonNull(PrimitivesInput))),
          extensions: {
            protobufField: {
              name: "required_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitivesList: {
          type: nullable(list(nonNull(PrimitivesInput))),
          extensions: {
            protobufField: {
              name: "optional_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/primitives/MessageInput.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

/* eslint-disable */

import { Primitives } from "@testapis/proto/testapis/primitives/primitives_pb";
import { inputObjectType, list, nonNull } from "nexus";
import { stringToNumber } from "proto-nexus";

export const PrimitivesInput = Object.assign(
  inputObjectType({
    name: "PrimitivesInput",
    definition: (t) => {
      t.field("requiredDoubleValue", {
        type: nonNull("Float"),
        extensions: {
          protobufField: {
            name: "required_double_value",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValue", {
        type: nonNull("Float"),
        extensions: {
          protobufField: {
            name: "required_float_value",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_int32_value",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_int64_value",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_uint32_value",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_uint64_value",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_sint32_value",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_sint64_value",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_fixed32_value",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_fixed64_value",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_sfixed32_value",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_sfixed64_value",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValue", {
        type: nonNull("Boolean"),
        extensions: {
          protobufField: { name: "required_bool_value", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValue", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValue", {
        type: nonNull("Byte"),
        extensions: {
          protobufField: {
            name: "required_bytes_value",
            typeFullName: "bytes",
          },
        },
      });
      t.field("requiredDoubleValues", {
        type: nonNull(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_double_values",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValues", {
        type: nonNull(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_float_values",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_int32_values",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_int64_values",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_uint32_values",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_uint64_values",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sint32_values",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sint64_values",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_fixed32_values",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_fixed64_values",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sfixed32_values",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sfixed64_values",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValues", {
        type: nonNull(list(nonNull("Boolean"))),
        extensions: {
          protobufField: { name: "required_bool_values", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValues", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_string_values",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValues", {
        type: nonNull(list(nonNull("Byte"))),
        extensions: {
          protobufField: {
            name: "required_bytes_values",
            typeFullName: "bytes",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Primitives",
        name: "Primitives",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["PrimitivesInput"]): Primitives => {
      const output = new Primitives();
      output.setRequiredDoubleValue(input.requiredDoubleValue);
      output.setRequiredFloatValue(input.requiredFloatValue);
      output.setRequiredInt32Value(input.requiredInt32Value);
      output.setRequiredInt64Value(stringToNumber(input.requiredInt64Value));
      output.setRequiredUint32Value(input.requiredUint32Value);
      output.setRequiredUint64Value(stringToNumber(input.requiredUint64Value));
      output.setRequiredSint32Value(input.requiredSint32Value);
      output.setRequiredSint64Value(stringToNumber(input.requiredSint64Value));
      output.setRequiredFixed32Value(input.requiredFixed32Value);
      output.setRequiredFixed64Value(
        stringToNumber(input.requiredFixed64Value),
      );
      output.setRequiredSfixed32Value(input.requiredSfixed32Value);
      output.setRequiredSfixed64Value(
        stringToNumber(input.requiredSfixed64Value),
      );
      output.setRequiredBoolValue(input.requiredBoolValue);
      output.setRequiredStringValue(input.requiredStringValue);
      output.setRequiredBytesValue(input.requiredBytesValue);
      output.setRequiredDoubleValuesList(
        input.requiredDoubleValues.map((v) => v),
      );
      output.setRequiredFloatValuesList(
        input.requiredFloatValues.map((v) => v),
      );
      output.setRequiredInt32ValuesList(
        input.requiredInt32Values.map((v) => v),
      );
      output.setRequiredInt64ValuesList(
        input.requiredInt64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredUint32ValuesList(
        input.requiredUint32Values.map((v) => v),
      );
      output.setRequiredUint64ValuesList(
        input.requiredUint64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredSint32ValuesList(
        input.requiredSint32Values.map((v) => v),
      );
      output.setRequiredSint64ValuesList(
        input.requiredSint64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredFixed32ValuesList(
        input.requiredFixed32Values.map((v) => v),
      );
      output.setRequiredFixed64ValuesList(
        input.requiredFixed64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredSfixed32ValuesList(
        input.requiredSfixed32Values.map((v) => v),
      );
      output.setRequiredSfixed64ValuesList(
        input.requiredSfixed64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredBoolValuesList(input.requiredBoolValues.map((v) => v));
      output.setRequiredStringValuesList(
        input.requiredStringValues.map((v) => v),
      );
      output.setRequiredBytesValuesList(
        input.requiredBytesValues.map((v) => v),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        requiredDoubleValue: {
          type: nonNull("Float"),
          extensions: {
            protobufField: {
              name: "required_double_value",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValue: {
          type: nonNull("Float"),
          extensions: {
            protobufField: {
              name: "required_float_value",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_int32_value",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_int64_value",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_uint32_value",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_uint64_value",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_sint32_value",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_sint64_value",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_fixed32_value",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_fixed64_value",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_sfixed32_value",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_sfixed64_value",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValue: {
          type: nonNull("Boolean"),
          extensions: {
            protobufField: {
              name: "required_bool_value",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValue: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValue: {
          type: nonNull("Byte"),
          extensions: {
            protobufField: {
              name: "required_bytes_value",
              typeFullName: "bytes",
            },
          },
        },
        requiredDoubleValues: {
          type: nonNull(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_double_values",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValues: {
          type: nonNull(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_float_values",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_int32_values",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_int64_values",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_uint32_values",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_uint64_values",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sint32_values",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sint64_values",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_fixed32_values",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_fixed64_values",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sfixed32_values",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sfixed64_values",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValues: {
          type: nonNull(list(nonNull("Boolean"))),
          extensions: {
            protobufField: {
              name: "required_bool_values",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValues: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_string_values",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValues: {
          type: nonNull(list(nonNull("Byte"))),
          extensions: {
            protobufField: {
              name: "required_bytes_values",
              typeFullName: "bytes",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/primitives/PrimitivesInput.nexus.ts",
  },
]
`;

exports[`'testapis.primitives' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

/* eslint-disable */

import {
  Message as Message1,
  Primitives as Primitives2,
} from "@testapis/proto/testapis/primitives/primitives_pb";
import { inputObjectType, list, nonNull, nullable, objectType } from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$primitives$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("requiredPrimitives", {
      type: nonNull("Primitives"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredPrimitives();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_primitives",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("optionalPrimitives", {
      type: nullable("Primitives"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalPrimitives();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_primitives",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("requiredPrimitivesList", {
      type: nonNull(list(nonNull("Primitives"))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredPrimitivesListList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_primitives_list",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("optionalPrimitivesList", {
      type: nullable(list(nonNull("Primitives"))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalPrimitivesListList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "optional_primitives_list",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: { module: __filename, export: "testapis$primitives$Message" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.primitives.Message",
      name: "Message",
      package: "testapis.primitives",
    },
  },
});

export type testapis$primitives$Primitives = Primitives2;
export const Primitives = objectType({
  name: "Primitives",
  definition: (t) => {
    t.field("requiredDoubleValue", {
      type: nonNull("Float"),
      resolve: (source) => {
        const value = source.getRequiredDoubleValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_double_value",
          typeFullName: "double",
        },
      },
    });
    t.field("requiredFloatValue", {
      type: nonNull("Float"),
      resolve: (source) => {
        const value = source.getRequiredFloatValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_float_value", typeFullName: "float" },
      },
    });
    t.field("requiredInt32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredInt32Value();
        return value;
      },
      extensions: {
        protobufField: { name: "required_int32_value", typeFullName: "int32" },
      },
    });
    t.field("requiredInt64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredInt64Value();
        return value.toString();
      },
      extensions: {
        protobufField: { name: "required_int64_value", typeFullName: "int64" },
      },
    });
    t.field("requiredUint32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredUint32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_uint32_value",
          typeFullName: "uint32",
        },
      },
    });
    t.field("requiredUint64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredUint64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_uint64_value",
          typeFullName: "uint64",
        },
      },
    });
    t.field("requiredSint32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredSint32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_sint32_value",
          typeFullName: "sint32",
        },
      },
    });
    t.field("requiredSint64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredSint64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_sint64_value",
          typeFullName: "sint64",
        },
      },
    });
    t.field("requiredFixed32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredFixed32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_fixed32_value",
          typeFullName: "fixed32",
        },
      },
    });
    t.field("requiredFixed64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredFixed64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_fixed64_value",
          typeFullName: "fixed64",
        },
      },
    });
    t.field("requiredSfixed32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredSfixed32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_sfixed32_value",
          typeFullName: "sfixed32",
        },
      },
    });
    t.field("requiredSfixed64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredSfixed64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_sfixed64_value",
          typeFullName: "sfixed64",
        },
      },
    });
    t.field("requiredBoolValue", {
      type: nonNull("Boolean"),
      resolve: (source) => {
        const value = source.getRequiredBoolValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_bool_value", typeFullName: "bool" },
      },
    });
    t.field("requiredStringValue", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_string_value",
          typeFullName: "string",
        },
      },
    });
    t.field("requiredBytesValue", {
      type: nonNull("Byte"),
      resolve: (source) => {
        const value = source.getRequiredBytesValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_bytes_value", typeFullName: "bytes" },
      },
    });
    t.field("requiredDoubleValues", {
      type: nonNull(list(nonNull("Float"))),
      resolve: (source) => {
        return source.getRequiredDoubleValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_double_values",
          typeFullName: "double",
        },
      },
    });
    t.field("requiredFloatValues", {
      type: nonNull(list(nonNull("Float"))),
      resolve: (source) => {
        return source.getRequiredFloatValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_float_values", typeFullName: "float" },
      },
    });
    t.field("requiredInt32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredInt32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_int32_values", typeFullName: "int32" },
      },
    });
    t.field("requiredInt64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredInt64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: { name: "required_int64_values", typeFullName: "int64" },
      },
    });
    t.field("requiredUint32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredUint32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_uint32_values",
          typeFullName: "uint32",
        },
      },
    });
    t.field("requiredUint64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredUint64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_uint64_values",
          typeFullName: "uint64",
        },
      },
    });
    t.field("requiredSint32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredSint32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_sint32_values",
          typeFullName: "sint32",
        },
      },
    });
    t.field("requiredSint64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredSint64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_sint64_values",
          typeFullName: "sint64",
        },
      },
    });
    t.field("requiredFixed32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredFixed32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_fixed32_values",
          typeFullName: "fixed32",
        },
      },
    });
    t.field("requiredFixed64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredFixed64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_fixed64_values",
          typeFullName: "fixed64",
        },
      },
    });
    t.field("requiredSfixed32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredSfixed32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_sfixed32_values",
          typeFullName: "sfixed32",
        },
      },
    });
    t.field("requiredSfixed64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredSfixed64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_sfixed64_values",
          typeFullName: "sfixed64",
        },
      },
    });
    t.field("requiredBoolValues", {
      type: nonNull(list(nonNull("Boolean"))),
      resolve: (source) => {
        return source.getRequiredBoolValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_bool_values", typeFullName: "bool" },
      },
    });
    t.field("requiredStringValues", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredStringValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_string_values",
          typeFullName: "string",
        },
      },
    });
    t.field("requiredBytesValues", {
      type: nonNull(list(nonNull("Byte"))),
      resolve: (source) => {
        return source.getRequiredBytesValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_bytes_values", typeFullName: "bytes" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Primitives2;
  },
  sourceType: { module: __filename, export: "testapis$primitives$Primitives" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.primitives.Primitives",
      name: "Primitives",
      package: "testapis.primitives",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("requiredPrimitives", {
        type: nonNull("PrimitivesInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitives", {
        type: nullable("PrimitivesInput"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("requiredPrimitivesList", {
        type: nonNull(list(nonNull("PrimitivesInput"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitivesList", {
        type: nullable(list(nonNull("PrimitivesInput"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Message",
        name: "Message",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      output.setRequiredPrimitives(
        PrimitivesInput.toProto(input.requiredPrimitives),
      );
      if (input.optionalPrimitives != null) {
        output.setOptionalPrimitives(
          PrimitivesInput.toProto(input.optionalPrimitives),
        );
      }
      output.setRequiredPrimitivesListList(
        input.requiredPrimitivesList.map((v) => PrimitivesInput.toProto(v)),
      );
      if (input.optionalPrimitivesList != null) {
        output.setOptionalPrimitivesListList(
          input.optionalPrimitivesList.map((v) => PrimitivesInput.toProto(v)),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredPrimitives: {
          type: nonNull("PrimitivesInput"),
          extensions: {
            protobufField: {
              name: "required_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitives: {
          type: nullable("PrimitivesInput"),
          extensions: {
            protobufField: {
              name: "optional_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        requiredPrimitivesList: {
          type: nonNull(list(nonNull("PrimitivesInput"))),
          extensions: {
            protobufField: {
              name: "required_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitivesList: {
          type: nullable(list(nonNull("PrimitivesInput"))),
          extensions: {
            protobufField: {
              name: "optional_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
      },
    },
  },
);

export const PrimitivesInput = Object.assign(
  inputObjectType({
    name: "PrimitivesInput",
    definition: (t) => {
      t.field("requiredDoubleValue", {
        type: nonNull("Float"),
        extensions: {
          protobufField: {
            name: "required_double_value",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValue", {
        type: nonNull("Float"),
        extensions: {
          protobufField: {
            name: "required_float_value",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_int32_value",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_int64_value",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_uint32_value",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_uint64_value",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_sint32_value",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_sint64_value",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_fixed32_value",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_fixed64_value",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_sfixed32_value",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_sfixed64_value",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValue", {
        type: nonNull("Boolean"),
        extensions: {
          protobufField: { name: "required_bool_value", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValue", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValue", {
        type: nonNull("Byte"),
        extensions: {
          protobufField: {
            name: "required_bytes_value",
            typeFullName: "bytes",
          },
        },
      });
      t.field("requiredDoubleValues", {
        type: nonNull(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_double_values",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValues", {
        type: nonNull(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_float_values",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_int32_values",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_int64_values",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_uint32_values",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_uint64_values",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sint32_values",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sint64_values",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_fixed32_values",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_fixed64_values",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sfixed32_values",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sfixed64_values",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValues", {
        type: nonNull(list(nonNull("Boolean"))),
        extensions: {
          protobufField: { name: "required_bool_values", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValues", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_string_values",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValues", {
        type: nonNull(list(nonNull("Byte"))),
        extensions: {
          protobufField: {
            name: "required_bytes_values",
            typeFullName: "bytes",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Primitives",
        name: "Primitives",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PrimitivesInput"],
    ): Primitives2 => {
      const output = new Primitives2();
      output.setRequiredDoubleValue(input.requiredDoubleValue);
      output.setRequiredFloatValue(input.requiredFloatValue);
      output.setRequiredInt32Value(input.requiredInt32Value);
      output.setRequiredInt64Value(stringToNumber(input.requiredInt64Value));
      output.setRequiredUint32Value(input.requiredUint32Value);
      output.setRequiredUint64Value(stringToNumber(input.requiredUint64Value));
      output.setRequiredSint32Value(input.requiredSint32Value);
      output.setRequiredSint64Value(stringToNumber(input.requiredSint64Value));
      output.setRequiredFixed32Value(input.requiredFixed32Value);
      output.setRequiredFixed64Value(
        stringToNumber(input.requiredFixed64Value),
      );
      output.setRequiredSfixed32Value(input.requiredSfixed32Value);
      output.setRequiredSfixed64Value(
        stringToNumber(input.requiredSfixed64Value),
      );
      output.setRequiredBoolValue(input.requiredBoolValue);
      output.setRequiredStringValue(input.requiredStringValue);
      output.setRequiredBytesValue(input.requiredBytesValue);
      output.setRequiredDoubleValuesList(
        input.requiredDoubleValues.map((v) => v),
      );
      output.setRequiredFloatValuesList(
        input.requiredFloatValues.map((v) => v),
      );
      output.setRequiredInt32ValuesList(
        input.requiredInt32Values.map((v) => v),
      );
      output.setRequiredInt64ValuesList(
        input.requiredInt64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredUint32ValuesList(
        input.requiredUint32Values.map((v) => v),
      );
      output.setRequiredUint64ValuesList(
        input.requiredUint64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredSint32ValuesList(
        input.requiredSint32Values.map((v) => v),
      );
      output.setRequiredSint64ValuesList(
        input.requiredSint64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredFixed32ValuesList(
        input.requiredFixed32Values.map((v) => v),
      );
      output.setRequiredFixed64ValuesList(
        input.requiredFixed64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredSfixed32ValuesList(
        input.requiredSfixed32Values.map((v) => v),
      );
      output.setRequiredSfixed64ValuesList(
        input.requiredSfixed64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredBoolValuesList(input.requiredBoolValues.map((v) => v));
      output.setRequiredStringValuesList(
        input.requiredStringValues.map((v) => v),
      );
      output.setRequiredBytesValuesList(
        input.requiredBytesValues.map((v) => v),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        requiredDoubleValue: {
          type: nonNull("Float"),
          extensions: {
            protobufField: {
              name: "required_double_value",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValue: {
          type: nonNull("Float"),
          extensions: {
            protobufField: {
              name: "required_float_value",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_int32_value",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_int64_value",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_uint32_value",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_uint64_value",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_sint32_value",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_sint64_value",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_fixed32_value",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_fixed64_value",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_sfixed32_value",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_sfixed64_value",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValue: {
          type: nonNull("Boolean"),
          extensions: {
            protobufField: {
              name: "required_bool_value",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValue: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValue: {
          type: nonNull("Byte"),
          extensions: {
            protobufField: {
              name: "required_bytes_value",
              typeFullName: "bytes",
            },
          },
        },
        requiredDoubleValues: {
          type: nonNull(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_double_values",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValues: {
          type: nonNull(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_float_values",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_int32_values",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_int64_values",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_uint32_values",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_uint64_values",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sint32_values",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sint64_values",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_fixed32_values",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_fixed64_values",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sfixed32_values",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sfixed64_values",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValues: {
          type: nonNull(list(nonNull("Boolean"))),
          extensions: {
            protobufField: {
              name: "required_bool_values",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValues: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_string_values",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValues: {
          type: nonNull(list(nonNull("Byte"))),
          extensions: {
            protobufField: {
              name: "required_bytes_values",
              typeFullName: "bytes",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/primitives/primitives_pb_nexus.ts",
  },
]
`;

exports[`'testapis.primitives' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

/* eslint-disable */

import {
  Message as Message1,
  Primitives as Primitives2,
} from "@testapis/proto/testapis/primitives/primitives_pb";
import { inputObjectType, list, nonNull, nullable, objectType } from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$primitives$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("requiredPrimitives", {
      type: nonNull("Primitives"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredPrimitives();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_primitives",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("optionalPrimitives", {
      type: nullable("Primitives"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalPrimitives();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_primitives",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("requiredPrimitivesList", {
      type: nonNull(list(nonNull("Primitives"))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredPrimitivesListList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_primitives_list",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("optionalPrimitivesList", {
      type: nullable(list(nonNull("Primitives"))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalPrimitivesListList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "optional_primitives_list",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: { module: __filename, export: "testapis$primitives$Message" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.primitives.Message",
      name: "Message",
      package: "testapis.primitives",
    },
  },
});

export type testapis$primitives$Primitives = Primitives2;
export const Primitives = objectType({
  name: "Primitives",
  definition: (t) => {
    t.field("requiredDoubleValue", {
      type: nonNull("Float"),
      resolve: (source) => {
        const value = source.getRequiredDoubleValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_double_value",
          typeFullName: "double",
        },
      },
    });
    t.field("requiredFloatValue", {
      type: nonNull("Float"),
      resolve: (source) => {
        const value = source.getRequiredFloatValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_float_value", typeFullName: "float" },
      },
    });
    t.field("requiredInt32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredInt32Value();
        return value;
      },
      extensions: {
        protobufField: { name: "required_int32_value", typeFullName: "int32" },
      },
    });
    t.field("requiredInt64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredInt64Value();
        return value.toString();
      },
      extensions: {
        protobufField: { name: "required_int64_value", typeFullName: "int64" },
      },
    });
    t.field("requiredUint32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredUint32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_uint32_value",
          typeFullName: "uint32",
        },
      },
    });
    t.field("requiredUint64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredUint64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_uint64_value",
          typeFullName: "uint64",
        },
      },
    });
    t.field("requiredSint32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredSint32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_sint32_value",
          typeFullName: "sint32",
        },
      },
    });
    t.field("requiredSint64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredSint64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_sint64_value",
          typeFullName: "sint64",
        },
      },
    });
    t.field("requiredFixed32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredFixed32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_fixed32_value",
          typeFullName: "fixed32",
        },
      },
    });
    t.field("requiredFixed64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredFixed64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_fixed64_value",
          typeFullName: "fixed64",
        },
      },
    });
    t.field("requiredSfixed32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredSfixed32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_sfixed32_value",
          typeFullName: "sfixed32",
        },
      },
    });
    t.field("requiredSfixed64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredSfixed64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_sfixed64_value",
          typeFullName: "sfixed64",
        },
      },
    });
    t.field("requiredBoolValue", {
      type: nonNull("Boolean"),
      resolve: (source) => {
        const value = source.getRequiredBoolValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_bool_value", typeFullName: "bool" },
      },
    });
    t.field("requiredStringValue", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_string_value",
          typeFullName: "string",
        },
      },
    });
    t.field("requiredBytesValue", {
      type: nonNull("Byte"),
      resolve: (source) => {
        const value = source.getRequiredBytesValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_bytes_value", typeFullName: "bytes" },
      },
    });
    t.field("requiredDoubleValues", {
      type: nonNull(list(nonNull("Float"))),
      resolve: (source) => {
        return source.getRequiredDoubleValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_double_values",
          typeFullName: "double",
        },
      },
    });
    t.field("requiredFloatValues", {
      type: nonNull(list(nonNull("Float"))),
      resolve: (source) => {
        return source.getRequiredFloatValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_float_values", typeFullName: "float" },
      },
    });
    t.field("requiredInt32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredInt32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_int32_values", typeFullName: "int32" },
      },
    });
    t.field("requiredInt64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredInt64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: { name: "required_int64_values", typeFullName: "int64" },
      },
    });
    t.field("requiredUint32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredUint32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_uint32_values",
          typeFullName: "uint32",
        },
      },
    });
    t.field("requiredUint64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredUint64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_uint64_values",
          typeFullName: "uint64",
        },
      },
    });
    t.field("requiredSint32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredSint32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_sint32_values",
          typeFullName: "sint32",
        },
      },
    });
    t.field("requiredSint64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredSint64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_sint64_values",
          typeFullName: "sint64",
        },
      },
    });
    t.field("requiredFixed32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredFixed32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_fixed32_values",
          typeFullName: "fixed32",
        },
      },
    });
    t.field("requiredFixed64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredFixed64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_fixed64_values",
          typeFullName: "fixed64",
        },
      },
    });
    t.field("requiredSfixed32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredSfixed32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_sfixed32_values",
          typeFullName: "sfixed32",
        },
      },
    });
    t.field("requiredSfixed64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredSfixed64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_sfixed64_values",
          typeFullName: "sfixed64",
        },
      },
    });
    t.field("requiredBoolValues", {
      type: nonNull(list(nonNull("Boolean"))),
      resolve: (source) => {
        return source.getRequiredBoolValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_bool_values", typeFullName: "bool" },
      },
    });
    t.field("requiredStringValues", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredStringValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_string_values",
          typeFullName: "string",
        },
      },
    });
    t.field("requiredBytesValues", {
      type: nonNull(list(nonNull("Byte"))),
      resolve: (source) => {
        return source.getRequiredBytesValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_bytes_values", typeFullName: "bytes" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Primitives2;
  },
  sourceType: { module: __filename, export: "testapis$primitives$Primitives" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.primitives.Primitives",
      name: "Primitives",
      package: "testapis.primitives",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("requiredPrimitives", {
        type: nonNull("PrimitivesInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitives", {
        type: nullable("PrimitivesInput"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("requiredPrimitivesList", {
        type: nonNull(list(nonNull("PrimitivesInput"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitivesList", {
        type: nullable(list(nonNull("PrimitivesInput"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Message",
        name: "Message",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      output.setRequiredPrimitives(
        PrimitivesInput.toProto(input.requiredPrimitives),
      );
      if (input.optionalPrimitives != null) {
        output.setOptionalPrimitives(
          PrimitivesInput.toProto(input.optionalPrimitives),
        );
      }
      output.setRequiredPrimitivesListList(
        input.requiredPrimitivesList.map((v) => PrimitivesInput.toProto(v)),
      );
      if (input.optionalPrimitivesList != null) {
        output.setOptionalPrimitivesListList(
          input.optionalPrimitivesList.map((v) => PrimitivesInput.toProto(v)),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredPrimitives: {
          type: nonNull("PrimitivesInput"),
          extensions: {
            protobufField: {
              name: "required_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitives: {
          type: nullable("PrimitivesInput"),
          extensions: {
            protobufField: {
              name: "optional_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        requiredPrimitivesList: {
          type: nonNull(list(nonNull("PrimitivesInput"))),
          extensions: {
            protobufField: {
              name: "required_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitivesList: {
          type: nullable(list(nonNull("PrimitivesInput"))),
          extensions: {
            protobufField: {
              name: "optional_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
      },
    },
  },
);

export const MessagePartialInput = Object.assign(
  inputObjectType({
    name: "MessagePartialInput",
    definition: (t) => {
      t.field("requiredPrimitives", {
        type: nullable("PrimitivesPartialInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitives", {
        type: nullable("PrimitivesPartialInput"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("requiredPrimitivesList", {
        type: nullable(list(nonNull("PrimitivesPartialInput"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitivesList", {
        type: nullable(list(nonNull("PrimitivesPartialInput"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Message",
        name: "Message",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessagePartialInput"],
    ): Message1 => {
      const output = new Message1();
      if (input.requiredPrimitives != null) {
        output.setRequiredPrimitives(
          PrimitivesPartialInput.toProto(input.requiredPrimitives),
        );
      }
      if (input.optionalPrimitives != null) {
        output.setOptionalPrimitives(
          PrimitivesPartialInput.toProto(input.optionalPrimitives),
        );
      }
      if (input.requiredPrimitivesList != null) {
        output.setRequiredPrimitivesListList(
          input.requiredPrimitivesList.map((v) =>
            PrimitivesPartialInput.toProto(v)
          ),
        );
      }
      if (input.optionalPrimitivesList != null) {
        output.setOptionalPrimitivesListList(
          input.optionalPrimitivesList.map((v) =>
            PrimitivesPartialInput.toProto(v)
          ),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredPrimitives: {
          type: nullable("PrimitivesPartialInput"),
          extensions: {
            protobufField: {
              name: "required_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitives: {
          type: nullable("PrimitivesPartialInput"),
          extensions: {
            protobufField: {
              name: "optional_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        requiredPrimitivesList: {
          type: nullable(list(nonNull("PrimitivesPartialInput"))),
          extensions: {
            protobufField: {
              name: "required_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitivesList: {
          type: nullable(list(nonNull("PrimitivesPartialInput"))),
          extensions: {
            protobufField: {
              name: "optional_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
      },
    },
  },
);

export const PrimitivesInput = Object.assign(
  inputObjectType({
    name: "PrimitivesInput",
    definition: (t) => {
      t.field("requiredDoubleValue", {
        type: nonNull("Float"),
        extensions: {
          protobufField: {
            name: "required_double_value",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValue", {
        type: nonNull("Float"),
        extensions: {
          protobufField: {
            name: "required_float_value",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_int32_value",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_int64_value",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_uint32_value",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_uint64_value",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_sint32_value",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_sint64_value",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_fixed32_value",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_fixed64_value",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_sfixed32_value",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_sfixed64_value",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValue", {
        type: nonNull("Boolean"),
        extensions: {
          protobufField: { name: "required_bool_value", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValue", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValue", {
        type: nonNull("Byte"),
        extensions: {
          protobufField: {
            name: "required_bytes_value",
            typeFullName: "bytes",
          },
        },
      });
      t.field("requiredDoubleValues", {
        type: nonNull(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_double_values",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValues", {
        type: nonNull(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_float_values",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_int32_values",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_int64_values",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_uint32_values",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_uint64_values",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sint32_values",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sint64_values",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_fixed32_values",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_fixed64_values",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sfixed32_values",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sfixed64_values",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValues", {
        type: nonNull(list(nonNull("Boolean"))),
        extensions: {
          protobufField: { name: "required_bool_values", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValues", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_string_values",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValues", {
        type: nonNull(list(nonNull("Byte"))),
        extensions: {
          protobufField: {
            name: "required_bytes_values",
            typeFullName: "bytes",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Primitives",
        name: "Primitives",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PrimitivesInput"],
    ): Primitives2 => {
      const output = new Primitives2();
      output.setRequiredDoubleValue(input.requiredDoubleValue);
      output.setRequiredFloatValue(input.requiredFloatValue);
      output.setRequiredInt32Value(input.requiredInt32Value);
      output.setRequiredInt64Value(stringToNumber(input.requiredInt64Value));
      output.setRequiredUint32Value(input.requiredUint32Value);
      output.setRequiredUint64Value(stringToNumber(input.requiredUint64Value));
      output.setRequiredSint32Value(input.requiredSint32Value);
      output.setRequiredSint64Value(stringToNumber(input.requiredSint64Value));
      output.setRequiredFixed32Value(input.requiredFixed32Value);
      output.setRequiredFixed64Value(
        stringToNumber(input.requiredFixed64Value),
      );
      output.setRequiredSfixed32Value(input.requiredSfixed32Value);
      output.setRequiredSfixed64Value(
        stringToNumber(input.requiredSfixed64Value),
      );
      output.setRequiredBoolValue(input.requiredBoolValue);
      output.setRequiredStringValue(input.requiredStringValue);
      output.setRequiredBytesValue(input.requiredBytesValue);
      output.setRequiredDoubleValuesList(
        input.requiredDoubleValues.map((v) => v),
      );
      output.setRequiredFloatValuesList(
        input.requiredFloatValues.map((v) => v),
      );
      output.setRequiredInt32ValuesList(
        input.requiredInt32Values.map((v) => v),
      );
      output.setRequiredInt64ValuesList(
        input.requiredInt64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredUint32ValuesList(
        input.requiredUint32Values.map((v) => v),
      );
      output.setRequiredUint64ValuesList(
        input.requiredUint64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredSint32ValuesList(
        input.requiredSint32Values.map((v) => v),
      );
      output.setRequiredSint64ValuesList(
        input.requiredSint64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredFixed32ValuesList(
        input.requiredFixed32Values.map((v) => v),
      );
      output.setRequiredFixed64ValuesList(
        input.requiredFixed64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredSfixed32ValuesList(
        input.requiredSfixed32Values.map((v) => v),
      );
      output.setRequiredSfixed64ValuesList(
        input.requiredSfixed64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredBoolValuesList(input.requiredBoolValues.map((v) => v));
      output.setRequiredStringValuesList(
        input.requiredStringValues.map((v) => v),
      );
      output.setRequiredBytesValuesList(
        input.requiredBytesValues.map((v) => v),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        requiredDoubleValue: {
          type: nonNull("Float"),
          extensions: {
            protobufField: {
              name: "required_double_value",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValue: {
          type: nonNull("Float"),
          extensions: {
            protobufField: {
              name: "required_float_value",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_int32_value",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_int64_value",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_uint32_value",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_uint64_value",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_sint32_value",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_sint64_value",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_fixed32_value",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_fixed64_value",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_sfixed32_value",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_sfixed64_value",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValue: {
          type: nonNull("Boolean"),
          extensions: {
            protobufField: {
              name: "required_bool_value",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValue: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValue: {
          type: nonNull("Byte"),
          extensions: {
            protobufField: {
              name: "required_bytes_value",
              typeFullName: "bytes",
            },
          },
        },
        requiredDoubleValues: {
          type: nonNull(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_double_values",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValues: {
          type: nonNull(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_float_values",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_int32_values",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_int64_values",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_uint32_values",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_uint64_values",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sint32_values",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sint64_values",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_fixed32_values",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_fixed64_values",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sfixed32_values",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sfixed64_values",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValues: {
          type: nonNull(list(nonNull("Boolean"))),
          extensions: {
            protobufField: {
              name: "required_bool_values",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValues: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_string_values",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValues: {
          type: nonNull(list(nonNull("Byte"))),
          extensions: {
            protobufField: {
              name: "required_bytes_values",
              typeFullName: "bytes",
            },
          },
        },
      },
    },
  },
);

export const PrimitivesPartialInput = Object.assign(
  inputObjectType({
    name: "PrimitivesPartialInput",
    definition: (t) => {
      t.field("requiredDoubleValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "required_double_value",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "required_float_value",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "required_int32_value",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "required_int64_value",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "required_uint32_value",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "required_uint64_value",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "required_sint32_value",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "required_sint64_value",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "required_fixed32_value",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "required_fixed64_value",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "required_sfixed32_value",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "required_sfixed64_value",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValue", {
        type: nullable("Boolean"),
        extensions: {
          protobufField: { name: "required_bool_value", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValue", {
        type: nullable("Byte"),
        extensions: {
          protobufField: {
            name: "required_bytes_value",
            typeFullName: "bytes",
          },
        },
      });
      t.field("requiredDoubleValues", {
        type: nullable(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_double_values",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValues", {
        type: nullable(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_float_values",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Values", {
        type: nullable(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_int32_values",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Values", {
        type: nullable(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_int64_values",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Values", {
        type: nullable(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_uint32_values",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Values", {
        type: nullable(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_uint64_values",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Values", {
        type: nullable(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sint32_values",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Values", {
        type: nullable(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sint64_values",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Values", {
        type: nullable(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_fixed32_values",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Values", {
        type: nullable(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_fixed64_values",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Values", {
        type: nullable(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sfixed32_values",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Values", {
        type: nullable(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sfixed64_values",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValues", {
        type: nullable(list(nonNull("Boolean"))),
        extensions: {
          protobufField: { name: "required_bool_values", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValues", {
        type: nullable(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_string_values",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValues", {
        type: nullable(list(nonNull("Byte"))),
        extensions: {
          protobufField: {
            name: "required_bytes_values",
            typeFullName: "bytes",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Primitives",
        name: "Primitives",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PrimitivesPartialInput"],
    ): Primitives2 => {
      const output = new Primitives2();
      if (input.requiredDoubleValue != null) {
        output.setRequiredDoubleValue(input.requiredDoubleValue);
      }
      if (input.requiredFloatValue != null) {
        output.setRequiredFloatValue(input.requiredFloatValue);
      }
      if (input.requiredInt32Value != null) {
        output.setRequiredInt32Value(input.requiredInt32Value);
      }
      if (input.requiredInt64Value != null) {
        output.setRequiredInt64Value(stringToNumber(input.requiredInt64Value));
      }
      if (input.requiredUint32Value != null) {
        output.setRequiredUint32Value(input.requiredUint32Value);
      }
      if (input.requiredUint64Value != null) {
        output.setRequiredUint64Value(
          stringToNumber(input.requiredUint64Value),
        );
      }
      if (input.requiredSint32Value != null) {
        output.setRequiredSint32Value(input.requiredSint32Value);
      }
      if (input.requiredSint64Value != null) {
        output.setRequiredSint64Value(
          stringToNumber(input.requiredSint64Value),
        );
      }
      if (input.requiredFixed32Value != null) {
        output.setRequiredFixed32Value(input.requiredFixed32Value);
      }
      if (input.requiredFixed64Value != null) {
        output.setRequiredFixed64Value(
          stringToNumber(input.requiredFixed64Value),
        );
      }
      if (input.requiredSfixed32Value != null) {
        output.setRequiredSfixed32Value(input.requiredSfixed32Value);
      }
      if (input.requiredSfixed64Value != null) {
        output.setRequiredSfixed64Value(
          stringToNumber(input.requiredSfixed64Value),
        );
      }
      if (input.requiredBoolValue != null) {
        output.setRequiredBoolValue(input.requiredBoolValue);
      }
      if (input.requiredStringValue != null) {
        output.setRequiredStringValue(input.requiredStringValue);
      }
      if (input.requiredBytesValue != null) {
        output.setRequiredBytesValue(input.requiredBytesValue);
      }
      if (input.requiredDoubleValues != null) {
        output.setRequiredDoubleValuesList(
          input.requiredDoubleValues.map((v) => v),
        );
      }
      if (input.requiredFloatValues != null) {
        output.setRequiredFloatValuesList(
          input.requiredFloatValues.map((v) => v),
        );
      }
      if (input.requiredInt32Values != null) {
        output.setRequiredInt32ValuesList(
          input.requiredInt32Values.map((v) => v),
        );
      }
      if (input.requiredInt64Values != null) {
        output.setRequiredInt64ValuesList(
          input.requiredInt64Values.map((v) => stringToNumber(v)),
        );
      }
      if (input.requiredUint32Values != null) {
        output.setRequiredUint32ValuesList(
          input.requiredUint32Values.map((v) => v),
        );
      }
      if (input.requiredUint64Values != null) {
        output.setRequiredUint64ValuesList(
          input.requiredUint64Values.map((v) => stringToNumber(v)),
        );
      }
      if (input.requiredSint32Values != null) {
        output.setRequiredSint32ValuesList(
          input.requiredSint32Values.map((v) => v),
        );
      }
      if (input.requiredSint64Values != null) {
        output.setRequiredSint64ValuesList(
          input.requiredSint64Values.map((v) => stringToNumber(v)),
        );
      }
      if (input.requiredFixed32Values != null) {
        output.setRequiredFixed32ValuesList(
          input.requiredFixed32Values.map((v) => v),
        );
      }
      if (input.requiredFixed64Values != null) {
        output.setRequiredFixed64ValuesList(
          input.requiredFixed64Values.map((v) => stringToNumber(v)),
        );
      }
      if (input.requiredSfixed32Values != null) {
        output.setRequiredSfixed32ValuesList(
          input.requiredSfixed32Values.map((v) => v),
        );
      }
      if (input.requiredSfixed64Values != null) {
        output.setRequiredSfixed64ValuesList(
          input.requiredSfixed64Values.map((v) => stringToNumber(v)),
        );
      }
      if (input.requiredBoolValues != null) {
        output.setRequiredBoolValuesList(
          input.requiredBoolValues.map((v) => v),
        );
      }
      if (input.requiredStringValues != null) {
        output.setRequiredStringValuesList(
          input.requiredStringValues.map((v) => v),
        );
      }
      if (input.requiredBytesValues != null) {
        output.setRequiredBytesValuesList(
          input.requiredBytesValues.map((v) => v),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredDoubleValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "required_double_value",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "required_float_value",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "required_int32_value",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "required_int64_value",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "required_uint32_value",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "required_uint64_value",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "required_sint32_value",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "required_sint64_value",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "required_fixed32_value",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "required_fixed64_value",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "required_sfixed32_value",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "required_sfixed64_value",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValue: {
          type: nullable("Boolean"),
          extensions: {
            protobufField: {
              name: "required_bool_value",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValue: {
          type: nullable("Byte"),
          extensions: {
            protobufField: {
              name: "required_bytes_value",
              typeFullName: "bytes",
            },
          },
        },
        requiredDoubleValues: {
          type: nullable(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_double_values",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValues: {
          type: nullable(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_float_values",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Values: {
          type: nullable(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_int32_values",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Values: {
          type: nullable(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_int64_values",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Values: {
          type: nullable(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_uint32_values",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Values: {
          type: nullable(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_uint64_values",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Values: {
          type: nullable(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sint32_values",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Values: {
          type: nullable(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sint64_values",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Values: {
          type: nullable(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_fixed32_values",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Values: {
          type: nullable(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_fixed64_values",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Values: {
          type: nullable(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sfixed32_values",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Values: {
          type: nullable(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sfixed64_values",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValues: {
          type: nullable(list(nonNull("Boolean"))),
          extensions: {
            protobufField: {
              name: "required_bool_values",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValues: {
          type: nullable(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_string_values",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValues: {
          type: nullable(list(nonNull("Byte"))),
          extensions: {
            protobufField: {
              name: "required_bytes_values",
              typeFullName: "bytes",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/primitives/primitives_pb_nexus.ts",
  },
]
`;

exports[`'testapis.primitives' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/primitives";
import { inputObjectType, list, nonNull, nullable, objectType } from "nexus";
import { stringToNumber } from "proto-nexus";

export type testapis$primitives$Message = testapis.primitives.Message;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("requiredPrimitives", {
      type: nonNull("Primitives"),
      description: "Required.",
      resolve: (source) => {
        const value = source.requiredPrimitives;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_primitives",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("optionalPrimitives", {
      type: nullable("Primitives"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.optionalPrimitives;
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_primitives",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("requiredPrimitivesList", {
      type: nonNull(list(nonNull("Primitives"))),
      description: "Required.",
      resolve: (source) => {
        return source.requiredPrimitivesList.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_primitives_list",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("optionalPrimitivesList", {
      type: nullable(list(nonNull("Primitives"))),
      description: "Optional.",
      resolve: (source) => {
        return source.optionalPrimitivesList.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "optional_primitives_list",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.primitives.Message;
  },
  sourceType: { module: __filename, export: "testapis$primitives$Message" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.primitives.Message",
      name: "Message",
      package: "testapis.primitives",
    },
  },
});

export type testapis$primitives$Primitives = testapis.primitives.Primitives;
export const Primitives = objectType({
  name: "Primitives",
  definition: (t) => {
    t.field("requiredDoubleValue", {
      type: nonNull("Float"),
      resolve: (source) => {
        const value = source.requiredDoubleValue;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_double_value",
          typeFullName: "double",
        },
      },
    });
    t.field("requiredFloatValue", {
      type: nonNull("Float"),
      resolve: (source) => {
        const value = source.requiredFloatValue;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: { name: "required_float_value", typeFullName: "float" },
      },
    });
    t.field("requiredInt32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.requiredInt32Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: { name: "required_int32_value", typeFullName: "int32" },
      },
    });
    t.field("requiredInt64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.requiredInt64Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: {
        protobufField: { name: "required_int64_value", typeFullName: "int64" },
      },
    });
    t.field("requiredUint32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.requiredUint32Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_uint32_value",
          typeFullName: "uint32",
        },
      },
    });
    t.field("requiredUint64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.requiredUint64Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_uint64_value",
          typeFullName: "uint64",
        },
      },
    });
    t.field("requiredSint32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.requiredSint32Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_sint32_value",
          typeFullName: "sint32",
        },
      },
    });
    t.field("requiredSint64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.requiredSint64Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_sint64_value",
          typeFullName: "sint64",
        },
      },
    });
    t.field("requiredFixed32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.requiredFixed32Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_fixed32_value",
          typeFullName: "fixed32",
        },
      },
    });
    t.field("requiredFixed64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.requiredFixed64Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_fixed64_value",
          typeFullName: "fixed64",
        },
      },
    });
    t.field("requiredSfixed32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.requiredSfixed32Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_sfixed32_value",
          typeFullName: "sfixed32",
        },
      },
    });
    t.field("requiredSfixed64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.requiredSfixed64Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_sfixed64_value",
          typeFullName: "sfixed64",
        },
      },
    });
    t.field("requiredBoolValue", {
      type: nonNull("Boolean"),
      resolve: (source) => {
        const value = source.requiredBoolValue;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: { name: "required_bool_value", typeFullName: "bool" },
      },
    });
    t.field("requiredStringValue", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.requiredStringValue;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_string_value",
          typeFullName: "string",
        },
      },
    });
    t.field("requiredBytesValue", {
      type: nonNull("Byte"),
      resolve: (source) => {
        const value = source.requiredBytesValue;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: { name: "required_bytes_value", typeFullName: "bytes" },
      },
    });
    t.field("requiredDoubleValues", {
      type: nonNull(list(nonNull("Float"))),
      resolve: (source) => {
        return source.requiredDoubleValues.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_double_values",
          typeFullName: "double",
        },
      },
    });
    t.field("requiredFloatValues", {
      type: nonNull(list(nonNull("Float"))),
      resolve: (source) => {
        return source.requiredFloatValues.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_float_values", typeFullName: "float" },
      },
    });
    t.field("requiredInt32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.requiredInt32Values.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_int32_values", typeFullName: "int32" },
      },
    });
    t.field("requiredInt64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.requiredInt64Values.map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: { name: "required_int64_values", typeFullName: "int64" },
      },
    });
    t.field("requiredUint32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.requiredUint32Values.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_uint32_values",
          typeFullName: "uint32",
        },
      },
    });
    t.field("requiredUint64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.requiredUint64Values.map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_uint64_values",
          typeFullName: "uint64",
        },
      },
    });
    t.field("requiredSint32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.requiredSint32Values.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_sint32_values",
          typeFullName: "sint32",
        },
      },
    });
    t.field("requiredSint64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.requiredSint64Values.map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_sint64_values",
          typeFullName: "sint64",
        },
      },
    });
    t.field("requiredFixed32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.requiredFixed32Values.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_fixed32_values",
          typeFullName: "fixed32",
        },
      },
    });
    t.field("requiredFixed64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.requiredFixed64Values.map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_fixed64_values",
          typeFullName: "fixed64",
        },
      },
    });
    t.field("requiredSfixed32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.requiredSfixed32Values.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_sfixed32_values",
          typeFullName: "sfixed32",
        },
      },
    });
    t.field("requiredSfixed64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.requiredSfixed64Values.map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_sfixed64_values",
          typeFullName: "sfixed64",
        },
      },
    });
    t.field("requiredBoolValues", {
      type: nonNull(list(nonNull("Boolean"))),
      resolve: (source) => {
        return source.requiredBoolValues.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_bool_values", typeFullName: "bool" },
      },
    });
    t.field("requiredStringValues", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.requiredStringValues.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_string_values",
          typeFullName: "string",
        },
      },
    });
    t.field("requiredBytesValues", {
      type: nonNull(list(nonNull("Byte"))),
      resolve: (source) => {
        return source.requiredBytesValues.map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_bytes_values", typeFullName: "bytes" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.primitives.Primitives;
  },
  sourceType: { module: __filename, export: "testapis$primitives$Primitives" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.primitives.Primitives",
      name: "Primitives",
      package: "testapis.primitives",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("requiredPrimitives", {
        type: nonNull("PrimitivesInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitives", {
        type: nullable("PrimitivesInput"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("requiredPrimitivesList", {
        type: nonNull(list(nonNull("PrimitivesInput"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitivesList", {
        type: nullable(list(nonNull("PrimitivesInput"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Message",
        name: "Message",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageInput"],
    ): testapis.primitives.Message => {
      const output = new testapis.primitives.Message();
      output.requiredPrimitives = PrimitivesInput.toProto(
        input.requiredPrimitives,
      );
      if (input.optionalPrimitives != null) {
        output.optionalPrimitives = PrimitivesInput.toProto(
          input.optionalPrimitives,
        );
      }
      output.requiredPrimitivesList = input.requiredPrimitivesList.map((v) =>
        PrimitivesInput.toProto(v)
      );
      if (input.optionalPrimitivesList != null) {
        output.optionalPrimitivesList = input.optionalPrimitivesList.map((v) =>
          PrimitivesInput.toProto(v)
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredPrimitives: {
          type: nonNull("PrimitivesInput"),
          extensions: {
            protobufField: {
              name: "required_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitives: {
          type: nullable("PrimitivesInput"),
          extensions: {
            protobufField: {
              name: "optional_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        requiredPrimitivesList: {
          type: nonNull(list(nonNull("PrimitivesInput"))),
          extensions: {
            protobufField: {
              name: "required_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitivesList: {
          type: nullable(list(nonNull("PrimitivesInput"))),
          extensions: {
            protobufField: {
              name: "optional_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
      },
    },
  },
);

export const PrimitivesInput = Object.assign(
  inputObjectType({
    name: "PrimitivesInput",
    definition: (t) => {
      t.field("requiredDoubleValue", {
        type: nonNull("Float"),
        extensions: {
          protobufField: {
            name: "required_double_value",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValue", {
        type: nonNull("Float"),
        extensions: {
          protobufField: {
            name: "required_float_value",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_int32_value",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_int64_value",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_uint32_value",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_uint64_value",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_sint32_value",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_sint64_value",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_fixed32_value",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_fixed64_value",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_sfixed32_value",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_sfixed64_value",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValue", {
        type: nonNull("Boolean"),
        extensions: {
          protobufField: { name: "required_bool_value", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValue", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValue", {
        type: nonNull("Byte"),
        extensions: {
          protobufField: {
            name: "required_bytes_value",
            typeFullName: "bytes",
          },
        },
      });
      t.field("requiredDoubleValues", {
        type: nonNull(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_double_values",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValues", {
        type: nonNull(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_float_values",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_int32_values",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_int64_values",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_uint32_values",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_uint64_values",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sint32_values",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sint64_values",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_fixed32_values",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_fixed64_values",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sfixed32_values",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sfixed64_values",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValues", {
        type: nonNull(list(nonNull("Boolean"))),
        extensions: {
          protobufField: { name: "required_bool_values", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValues", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_string_values",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValues", {
        type: nonNull(list(nonNull("Byte"))),
        extensions: {
          protobufField: {
            name: "required_bytes_values",
            typeFullName: "bytes",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Primitives",
        name: "Primitives",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PrimitivesInput"],
    ): testapis.primitives.Primitives => {
      const output = new testapis.primitives.Primitives();
      output.requiredDoubleValue = input.requiredDoubleValue;
      output.requiredFloatValue = input.requiredFloatValue;
      output.requiredInt32Value = input.requiredInt32Value;
      output.requiredInt64Value = stringToNumber(input.requiredInt64Value);
      output.requiredUint32Value = input.requiredUint32Value;
      output.requiredUint64Value = stringToNumber(input.requiredUint64Value);
      output.requiredSint32Value = input.requiredSint32Value;
      output.requiredSint64Value = stringToNumber(input.requiredSint64Value);
      output.requiredFixed32Value = input.requiredFixed32Value;
      output.requiredFixed64Value = stringToNumber(input.requiredFixed64Value);
      output.requiredSfixed32Value = input.requiredSfixed32Value;
      output.requiredSfixed64Value = stringToNumber(
        input.requiredSfixed64Value,
      );
      output.requiredBoolValue = input.requiredBoolValue;
      output.requiredStringValue = input.requiredStringValue;
      output.requiredBytesValue = input.requiredBytesValue;
      output.requiredDoubleValues = input.requiredDoubleValues.map((v) => v);
      output.requiredFloatValues = input.requiredFloatValues.map((v) => v);
      output.requiredInt32Values = input.requiredInt32Values.map((v) => v);
      output.requiredInt64Values = input.requiredInt64Values.map((v) =>
        stringToNumber(v)
      );
      output.requiredUint32Values = input.requiredUint32Values.map((v) => v);
      output.requiredUint64Values = input.requiredUint64Values.map((v) =>
        stringToNumber(v)
      );
      output.requiredSint32Values = input.requiredSint32Values.map((v) => v);
      output.requiredSint64Values = input.requiredSint64Values.map((v) =>
        stringToNumber(v)
      );
      output.requiredFixed32Values = input.requiredFixed32Values.map((v) => v);
      output.requiredFixed64Values = input.requiredFixed64Values.map((v) =>
        stringToNumber(v)
      );
      output.requiredSfixed32Values = input.requiredSfixed32Values.map((v) =>
        v
      );
      output.requiredSfixed64Values = input.requiredSfixed64Values.map((v) =>
        stringToNumber(v)
      );
      output.requiredBoolValues = input.requiredBoolValues.map((v) => v);
      output.requiredStringValues = input.requiredStringValues.map((v) => v);
      output.requiredBytesValues = input.requiredBytesValues.map((v) => v);
      return output;
    },
    _protoNexus: {
      fields: {
        requiredDoubleValue: {
          type: nonNull("Float"),
          extensions: {
            protobufField: {
              name: "required_double_value",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValue: {
          type: nonNull("Float"),
          extensions: {
            protobufField: {
              name: "required_float_value",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_int32_value",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_int64_value",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_uint32_value",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_uint64_value",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_sint32_value",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_sint64_value",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_fixed32_value",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_fixed64_value",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_sfixed32_value",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_sfixed64_value",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValue: {
          type: nonNull("Boolean"),
          extensions: {
            protobufField: {
              name: "required_bool_value",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValue: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValue: {
          type: nonNull("Byte"),
          extensions: {
            protobufField: {
              name: "required_bytes_value",
              typeFullName: "bytes",
            },
          },
        },
        requiredDoubleValues: {
          type: nonNull(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_double_values",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValues: {
          type: nonNull(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_float_values",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_int32_values",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_int64_values",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_uint32_values",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_uint64_values",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sint32_values",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sint64_values",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_fixed32_values",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_fixed64_values",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sfixed32_values",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sfixed64_values",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValues: {
          type: nonNull(list(nonNull("Boolean"))),
          extensions: {
            protobufField: {
              name: "required_bool_values",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValues: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_string_values",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValues: {
          type: nonNull(list(nonNull("Byte"))),
          extensions: {
            protobufField: {
              name: "required_bytes_values",
              typeFullName: "bytes",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/primitives/primitives_pb_nexus.ts",
  },
]
`;

exports[`'testapis.primitives' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/primitives/primitives.proto

/* eslint-disable */

import { inputObjectType, list, nonNull, nullable, objectType } from "nexus";
import { stringToNumber } from "proto-nexus";
import {
  Message as Message1,
  Primitives as Primitives2,
} from "./testapis/primitives/primitives_pb";

export type testapis$primitives$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("requiredPrimitives", {
      type: nonNull("Primitives"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredPrimitives();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_primitives",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("optionalPrimitives", {
      type: nullable("Primitives"),
      description: "Optional.",
      resolve: (source) => {
        const value = source.getOptionalPrimitives();
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_primitives",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("requiredPrimitivesList", {
      type: nonNull(list(nonNull("Primitives"))),
      description: "Required.",
      resolve: (source) => {
        return source.getRequiredPrimitivesListList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_primitives_list",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
    t.field("optionalPrimitivesList", {
      type: nullable(list(nonNull("Primitives"))),
      description: "Optional.",
      resolve: (source) => {
        return source.getOptionalPrimitivesListList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "optional_primitives_list",
          typeFullName: "testapis.primitives.Primitives",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: { module: __filename, export: "testapis$primitives$Message" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.primitives.Message",
      name: "Message",
      package: "testapis.primitives",
    },
  },
});

export type testapis$primitives$Primitives = Primitives2;
export const Primitives = objectType({
  name: "Primitives",
  definition: (t) => {
    t.field("requiredDoubleValue", {
      type: nonNull("Float"),
      resolve: (source) => {
        const value = source.getRequiredDoubleValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_double_value",
          typeFullName: "double",
        },
      },
    });
    t.field("requiredFloatValue", {
      type: nonNull("Float"),
      resolve: (source) => {
        const value = source.getRequiredFloatValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_float_value", typeFullName: "float" },
      },
    });
    t.field("requiredInt32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredInt32Value();
        return value;
      },
      extensions: {
        protobufField: { name: "required_int32_value", typeFullName: "int32" },
      },
    });
    t.field("requiredInt64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredInt64Value();
        return value.toString();
      },
      extensions: {
        protobufField: { name: "required_int64_value", typeFullName: "int64" },
      },
    });
    t.field("requiredUint32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredUint32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_uint32_value",
          typeFullName: "uint32",
        },
      },
    });
    t.field("requiredUint64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredUint64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_uint64_value",
          typeFullName: "uint64",
        },
      },
    });
    t.field("requiredSint32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredSint32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_sint32_value",
          typeFullName: "sint32",
        },
      },
    });
    t.field("requiredSint64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredSint64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_sint64_value",
          typeFullName: "sint64",
        },
      },
    });
    t.field("requiredFixed32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredFixed32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_fixed32_value",
          typeFullName: "fixed32",
        },
      },
    });
    t.field("requiredFixed64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredFixed64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_fixed64_value",
          typeFullName: "fixed64",
        },
      },
    });
    t.field("requiredSfixed32Value", {
      type: nonNull("Int"),
      resolve: (source) => {
        const value = source.getRequiredSfixed32Value();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_sfixed32_value",
          typeFullName: "sfixed32",
        },
      },
    });
    t.field("requiredSfixed64Value", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredSfixed64Value();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "required_sfixed64_value",
          typeFullName: "sfixed64",
        },
      },
    });
    t.field("requiredBoolValue", {
      type: nonNull("Boolean"),
      resolve: (source) => {
        const value = source.getRequiredBoolValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_bool_value", typeFullName: "bool" },
      },
    });
    t.field("requiredStringValue", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_string_value",
          typeFullName: "string",
        },
      },
    });
    t.field("requiredBytesValue", {
      type: nonNull("Byte"),
      resolve: (source) => {
        const value = source.getRequiredBytesValue();
        return value;
      },
      extensions: {
        protobufField: { name: "required_bytes_value", typeFullName: "bytes" },
      },
    });
    t.field("requiredDoubleValues", {
      type: nonNull(list(nonNull("Float"))),
      resolve: (source) => {
        return source.getRequiredDoubleValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_double_values",
          typeFullName: "double",
        },
      },
    });
    t.field("requiredFloatValues", {
      type: nonNull(list(nonNull("Float"))),
      resolve: (source) => {
        return source.getRequiredFloatValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_float_values", typeFullName: "float" },
      },
    });
    t.field("requiredInt32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredInt32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_int32_values", typeFullName: "int32" },
      },
    });
    t.field("requiredInt64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredInt64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: { name: "required_int64_values", typeFullName: "int64" },
      },
    });
    t.field("requiredUint32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredUint32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_uint32_values",
          typeFullName: "uint32",
        },
      },
    });
    t.field("requiredUint64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredUint64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_uint64_values",
          typeFullName: "uint64",
        },
      },
    });
    t.field("requiredSint32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredSint32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_sint32_values",
          typeFullName: "sint32",
        },
      },
    });
    t.field("requiredSint64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredSint64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_sint64_values",
          typeFullName: "sint64",
        },
      },
    });
    t.field("requiredFixed32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredFixed32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_fixed32_values",
          typeFullName: "fixed32",
        },
      },
    });
    t.field("requiredFixed64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredFixed64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_fixed64_values",
          typeFullName: "fixed64",
        },
      },
    });
    t.field("requiredSfixed32Values", {
      type: nonNull(list(nonNull("Int"))),
      resolve: (source) => {
        return source.getRequiredSfixed32ValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_sfixed32_values",
          typeFullName: "sfixed32",
        },
      },
    });
    t.field("requiredSfixed64Values", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredSfixed64ValuesList().map((value) => {
          return value.toString();
        });
      },
      extensions: {
        protobufField: {
          name: "required_sfixed64_values",
          typeFullName: "sfixed64",
        },
      },
    });
    t.field("requiredBoolValues", {
      type: nonNull(list(nonNull("Boolean"))),
      resolve: (source) => {
        return source.getRequiredBoolValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_bool_values", typeFullName: "bool" },
      },
    });
    t.field("requiredStringValues", {
      type: nonNull(list(nonNull("String"))),
      resolve: (source) => {
        return source.getRequiredStringValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: {
          name: "required_string_values",
          typeFullName: "string",
        },
      },
    });
    t.field("requiredBytesValues", {
      type: nonNull(list(nonNull("Byte"))),
      resolve: (source) => {
        return source.getRequiredBytesValuesList().map((value) => {
          return value;
        });
      },
      extensions: {
        protobufField: { name: "required_bytes_values", typeFullName: "bytes" },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Primitives2;
  },
  sourceType: { module: __filename, export: "testapis$primitives$Primitives" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.primitives.Primitives",
      name: "Primitives",
      package: "testapis.primitives",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("requiredPrimitives", {
        type: nonNull("PrimitivesInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitives", {
        type: nullable("PrimitivesInput"),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("requiredPrimitivesList", {
        type: nonNull(list(nonNull("PrimitivesInput"))),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
      t.field("optionalPrimitivesList", {
        type: nullable(list(nonNull("PrimitivesInput"))),
        description: "Optional.",
        extensions: {
          protobufField: {
            name: "optional_primitives_list",
            typeFullName: "testapis.primitives.Primitives",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Message",
        name: "Message",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      output.setRequiredPrimitives(
        PrimitivesInput.toProto(input.requiredPrimitives),
      );
      if (input.optionalPrimitives != null) {
        output.setOptionalPrimitives(
          PrimitivesInput.toProto(input.optionalPrimitives),
        );
      }
      output.setRequiredPrimitivesListList(
        input.requiredPrimitivesList.map((v) => PrimitivesInput.toProto(v)),
      );
      if (input.optionalPrimitivesList != null) {
        output.setOptionalPrimitivesListList(
          input.optionalPrimitivesList.map((v) => PrimitivesInput.toProto(v)),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredPrimitives: {
          type: nonNull("PrimitivesInput"),
          extensions: {
            protobufField: {
              name: "required_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitives: {
          type: nullable("PrimitivesInput"),
          extensions: {
            protobufField: {
              name: "optional_primitives",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        requiredPrimitivesList: {
          type: nonNull(list(nonNull("PrimitivesInput"))),
          extensions: {
            protobufField: {
              name: "required_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
        optionalPrimitivesList: {
          type: nullable(list(nonNull("PrimitivesInput"))),
          extensions: {
            protobufField: {
              name: "optional_primitives_list",
              typeFullName: "testapis.primitives.Primitives",
            },
          },
        },
      },
    },
  },
);

export const PrimitivesInput = Object.assign(
  inputObjectType({
    name: "PrimitivesInput",
    definition: (t) => {
      t.field("requiredDoubleValue", {
        type: nonNull("Float"),
        extensions: {
          protobufField: {
            name: "required_double_value",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValue", {
        type: nonNull("Float"),
        extensions: {
          protobufField: {
            name: "required_float_value",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_int32_value",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_int64_value",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_uint32_value",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_uint64_value",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_sint32_value",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_sint64_value",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_fixed32_value",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_fixed64_value",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Value", {
        type: nonNull("Int"),
        extensions: {
          protobufField: {
            name: "required_sfixed32_value",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Value", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_sfixed64_value",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValue", {
        type: nonNull("Boolean"),
        extensions: {
          protobufField: { name: "required_bool_value", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValue", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValue", {
        type: nonNull("Byte"),
        extensions: {
          protobufField: {
            name: "required_bytes_value",
            typeFullName: "bytes",
          },
        },
      });
      t.field("requiredDoubleValues", {
        type: nonNull(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_double_values",
            typeFullName: "double",
          },
        },
      });
      t.field("requiredFloatValues", {
        type: nonNull(list(nonNull("Float"))),
        extensions: {
          protobufField: {
            name: "required_float_values",
            typeFullName: "float",
          },
        },
      });
      t.field("requiredInt32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_int32_values",
            typeFullName: "int32",
          },
        },
      });
      t.field("requiredInt64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_int64_values",
            typeFullName: "int64",
          },
        },
      });
      t.field("requiredUint32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_uint32_values",
            typeFullName: "uint32",
          },
        },
      });
      t.field("requiredUint64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_uint64_values",
            typeFullName: "uint64",
          },
        },
      });
      t.field("requiredSint32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sint32_values",
            typeFullName: "sint32",
          },
        },
      });
      t.field("requiredSint64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sint64_values",
            typeFullName: "sint64",
          },
        },
      });
      t.field("requiredFixed32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_fixed32_values",
            typeFullName: "fixed32",
          },
        },
      });
      t.field("requiredFixed64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_fixed64_values",
            typeFullName: "fixed64",
          },
        },
      });
      t.field("requiredSfixed32Values", {
        type: nonNull(list(nonNull("Int"))),
        extensions: {
          protobufField: {
            name: "required_sfixed32_values",
            typeFullName: "sfixed32",
          },
        },
      });
      t.field("requiredSfixed64Values", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_sfixed64_values",
            typeFullName: "sfixed64",
          },
        },
      });
      t.field("requiredBoolValues", {
        type: nonNull(list(nonNull("Boolean"))),
        extensions: {
          protobufField: { name: "required_bool_values", typeFullName: "bool" },
        },
      });
      t.field("requiredStringValues", {
        type: nonNull(list(nonNull("String"))),
        extensions: {
          protobufField: {
            name: "required_string_values",
            typeFullName: "string",
          },
        },
      });
      t.field("requiredBytesValues", {
        type: nonNull(list(nonNull("Byte"))),
        extensions: {
          protobufField: {
            name: "required_bytes_values",
            typeFullName: "bytes",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.primitives.Primitives",
        name: "Primitives",
        package: "testapis.primitives",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PrimitivesInput"],
    ): Primitives2 => {
      const output = new Primitives2();
      output.setRequiredDoubleValue(input.requiredDoubleValue);
      output.setRequiredFloatValue(input.requiredFloatValue);
      output.setRequiredInt32Value(input.requiredInt32Value);
      output.setRequiredInt64Value(stringToNumber(input.requiredInt64Value));
      output.setRequiredUint32Value(input.requiredUint32Value);
      output.setRequiredUint64Value(stringToNumber(input.requiredUint64Value));
      output.setRequiredSint32Value(input.requiredSint32Value);
      output.setRequiredSint64Value(stringToNumber(input.requiredSint64Value));
      output.setRequiredFixed32Value(input.requiredFixed32Value);
      output.setRequiredFixed64Value(
        stringToNumber(input.requiredFixed64Value),
      );
      output.setRequiredSfixed32Value(input.requiredSfixed32Value);
      output.setRequiredSfixed64Value(
        stringToNumber(input.requiredSfixed64Value),
      );
      output.setRequiredBoolValue(input.requiredBoolValue);
      output.setRequiredStringValue(input.requiredStringValue);
      output.setRequiredBytesValue(input.requiredBytesValue);
      output.setRequiredDoubleValuesList(
        input.requiredDoubleValues.map((v) => v),
      );
      output.setRequiredFloatValuesList(
        input.requiredFloatValues.map((v) => v),
      );
      output.setRequiredInt32ValuesList(
        input.requiredInt32Values.map((v) => v),
      );
      output.setRequiredInt64ValuesList(
        input.requiredInt64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredUint32ValuesList(
        input.requiredUint32Values.map((v) => v),
      );
      output.setRequiredUint64ValuesList(
        input.requiredUint64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredSint32ValuesList(
        input.requiredSint32Values.map((v) => v),
      );
      output.setRequiredSint64ValuesList(
        input.requiredSint64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredFixed32ValuesList(
        input.requiredFixed32Values.map((v) => v),
      );
      output.setRequiredFixed64ValuesList(
        input.requiredFixed64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredSfixed32ValuesList(
        input.requiredSfixed32Values.map((v) => v),
      );
      output.setRequiredSfixed64ValuesList(
        input.requiredSfixed64Values.map((v) => stringToNumber(v)),
      );
      output.setRequiredBoolValuesList(input.requiredBoolValues.map((v) => v));
      output.setRequiredStringValuesList(
        input.requiredStringValues.map((v) => v),
      );
      output.setRequiredBytesValuesList(
        input.requiredBytesValues.map((v) => v),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        requiredDoubleValue: {
          type: nonNull("Float"),
          extensions: {
            protobufField: {
              name: "required_double_value",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValue: {
          type: nonNull("Float"),
          extensions: {
            protobufField: {
              name: "required_float_value",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_int32_value",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_int64_value",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_uint32_value",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_uint64_value",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_sint32_value",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_sint64_value",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_fixed32_value",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_fixed64_value",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Value: {
          type: nonNull("Int"),
          extensions: {
            protobufField: {
              name: "required_sfixed32_value",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Value: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_sfixed64_value",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValue: {
          type: nonNull("Boolean"),
          extensions: {
            protobufField: {
              name: "required_bool_value",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValue: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValue: {
          type: nonNull("Byte"),
          extensions: {
            protobufField: {
              name: "required_bytes_value",
              typeFullName: "bytes",
            },
          },
        },
        requiredDoubleValues: {
          type: nonNull(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_double_values",
              typeFullName: "double",
            },
          },
        },
        requiredFloatValues: {
          type: nonNull(list(nonNull("Float"))),
          extensions: {
            protobufField: {
              name: "required_float_values",
              typeFullName: "float",
            },
          },
        },
        requiredInt32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_int32_values",
              typeFullName: "int32",
            },
          },
        },
        requiredInt64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_int64_values",
              typeFullName: "int64",
            },
          },
        },
        requiredUint32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_uint32_values",
              typeFullName: "uint32",
            },
          },
        },
        requiredUint64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_uint64_values",
              typeFullName: "uint64",
            },
          },
        },
        requiredSint32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sint32_values",
              typeFullName: "sint32",
            },
          },
        },
        requiredSint64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sint64_values",
              typeFullName: "sint64",
            },
          },
        },
        requiredFixed32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_fixed32_values",
              typeFullName: "fixed32",
            },
          },
        },
        requiredFixed64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_fixed64_values",
              typeFullName: "fixed64",
            },
          },
        },
        requiredSfixed32Values: {
          type: nonNull(list(nonNull("Int"))),
          extensions: {
            protobufField: {
              name: "required_sfixed32_values",
              typeFullName: "sfixed32",
            },
          },
        },
        requiredSfixed64Values: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_sfixed64_values",
              typeFullName: "sfixed64",
            },
          },
        },
        requiredBoolValues: {
          type: nonNull(list(nonNull("Boolean"))),
          extensions: {
            protobufField: {
              name: "required_bool_values",
              typeFullName: "bool",
            },
          },
        },
        requiredStringValues: {
          type: nonNull(list(nonNull("String"))),
          extensions: {
            protobufField: {
              name: "required_string_values",
              typeFullName: "string",
            },
          },
        },
        requiredBytesValues: {
          type: nonNull(list(nonNull("Byte"))),
          extensions: {
            protobufField: {
              name: "required_bytes_values",
              typeFullName: "bytes",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/primitives/primitives_pb_nexus.ts",
  },
]
`;

exports[`'testapis.proto3_optional' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/proto3_optional/proto3_optional.proto

/* eslint-disable */

import { Message as Message1 } from "@testapis/proto/testapis/proto3_optional/proto3_optional_pb";
import { nonNull, nullable, objectType } from "nexus";

export type testapis$proto3_optional$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("requiredStringValue", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_string_value",
          typeFullName: "string",
        },
      },
    });
    t.field("optionalStringValue", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getOptionalStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_string_value",
          typeFullName: "string",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$proto3_optional$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.proto3_optional.Message",
      name: "Message",
      package: "testapis.proto3_optional",
    },
  },
});
",
    "name": "testapis/proto3_optional/Message.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/proto3_optional/proto3_optional.proto

/* eslint-disable */

import { Message } from "@testapis/proto/testapis/proto3_optional/proto3_optional_pb";
import { inputObjectType, nonNull, nullable } from "nexus";

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("requiredStringValue", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("optionalStringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "optional_string_value",
            typeFullName: "string",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.proto3_optional.Message",
        name: "Message",
        package: "testapis.proto3_optional",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message => {
      const output = new Message();
      output.setRequiredStringValue(input.requiredStringValue);
      if (input.optionalStringValue != null) {
        output.setOptionalStringValue(input.optionalStringValue);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredStringValue: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        optionalStringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "optional_string_value",
              typeFullName: "string",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/proto3_optional/MessageInput.nexus.ts",
  },
]
`;

exports[`'testapis.proto3_optional' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/proto3_optional/proto3_optional.proto

/* eslint-disable */

import { Message as Message1 } from "@testapis/proto/testapis/proto3_optional/proto3_optional_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";

export type testapis$proto3_optional$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("requiredStringValue", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_string_value",
          typeFullName: "string",
        },
      },
    });
    t.field("optionalStringValue", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getOptionalStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_string_value",
          typeFullName: "string",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$proto3_optional$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.proto3_optional.Message",
      name: "Message",
      package: "testapis.proto3_optional",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("requiredStringValue", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("optionalStringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "optional_string_value",
            typeFullName: "string",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.proto3_optional.Message",
        name: "Message",
        package: "testapis.proto3_optional",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      output.setRequiredStringValue(input.requiredStringValue);
      if (input.optionalStringValue != null) {
        output.setOptionalStringValue(input.optionalStringValue);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredStringValue: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        optionalStringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "optional_string_value",
              typeFullName: "string",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/proto3_optional/proto3_optional_pb_nexus.ts",
  },
]
`;

exports[`'testapis.proto3_optional' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/proto3_optional/proto3_optional.proto

/* eslint-disable */

import { Message as Message1 } from "@testapis/proto/testapis/proto3_optional/proto3_optional_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";

export type testapis$proto3_optional$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("requiredStringValue", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_string_value",
          typeFullName: "string",
        },
      },
    });
    t.field("optionalStringValue", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getOptionalStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_string_value",
          typeFullName: "string",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$proto3_optional$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.proto3_optional.Message",
      name: "Message",
      package: "testapis.proto3_optional",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("requiredStringValue", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("optionalStringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "optional_string_value",
            typeFullName: "string",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.proto3_optional.Message",
        name: "Message",
        package: "testapis.proto3_optional",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      output.setRequiredStringValue(input.requiredStringValue);
      if (input.optionalStringValue != null) {
        output.setOptionalStringValue(input.optionalStringValue);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredStringValue: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        optionalStringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "optional_string_value",
              typeFullName: "string",
            },
          },
        },
      },
    },
  },
);

export const MessagePartialInput = Object.assign(
  inputObjectType({
    name: "MessagePartialInput",
    definition: (t) => {
      t.field("requiredStringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("optionalStringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "optional_string_value",
            typeFullName: "string",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.proto3_optional.Message",
        name: "Message",
        package: "testapis.proto3_optional",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessagePartialInput"],
    ): Message1 => {
      const output = new Message1();
      if (input.requiredStringValue != null) {
        output.setRequiredStringValue(input.requiredStringValue);
      }
      if (input.optionalStringValue != null) {
        output.setOptionalStringValue(input.optionalStringValue);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredStringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        optionalStringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "optional_string_value",
              typeFullName: "string",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/proto3_optional/proto3_optional_pb_nexus.ts",
  },
]
`;

exports[`'testapis.proto3_optional' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/proto3_optional/proto3_optional.proto

/* eslint-disable */

import { testapis } from "@testapis/proto/testapis/proto3_optional";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";

export type testapis$proto3_optional$Message = testapis.proto3_optional.Message;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("requiredStringValue", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.requiredStringValue;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_string_value",
          typeFullName: "string",
        },
      },
    });
    t.field("optionalStringValue", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.optionalStringValue;
        if (value == null) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_string_value",
          typeFullName: "string",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.proto3_optional.Message;
  },
  sourceType: {
    module: __filename,
    export: "testapis$proto3_optional$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.proto3_optional.Message",
      name: "Message",
      package: "testapis.proto3_optional",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("requiredStringValue", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("optionalStringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "optional_string_value",
            typeFullName: "string",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.proto3_optional.Message",
        name: "Message",
        package: "testapis.proto3_optional",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageInput"],
    ): testapis.proto3_optional.Message => {
      const output = new testapis.proto3_optional.Message();
      output.requiredStringValue = input.requiredStringValue;
      if (input.optionalStringValue != null) {
        output.optionalStringValue = input.optionalStringValue;
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredStringValue: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        optionalStringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "optional_string_value",
              typeFullName: "string",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/proto3_optional/proto3_optional_pb_nexus.ts",
  },
]
`;

exports[`'testapis.proto3_optional' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/proto3_optional/proto3_optional.proto

/* eslint-disable */

import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { Message as Message1 } from "./testapis/proto3_optional/proto3_optional_pb";

export type testapis$proto3_optional$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("requiredStringValue", {
      type: nonNull("String"),
      resolve: (source) => {
        const value = source.getRequiredStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "required_string_value",
          typeFullName: "string",
        },
      },
    });
    t.field("optionalStringValue", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getOptionalStringValue();
        return value;
      },
      extensions: {
        protobufField: {
          name: "optional_string_value",
          typeFullName: "string",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$proto3_optional$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.proto3_optional.Message",
      name: "Message",
      package: "testapis.proto3_optional",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("requiredStringValue", {
        type: nonNull("String"),
        extensions: {
          protobufField: {
            name: "required_string_value",
            typeFullName: "string",
          },
        },
      });
      t.field("optionalStringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "optional_string_value",
            typeFullName: "string",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.proto3_optional.Message",
        name: "Message",
        package: "testapis.proto3_optional",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      output.setRequiredStringValue(input.requiredStringValue);
      if (input.optionalStringValue != null) {
        output.setOptionalStringValue(input.optionalStringValue);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        requiredStringValue: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "required_string_value",
              typeFullName: "string",
            },
          },
        },
        optionalStringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "optional_string_value",
              typeFullName: "string",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/proto3_optional/proto3_optional_pb_nexus.ts",
  },
]
`;

exports[`'testapis.wktypes' > generates files by plugin 'with graphql_type layout' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/wktypes/well_known_types.proto

/* eslint-disable */

import { Message as Message1 } from "@testapis/proto/testapis/wktypes/well_known_types_pb";
import { nonNull, nullable, objectType } from "nexus";
import { getTransformer } from "proto-nexus";

export type testapis$wktypes$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("timestamp", {
      type: nullable("DateTime"),
      resolve: (source) => {
        const value = source.getTimestamp();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Timestamp").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "timestamp",
          typeFullName: "google.protobuf.Timestamp",
        },
      },
    });
    t.field("int32Value", {
      type: nullable("Int"),
      resolve: (source) => {
        const value = source.getInt32Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Int32Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "int32_value",
          typeFullName: "google.protobuf.Int32Value",
        },
      },
    });
    t.field("int64Value", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getInt64Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Int64Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "int64_value",
          typeFullName: "google.protobuf.Int64Value",
        },
      },
    });
    t.field("uint32Value", {
      type: nullable("Int"),
      resolve: (source) => {
        const value = source.getUint32Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.UInt32Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "uint32_value",
          typeFullName: "google.protobuf.UInt32Value",
        },
      },
    });
    t.field("uint64Value", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getUint64Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.UInt64Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "uint64_value",
          typeFullName: "google.protobuf.UInt64Value",
        },
      },
    });
    t.field("floatValue", {
      type: nullable("Float"),
      resolve: (source) => {
        const value = source.getFloatValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.FloatValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "float_value",
          typeFullName: "google.protobuf.FloatValue",
        },
      },
    });
    t.field("doubleValue", {
      type: nullable("Float"),
      resolve: (source) => {
        const value = source.getDoubleValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.DoubleValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "double_value",
          typeFullName: "google.protobuf.DoubleValue",
        },
      },
    });
    t.field("boolValue", {
      type: nullable("Boolean"),
      resolve: (source) => {
        const value = source.getBoolValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.BoolValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "bool_value",
          typeFullName: "google.protobuf.BoolValue",
        },
      },
    });
    t.field("stringValue", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getStringValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.StringValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "string_value",
          typeFullName: "google.protobuf.StringValue",
        },
      },
    });
    t.field("bytesValue", {
      type: nullable("Byte"),
      resolve: (source) => {
        const value = source.getBytesValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.BytesValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "bytes_value",
          typeFullName: "google.protobuf.BytesValue",
        },
      },
    });
    t.field("requiredTimestamp", {
      type: nonNull("DateTime"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredTimestamp();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return getTransformer("google.protobuf.Timestamp").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "required_timestamp",
          typeFullName: "google.protobuf.Timestamp",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: { module: __filename, export: "testapis$wktypes$Message" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.wktypes.Message",
      name: "Message",
      package: "testapis.wktypes",
    },
  },
});
",
    "name": "testapis/wktypes/Message.nexus.ts",
  },
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/wktypes/well_known_types.proto

/* eslint-disable */

import { Message } from "@testapis/proto/testapis/wktypes/well_known_types_pb";
import { inputObjectType, nonNull, nullable } from "nexus";
import { getTransformer } from "proto-nexus";

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("timestamp", {
        type: nullable("DateTime"),
        extensions: {
          protobufField: {
            name: "timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
      t.field("int32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "int32_value",
            typeFullName: "google.protobuf.Int32Value",
          },
        },
      });
      t.field("int64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "int64_value",
            typeFullName: "google.protobuf.Int64Value",
          },
        },
      });
      t.field("uint32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "uint32_value",
            typeFullName: "google.protobuf.UInt32Value",
          },
        },
      });
      t.field("uint64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "uint64_value",
            typeFullName: "google.protobuf.UInt64Value",
          },
        },
      });
      t.field("floatValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "float_value",
            typeFullName: "google.protobuf.FloatValue",
          },
        },
      });
      t.field("doubleValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "double_value",
            typeFullName: "google.protobuf.DoubleValue",
          },
        },
      });
      t.field("boolValue", {
        type: nullable("Boolean"),
        extensions: {
          protobufField: {
            name: "bool_value",
            typeFullName: "google.protobuf.BoolValue",
          },
        },
      });
      t.field("stringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "string_value",
            typeFullName: "google.protobuf.StringValue",
          },
        },
      });
      t.field("bytesValue", {
        type: nullable("Byte"),
        extensions: {
          protobufField: {
            name: "bytes_value",
            typeFullName: "google.protobuf.BytesValue",
          },
        },
      });
      t.field("requiredTimestamp", {
        type: nonNull("DateTime"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.wktypes.Message",
        name: "Message",
        package: "testapis.wktypes",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message => {
      const output = new Message();
      if (input.timestamp != null) {
        output.setTimestamp(
          getTransformer("google.protobuf.Timestamp").gqlToProto(
            input.timestamp,
          ),
        );
      }
      if (input.int32Value != null) {
        output.setInt32Value(
          getTransformer("google.protobuf.Int32Value").gqlToProto(
            input.int32Value,
          ),
        );
      }
      if (input.int64Value != null) {
        output.setInt64Value(
          getTransformer("google.protobuf.Int64Value").gqlToProto(
            input.int64Value,
          ),
        );
      }
      if (input.uint32Value != null) {
        output.setUint32Value(
          getTransformer("google.protobuf.UInt32Value").gqlToProto(
            input.uint32Value,
          ),
        );
      }
      if (input.uint64Value != null) {
        output.setUint64Value(
          getTransformer("google.protobuf.UInt64Value").gqlToProto(
            input.uint64Value,
          ),
        );
      }
      if (input.floatValue != null) {
        output.setFloatValue(
          getTransformer("google.protobuf.FloatValue").gqlToProto(
            input.floatValue,
          ),
        );
      }
      if (input.doubleValue != null) {
        output.setDoubleValue(
          getTransformer("google.protobuf.DoubleValue").gqlToProto(
            input.doubleValue,
          ),
        );
      }
      if (input.boolValue != null) {
        output.setBoolValue(
          getTransformer("google.protobuf.BoolValue").gqlToProto(
            input.boolValue,
          ),
        );
      }
      if (input.stringValue != null) {
        output.setStringValue(
          getTransformer("google.protobuf.StringValue").gqlToProto(
            input.stringValue,
          ),
        );
      }
      if (input.bytesValue != null) {
        output.setBytesValue(
          getTransformer("google.protobuf.BytesValue").gqlToProto(
            input.bytesValue,
          ),
        );
      }
      output.setRequiredTimestamp(
        getTransformer("google.protobuf.Timestamp").gqlToProto(
          input.requiredTimestamp,
        ),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        timestamp: {
          type: nullable("DateTime"),
          extensions: {
            protobufField: {
              name: "timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
        int32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "int32_value",
              typeFullName: "google.protobuf.Int32Value",
            },
          },
        },
        int64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "int64_value",
              typeFullName: "google.protobuf.Int64Value",
            },
          },
        },
        uint32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "uint32_value",
              typeFullName: "google.protobuf.UInt32Value",
            },
          },
        },
        uint64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "uint64_value",
              typeFullName: "google.protobuf.UInt64Value",
            },
          },
        },
        floatValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "float_value",
              typeFullName: "google.protobuf.FloatValue",
            },
          },
        },
        doubleValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "double_value",
              typeFullName: "google.protobuf.DoubleValue",
            },
          },
        },
        boolValue: {
          type: nullable("Boolean"),
          extensions: {
            protobufField: {
              name: "bool_value",
              typeFullName: "google.protobuf.BoolValue",
            },
          },
        },
        stringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "string_value",
              typeFullName: "google.protobuf.StringValue",
            },
          },
        },
        bytesValue: {
          type: nullable("Byte"),
          extensions: {
            protobufField: {
              name: "bytes_value",
              typeFullName: "google.protobuf.BytesValue",
            },
          },
        },
        requiredTimestamp: {
          type: nonNull("DateTime"),
          extensions: {
            protobufField: {
              name: "required_timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/wktypes/MessageInput.nexus.ts",
  },
]
`;

exports[`'testapis.wktypes' > generates files by plugin 'with import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/wktypes/well_known_types.proto

/* eslint-disable */

import { Message as Message1 } from "@testapis/proto/testapis/wktypes/well_known_types_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { getTransformer } from "proto-nexus";

export type testapis$wktypes$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("timestamp", {
      type: nullable("DateTime"),
      resolve: (source) => {
        const value = source.getTimestamp();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Timestamp").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "timestamp",
          typeFullName: "google.protobuf.Timestamp",
        },
      },
    });
    t.field("int32Value", {
      type: nullable("Int"),
      resolve: (source) => {
        const value = source.getInt32Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Int32Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "int32_value",
          typeFullName: "google.protobuf.Int32Value",
        },
      },
    });
    t.field("int64Value", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getInt64Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Int64Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "int64_value",
          typeFullName: "google.protobuf.Int64Value",
        },
      },
    });
    t.field("uint32Value", {
      type: nullable("Int"),
      resolve: (source) => {
        const value = source.getUint32Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.UInt32Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "uint32_value",
          typeFullName: "google.protobuf.UInt32Value",
        },
      },
    });
    t.field("uint64Value", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getUint64Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.UInt64Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "uint64_value",
          typeFullName: "google.protobuf.UInt64Value",
        },
      },
    });
    t.field("floatValue", {
      type: nullable("Float"),
      resolve: (source) => {
        const value = source.getFloatValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.FloatValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "float_value",
          typeFullName: "google.protobuf.FloatValue",
        },
      },
    });
    t.field("doubleValue", {
      type: nullable("Float"),
      resolve: (source) => {
        const value = source.getDoubleValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.DoubleValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "double_value",
          typeFullName: "google.protobuf.DoubleValue",
        },
      },
    });
    t.field("boolValue", {
      type: nullable("Boolean"),
      resolve: (source) => {
        const value = source.getBoolValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.BoolValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "bool_value",
          typeFullName: "google.protobuf.BoolValue",
        },
      },
    });
    t.field("stringValue", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getStringValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.StringValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "string_value",
          typeFullName: "google.protobuf.StringValue",
        },
      },
    });
    t.field("bytesValue", {
      type: nullable("Byte"),
      resolve: (source) => {
        const value = source.getBytesValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.BytesValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "bytes_value",
          typeFullName: "google.protobuf.BytesValue",
        },
      },
    });
    t.field("requiredTimestamp", {
      type: nonNull("DateTime"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredTimestamp();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return getTransformer("google.protobuf.Timestamp").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "required_timestamp",
          typeFullName: "google.protobuf.Timestamp",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: { module: __filename, export: "testapis$wktypes$Message" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.wktypes.Message",
      name: "Message",
      package: "testapis.wktypes",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("timestamp", {
        type: nullable("DateTime"),
        extensions: {
          protobufField: {
            name: "timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
      t.field("int32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "int32_value",
            typeFullName: "google.protobuf.Int32Value",
          },
        },
      });
      t.field("int64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "int64_value",
            typeFullName: "google.protobuf.Int64Value",
          },
        },
      });
      t.field("uint32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "uint32_value",
            typeFullName: "google.protobuf.UInt32Value",
          },
        },
      });
      t.field("uint64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "uint64_value",
            typeFullName: "google.protobuf.UInt64Value",
          },
        },
      });
      t.field("floatValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "float_value",
            typeFullName: "google.protobuf.FloatValue",
          },
        },
      });
      t.field("doubleValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "double_value",
            typeFullName: "google.protobuf.DoubleValue",
          },
        },
      });
      t.field("boolValue", {
        type: nullable("Boolean"),
        extensions: {
          protobufField: {
            name: "bool_value",
            typeFullName: "google.protobuf.BoolValue",
          },
        },
      });
      t.field("stringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "string_value",
            typeFullName: "google.protobuf.StringValue",
          },
        },
      });
      t.field("bytesValue", {
        type: nullable("Byte"),
        extensions: {
          protobufField: {
            name: "bytes_value",
            typeFullName: "google.protobuf.BytesValue",
          },
        },
      });
      t.field("requiredTimestamp", {
        type: nonNull("DateTime"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.wktypes.Message",
        name: "Message",
        package: "testapis.wktypes",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      if (input.timestamp != null) {
        output.setTimestamp(
          getTransformer("google.protobuf.Timestamp").gqlToProto(
            input.timestamp,
          ),
        );
      }
      if (input.int32Value != null) {
        output.setInt32Value(
          getTransformer("google.protobuf.Int32Value").gqlToProto(
            input.int32Value,
          ),
        );
      }
      if (input.int64Value != null) {
        output.setInt64Value(
          getTransformer("google.protobuf.Int64Value").gqlToProto(
            input.int64Value,
          ),
        );
      }
      if (input.uint32Value != null) {
        output.setUint32Value(
          getTransformer("google.protobuf.UInt32Value").gqlToProto(
            input.uint32Value,
          ),
        );
      }
      if (input.uint64Value != null) {
        output.setUint64Value(
          getTransformer("google.protobuf.UInt64Value").gqlToProto(
            input.uint64Value,
          ),
        );
      }
      if (input.floatValue != null) {
        output.setFloatValue(
          getTransformer("google.protobuf.FloatValue").gqlToProto(
            input.floatValue,
          ),
        );
      }
      if (input.doubleValue != null) {
        output.setDoubleValue(
          getTransformer("google.protobuf.DoubleValue").gqlToProto(
            input.doubleValue,
          ),
        );
      }
      if (input.boolValue != null) {
        output.setBoolValue(
          getTransformer("google.protobuf.BoolValue").gqlToProto(
            input.boolValue,
          ),
        );
      }
      if (input.stringValue != null) {
        output.setStringValue(
          getTransformer("google.protobuf.StringValue").gqlToProto(
            input.stringValue,
          ),
        );
      }
      if (input.bytesValue != null) {
        output.setBytesValue(
          getTransformer("google.protobuf.BytesValue").gqlToProto(
            input.bytesValue,
          ),
        );
      }
      output.setRequiredTimestamp(
        getTransformer("google.protobuf.Timestamp").gqlToProto(
          input.requiredTimestamp,
        ),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        timestamp: {
          type: nullable("DateTime"),
          extensions: {
            protobufField: {
              name: "timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
        int32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "int32_value",
              typeFullName: "google.protobuf.Int32Value",
            },
          },
        },
        int64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "int64_value",
              typeFullName: "google.protobuf.Int64Value",
            },
          },
        },
        uint32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "uint32_value",
              typeFullName: "google.protobuf.UInt32Value",
            },
          },
        },
        uint64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "uint64_value",
              typeFullName: "google.protobuf.UInt64Value",
            },
          },
        },
        floatValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "float_value",
              typeFullName: "google.protobuf.FloatValue",
            },
          },
        },
        doubleValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "double_value",
              typeFullName: "google.protobuf.DoubleValue",
            },
          },
        },
        boolValue: {
          type: nullable("Boolean"),
          extensions: {
            protobufField: {
              name: "bool_value",
              typeFullName: "google.protobuf.BoolValue",
            },
          },
        },
        stringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "string_value",
              typeFullName: "google.protobuf.StringValue",
            },
          },
        },
        bytesValue: {
          type: nullable("Byte"),
          extensions: {
            protobufField: {
              name: "bytes_value",
              typeFullName: "google.protobuf.BytesValue",
            },
          },
        },
        requiredTimestamp: {
          type: nonNull("DateTime"),
          extensions: {
            protobufField: {
              name: "required_timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/wktypes/well_known_types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.wktypes' > generates files by plugin 'with partial inputs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/wktypes/well_known_types.proto

/* eslint-disable */

import { Message as Message1 } from "@testapis/proto/testapis/wktypes/well_known_types_pb";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { getTransformer } from "proto-nexus";

export type testapis$wktypes$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("timestamp", {
      type: nullable("DateTime"),
      resolve: (source) => {
        const value = source.getTimestamp();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Timestamp").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "timestamp",
          typeFullName: "google.protobuf.Timestamp",
        },
      },
    });
    t.field("int32Value", {
      type: nullable("Int"),
      resolve: (source) => {
        const value = source.getInt32Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Int32Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "int32_value",
          typeFullName: "google.protobuf.Int32Value",
        },
      },
    });
    t.field("int64Value", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getInt64Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Int64Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "int64_value",
          typeFullName: "google.protobuf.Int64Value",
        },
      },
    });
    t.field("uint32Value", {
      type: nullable("Int"),
      resolve: (source) => {
        const value = source.getUint32Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.UInt32Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "uint32_value",
          typeFullName: "google.protobuf.UInt32Value",
        },
      },
    });
    t.field("uint64Value", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getUint64Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.UInt64Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "uint64_value",
          typeFullName: "google.protobuf.UInt64Value",
        },
      },
    });
    t.field("floatValue", {
      type: nullable("Float"),
      resolve: (source) => {
        const value = source.getFloatValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.FloatValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "float_value",
          typeFullName: "google.protobuf.FloatValue",
        },
      },
    });
    t.field("doubleValue", {
      type: nullable("Float"),
      resolve: (source) => {
        const value = source.getDoubleValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.DoubleValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "double_value",
          typeFullName: "google.protobuf.DoubleValue",
        },
      },
    });
    t.field("boolValue", {
      type: nullable("Boolean"),
      resolve: (source) => {
        const value = source.getBoolValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.BoolValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "bool_value",
          typeFullName: "google.protobuf.BoolValue",
        },
      },
    });
    t.field("stringValue", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getStringValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.StringValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "string_value",
          typeFullName: "google.protobuf.StringValue",
        },
      },
    });
    t.field("bytesValue", {
      type: nullable("Byte"),
      resolve: (source) => {
        const value = source.getBytesValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.BytesValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "bytes_value",
          typeFullName: "google.protobuf.BytesValue",
        },
      },
    });
    t.field("requiredTimestamp", {
      type: nonNull("DateTime"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredTimestamp();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return getTransformer("google.protobuf.Timestamp").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "required_timestamp",
          typeFullName: "google.protobuf.Timestamp",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: { module: __filename, export: "testapis$wktypes$Message" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.wktypes.Message",
      name: "Message",
      package: "testapis.wktypes",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("timestamp", {
        type: nullable("DateTime"),
        extensions: {
          protobufField: {
            name: "timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
      t.field("int32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "int32_value",
            typeFullName: "google.protobuf.Int32Value",
          },
        },
      });
      t.field("int64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "int64_value",
            typeFullName: "google.protobuf.Int64Value",
          },
        },
      });
      t.field("uint32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "uint32_value",
            typeFullName: "google.protobuf.UInt32Value",
          },
        },
      });
      t.field("uint64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "uint64_value",
            typeFullName: "google.protobuf.UInt64Value",
          },
        },
      });
      t.field("floatValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "float_value",
            typeFullName: "google.protobuf.FloatValue",
          },
        },
      });
      t.field("doubleValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "double_value",
            typeFullName: "google.protobuf.DoubleValue",
          },
        },
      });
      t.field("boolValue", {
        type: nullable("Boolean"),
        extensions: {
          protobufField: {
            name: "bool_value",
            typeFullName: "google.protobuf.BoolValue",
          },
        },
      });
      t.field("stringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "string_value",
            typeFullName: "google.protobuf.StringValue",
          },
        },
      });
      t.field("bytesValue", {
        type: nullable("Byte"),
        extensions: {
          protobufField: {
            name: "bytes_value",
            typeFullName: "google.protobuf.BytesValue",
          },
        },
      });
      t.field("requiredTimestamp", {
        type: nonNull("DateTime"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.wktypes.Message",
        name: "Message",
        package: "testapis.wktypes",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      if (input.timestamp != null) {
        output.setTimestamp(
          getTransformer("google.protobuf.Timestamp").gqlToProto(
            input.timestamp,
          ),
        );
      }
      if (input.int32Value != null) {
        output.setInt32Value(
          getTransformer("google.protobuf.Int32Value").gqlToProto(
            input.int32Value,
          ),
        );
      }
      if (input.int64Value != null) {
        output.setInt64Value(
          getTransformer("google.protobuf.Int64Value").gqlToProto(
            input.int64Value,
          ),
        );
      }
      if (input.uint32Value != null) {
        output.setUint32Value(
          getTransformer("google.protobuf.UInt32Value").gqlToProto(
            input.uint32Value,
          ),
        );
      }
      if (input.uint64Value != null) {
        output.setUint64Value(
          getTransformer("google.protobuf.UInt64Value").gqlToProto(
            input.uint64Value,
          ),
        );
      }
      if (input.floatValue != null) {
        output.setFloatValue(
          getTransformer("google.protobuf.FloatValue").gqlToProto(
            input.floatValue,
          ),
        );
      }
      if (input.doubleValue != null) {
        output.setDoubleValue(
          getTransformer("google.protobuf.DoubleValue").gqlToProto(
            input.doubleValue,
          ),
        );
      }
      if (input.boolValue != null) {
        output.setBoolValue(
          getTransformer("google.protobuf.BoolValue").gqlToProto(
            input.boolValue,
          ),
        );
      }
      if (input.stringValue != null) {
        output.setStringValue(
          getTransformer("google.protobuf.StringValue").gqlToProto(
            input.stringValue,
          ),
        );
      }
      if (input.bytesValue != null) {
        output.setBytesValue(
          getTransformer("google.protobuf.BytesValue").gqlToProto(
            input.bytesValue,
          ),
        );
      }
      output.setRequiredTimestamp(
        getTransformer("google.protobuf.Timestamp").gqlToProto(
          input.requiredTimestamp,
        ),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        timestamp: {
          type: nullable("DateTime"),
          extensions: {
            protobufField: {
              name: "timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
        int32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "int32_value",
              typeFullName: "google.protobuf.Int32Value",
            },
          },
        },
        int64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "int64_value",
              typeFullName: "google.protobuf.Int64Value",
            },
          },
        },
        uint32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "uint32_value",
              typeFullName: "google.protobuf.UInt32Value",
            },
          },
        },
        uint64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "uint64_value",
              typeFullName: "google.protobuf.UInt64Value",
            },
          },
        },
        floatValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "float_value",
              typeFullName: "google.protobuf.FloatValue",
            },
          },
        },
        doubleValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "double_value",
              typeFullName: "google.protobuf.DoubleValue",
            },
          },
        },
        boolValue: {
          type: nullable("Boolean"),
          extensions: {
            protobufField: {
              name: "bool_value",
              typeFullName: "google.protobuf.BoolValue",
            },
          },
        },
        stringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "string_value",
              typeFullName: "google.protobuf.StringValue",
            },
          },
        },
        bytesValue: {
          type: nullable("Byte"),
          extensions: {
            protobufField: {
              name: "bytes_value",
              typeFullName: "google.protobuf.BytesValue",
            },
          },
        },
        requiredTimestamp: {
          type: nonNull("DateTime"),
          extensions: {
            protobufField: {
              name: "required_timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
      },
    },
  },
);

export const MessagePartialInput = Object.assign(
  inputObjectType({
    name: "MessagePartialInput",
    definition: (t) => {
      t.field("timestamp", {
        type: nullable("DateTime"),
        extensions: {
          protobufField: {
            name: "timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
      t.field("int32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "int32_value",
            typeFullName: "google.protobuf.Int32Value",
          },
        },
      });
      t.field("int64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "int64_value",
            typeFullName: "google.protobuf.Int64Value",
          },
        },
      });
      t.field("uint32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "uint32_value",
            typeFullName: "google.protobuf.UInt32Value",
          },
        },
      });
      t.field("uint64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "uint64_value",
            typeFullName: "google.protobuf.UInt64Value",
          },
        },
      });
      t.field("floatValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "float_value",
            typeFullName: "google.protobuf.FloatValue",
          },
        },
      });
      t.field("doubleValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "double_value",
            typeFullName: "google.protobuf.DoubleValue",
          },
        },
      });
      t.field("boolValue", {
        type: nullable("Boolean"),
        extensions: {
          protobufField: {
            name: "bool_value",
            typeFullName: "google.protobuf.BoolValue",
          },
        },
      });
      t.field("stringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "string_value",
            typeFullName: "google.protobuf.StringValue",
          },
        },
      });
      t.field("bytesValue", {
        type: nullable("Byte"),
        extensions: {
          protobufField: {
            name: "bytes_value",
            typeFullName: "google.protobuf.BytesValue",
          },
        },
      });
      t.field("requiredTimestamp", {
        type: nullable("DateTime"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.wktypes.Message",
        name: "Message",
        package: "testapis.wktypes",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessagePartialInput"],
    ): Message1 => {
      const output = new Message1();
      if (input.timestamp != null) {
        output.setTimestamp(
          getTransformer("google.protobuf.Timestamp").gqlToProto(
            input.timestamp,
          ),
        );
      }
      if (input.int32Value != null) {
        output.setInt32Value(
          getTransformer("google.protobuf.Int32Value").gqlToProto(
            input.int32Value,
          ),
        );
      }
      if (input.int64Value != null) {
        output.setInt64Value(
          getTransformer("google.protobuf.Int64Value").gqlToProto(
            input.int64Value,
          ),
        );
      }
      if (input.uint32Value != null) {
        output.setUint32Value(
          getTransformer("google.protobuf.UInt32Value").gqlToProto(
            input.uint32Value,
          ),
        );
      }
      if (input.uint64Value != null) {
        output.setUint64Value(
          getTransformer("google.protobuf.UInt64Value").gqlToProto(
            input.uint64Value,
          ),
        );
      }
      if (input.floatValue != null) {
        output.setFloatValue(
          getTransformer("google.protobuf.FloatValue").gqlToProto(
            input.floatValue,
          ),
        );
      }
      if (input.doubleValue != null) {
        output.setDoubleValue(
          getTransformer("google.protobuf.DoubleValue").gqlToProto(
            input.doubleValue,
          ),
        );
      }
      if (input.boolValue != null) {
        output.setBoolValue(
          getTransformer("google.protobuf.BoolValue").gqlToProto(
            input.boolValue,
          ),
        );
      }
      if (input.stringValue != null) {
        output.setStringValue(
          getTransformer("google.protobuf.StringValue").gqlToProto(
            input.stringValue,
          ),
        );
      }
      if (input.bytesValue != null) {
        output.setBytesValue(
          getTransformer("google.protobuf.BytesValue").gqlToProto(
            input.bytesValue,
          ),
        );
      }
      if (input.requiredTimestamp != null) {
        output.setRequiredTimestamp(
          getTransformer("google.protobuf.Timestamp").gqlToProto(
            input.requiredTimestamp,
          ),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        timestamp: {
          type: nullable("DateTime"),
          extensions: {
            protobufField: {
              name: "timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
        int32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "int32_value",
              typeFullName: "google.protobuf.Int32Value",
            },
          },
        },
        int64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "int64_value",
              typeFullName: "google.protobuf.Int64Value",
            },
          },
        },
        uint32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "uint32_value",
              typeFullName: "google.protobuf.UInt32Value",
            },
          },
        },
        uint64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "uint64_value",
              typeFullName: "google.protobuf.UInt64Value",
            },
          },
        },
        floatValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "float_value",
              typeFullName: "google.protobuf.FloatValue",
            },
          },
        },
        doubleValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "double_value",
              typeFullName: "google.protobuf.DoubleValue",
            },
          },
        },
        boolValue: {
          type: nullable("Boolean"),
          extensions: {
            protobufField: {
              name: "bool_value",
              typeFullName: "google.protobuf.BoolValue",
            },
          },
        },
        stringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "string_value",
              typeFullName: "google.protobuf.StringValue",
            },
          },
        },
        bytesValue: {
          type: nullable("Byte"),
          extensions: {
            protobufField: {
              name: "bytes_value",
              typeFullName: "google.protobuf.BytesValue",
            },
          },
        },
        requiredTimestamp: {
          type: nullable("DateTime"),
          extensions: {
            protobufField: {
              name: "required_timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/wktypes/well_known_types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.wktypes' > generates files by plugin 'with use_protobufjs' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/wktypes/well_known_types.proto

/* eslint-disable */

import { google, testapis } from "@testapis/proto/testapis/wktypes";
import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { getTransformer } from "proto-nexus";

export type testapis$wktypes$Message = testapis.wktypes.Message;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("timestamp", {
      type: nullable("DateTime"),
      resolve: (source) => {
        const value = source.timestamp;
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Timestamp").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "timestamp",
          typeFullName: "google.protobuf.Timestamp",
        },
      },
    });
    t.field("int32Value", {
      type: nullable("Int"),
      resolve: (source) => {
        const value = source.int32Value;
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Int32Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "int32_value",
          typeFullName: "google.protobuf.Int32Value",
        },
      },
    });
    t.field("int64Value", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.int64Value;
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Int64Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "int64_value",
          typeFullName: "google.protobuf.Int64Value",
        },
      },
    });
    t.field("uint32Value", {
      type: nullable("Int"),
      resolve: (source) => {
        const value = source.uint32Value;
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.UInt32Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "uint32_value",
          typeFullName: "google.protobuf.UInt32Value",
        },
      },
    });
    t.field("uint64Value", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.uint64Value;
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.UInt64Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "uint64_value",
          typeFullName: "google.protobuf.UInt64Value",
        },
      },
    });
    t.field("floatValue", {
      type: nullable("Float"),
      resolve: (source) => {
        const value = source.floatValue;
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.FloatValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "float_value",
          typeFullName: "google.protobuf.FloatValue",
        },
      },
    });
    t.field("doubleValue", {
      type: nullable("Float"),
      resolve: (source) => {
        const value = source.doubleValue;
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.DoubleValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "double_value",
          typeFullName: "google.protobuf.DoubleValue",
        },
      },
    });
    t.field("boolValue", {
      type: nullable("Boolean"),
      resolve: (source) => {
        const value = source.boolValue;
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.BoolValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "bool_value",
          typeFullName: "google.protobuf.BoolValue",
        },
      },
    });
    t.field("stringValue", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.stringValue;
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.StringValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "string_value",
          typeFullName: "google.protobuf.StringValue",
        },
      },
    });
    t.field("bytesValue", {
      type: nullable("Byte"),
      resolve: (source) => {
        const value = source.bytesValue;
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.BytesValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "bytes_value",
          typeFullName: "google.protobuf.BytesValue",
        },
      },
    });
    t.field("requiredTimestamp", {
      type: nonNull("DateTime"),
      description: "Required.",
      resolve: (source) => {
        const value = source.requiredTimestamp;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return getTransformer("google.protobuf.Timestamp").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "required_timestamp",
          typeFullName: "google.protobuf.Timestamp",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof testapis.wktypes.Message;
  },
  sourceType: { module: __filename, export: "testapis$wktypes$Message" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.wktypes.Message",
      name: "Message",
      package: "testapis.wktypes",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("timestamp", {
        type: nullable("DateTime"),
        extensions: {
          protobufField: {
            name: "timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
      t.field("int32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "int32_value",
            typeFullName: "google.protobuf.Int32Value",
          },
        },
      });
      t.field("int64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "int64_value",
            typeFullName: "google.protobuf.Int64Value",
          },
        },
      });
      t.field("uint32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "uint32_value",
            typeFullName: "google.protobuf.UInt32Value",
          },
        },
      });
      t.field("uint64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "uint64_value",
            typeFullName: "google.protobuf.UInt64Value",
          },
        },
      });
      t.field("floatValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "float_value",
            typeFullName: "google.protobuf.FloatValue",
          },
        },
      });
      t.field("doubleValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "double_value",
            typeFullName: "google.protobuf.DoubleValue",
          },
        },
      });
      t.field("boolValue", {
        type: nullable("Boolean"),
        extensions: {
          protobufField: {
            name: "bool_value",
            typeFullName: "google.protobuf.BoolValue",
          },
        },
      });
      t.field("stringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "string_value",
            typeFullName: "google.protobuf.StringValue",
          },
        },
      });
      t.field("bytesValue", {
        type: nullable("Byte"),
        extensions: {
          protobufField: {
            name: "bytes_value",
            typeFullName: "google.protobuf.BytesValue",
          },
        },
      });
      t.field("requiredTimestamp", {
        type: nonNull("DateTime"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.wktypes.Message",
        name: "Message",
        package: "testapis.wktypes",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessageInput"],
    ): testapis.wktypes.Message => {
      const output = new testapis.wktypes.Message();
      if (input.timestamp != null) {
        output.timestamp = new google.protobuf.Timestamp(
          getTransformer("google.protobuf.Timestamp").gqlToProto(
            input.timestamp,
          ) as any,
        );
      }
      if (input.int32Value != null) {
        output.int32Value = new google.protobuf.Int32Value(
          getTransformer("google.protobuf.Int32Value").gqlToProto(
            input.int32Value,
          ),
        );
      }
      if (input.int64Value != null) {
        output.int64Value = new google.protobuf.Int64Value(
          getTransformer("google.protobuf.Int64Value").gqlToProto(
            input.int64Value,
          ) as any,
        );
      }
      if (input.uint32Value != null) {
        output.uint32Value = new google.protobuf.UInt32Value(
          getTransformer("google.protobuf.UInt32Value").gqlToProto(
            input.uint32Value,
          ),
        );
      }
      if (input.uint64Value != null) {
        output.uint64Value = new google.protobuf.UInt64Value(
          getTransformer("google.protobuf.UInt64Value").gqlToProto(
            input.uint64Value,
          ) as any,
        );
      }
      if (input.floatValue != null) {
        output.floatValue = new google.protobuf.FloatValue(
          getTransformer("google.protobuf.FloatValue").gqlToProto(
            input.floatValue,
          ),
        );
      }
      if (input.doubleValue != null) {
        output.doubleValue = new google.protobuf.DoubleValue(
          getTransformer("google.protobuf.DoubleValue").gqlToProto(
            input.doubleValue,
          ),
        );
      }
      if (input.boolValue != null) {
        output.boolValue = new google.protobuf.BoolValue(
          getTransformer("google.protobuf.BoolValue").gqlToProto(
            input.boolValue,
          ),
        );
      }
      if (input.stringValue != null) {
        output.stringValue = new google.protobuf.StringValue(
          getTransformer("google.protobuf.StringValue").gqlToProto(
            input.stringValue,
          ),
        );
      }
      if (input.bytesValue != null) {
        output.bytesValue = new google.protobuf.BytesValue(
          getTransformer("google.protobuf.BytesValue").gqlToProto(
            input.bytesValue,
          ),
        );
      }
      output.requiredTimestamp = new google.protobuf.Timestamp(
        getTransformer("google.protobuf.Timestamp").gqlToProto(
          input.requiredTimestamp,
        ) as any,
      );
      return output;
    },
    _protoNexus: {
      fields: {
        timestamp: {
          type: nullable("DateTime"),
          extensions: {
            protobufField: {
              name: "timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
        int32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "int32_value",
              typeFullName: "google.protobuf.Int32Value",
            },
          },
        },
        int64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "int64_value",
              typeFullName: "google.protobuf.Int64Value",
            },
          },
        },
        uint32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "uint32_value",
              typeFullName: "google.protobuf.UInt32Value",
            },
          },
        },
        uint64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "uint64_value",
              typeFullName: "google.protobuf.UInt64Value",
            },
          },
        },
        floatValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "float_value",
              typeFullName: "google.protobuf.FloatValue",
            },
          },
        },
        doubleValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "double_value",
              typeFullName: "google.protobuf.DoubleValue",
            },
          },
        },
        boolValue: {
          type: nullable("Boolean"),
          extensions: {
            protobufField: {
              name: "bool_value",
              typeFullName: "google.protobuf.BoolValue",
            },
          },
        },
        stringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "string_value",
              typeFullName: "google.protobuf.StringValue",
            },
          },
        },
        bytesValue: {
          type: nullable("Byte"),
          extensions: {
            protobufField: {
              name: "bytes_value",
              typeFullName: "google.protobuf.BytesValue",
            },
          },
        },
        requiredTimestamp: {
          type: nonNull("DateTime"),
          extensions: {
            protobufField: {
              name: "required_timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/wktypes/well_known_types_pb_nexus.ts",
  },
]
`;

exports[`'testapis.wktypes' > generates files by plugin 'without import prefix' 1`] = `
[
  {
    "content": "// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/wktypes/well_known_types.proto

/* eslint-disable */

import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { getTransformer } from "proto-nexus";
import { Message as Message1 } from "./testapis/wktypes/well_known_types_pb";

export type testapis$wktypes$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("timestamp", {
      type: nullable("DateTime"),
      resolve: (source) => {
        const value = source.getTimestamp();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Timestamp").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "timestamp",
          typeFullName: "google.protobuf.Timestamp",
        },
      },
    });
    t.field("int32Value", {
      type: nullable("Int"),
      resolve: (source) => {
        const value = source.getInt32Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Int32Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "int32_value",
          typeFullName: "google.protobuf.Int32Value",
        },
      },
    });
    t.field("int64Value", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getInt64Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.Int64Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "int64_value",
          typeFullName: "google.protobuf.Int64Value",
        },
      },
    });
    t.field("uint32Value", {
      type: nullable("Int"),
      resolve: (source) => {
        const value = source.getUint32Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.UInt32Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "uint32_value",
          typeFullName: "google.protobuf.UInt32Value",
        },
      },
    });
    t.field("uint64Value", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getUint64Value();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.UInt64Value").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "uint64_value",
          typeFullName: "google.protobuf.UInt64Value",
        },
      },
    });
    t.field("floatValue", {
      type: nullable("Float"),
      resolve: (source) => {
        const value = source.getFloatValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.FloatValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "float_value",
          typeFullName: "google.protobuf.FloatValue",
        },
      },
    });
    t.field("doubleValue", {
      type: nullable("Float"),
      resolve: (source) => {
        const value = source.getDoubleValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.DoubleValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "double_value",
          typeFullName: "google.protobuf.DoubleValue",
        },
      },
    });
    t.field("boolValue", {
      type: nullable("Boolean"),
      resolve: (source) => {
        const value = source.getBoolValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.BoolValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "bool_value",
          typeFullName: "google.protobuf.BoolValue",
        },
      },
    });
    t.field("stringValue", {
      type: nullable("String"),
      resolve: (source) => {
        const value = source.getStringValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.StringValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "string_value",
          typeFullName: "google.protobuf.StringValue",
        },
      },
    });
    t.field("bytesValue", {
      type: nullable("Byte"),
      resolve: (source) => {
        const value = source.getBytesValue();
        if (value == null) {
          return null;
        }
        return getTransformer("google.protobuf.BytesValue").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "bytes_value",
          typeFullName: "google.protobuf.BytesValue",
        },
      },
    });
    t.field("requiredTimestamp", {
      type: nonNull("DateTime"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getRequiredTimestamp();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return getTransformer("google.protobuf.Timestamp").protoToGql(value);
      },
      extensions: {
        protobufField: {
          name: "required_timestamp",
          typeFullName: "google.protobuf.Timestamp",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: { module: __filename, export: "testapis$wktypes$Message" },
  extensions: {
    protobufMessage: {
      fullName: "testapis.wktypes.Message",
      name: "Message",
      package: "testapis.wktypes",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("timestamp", {
        type: nullable("DateTime"),
        extensions: {
          protobufField: {
            name: "timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
      t.field("int32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "int32_value",
            typeFullName: "google.protobuf.Int32Value",
          },
        },
      });
      t.field("int64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "int64_value",
            typeFullName: "google.protobuf.Int64Value",
          },
        },
      });
      t.field("uint32Value", {
        type: nullable("Int"),
        extensions: {
          protobufField: {
            name: "uint32_value",
            typeFullName: "google.protobuf.UInt32Value",
          },
        },
      });
      t.field("uint64Value", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "uint64_value",
            typeFullName: "google.protobuf.UInt64Value",
          },
        },
      });
      t.field("floatValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "float_value",
            typeFullName: "google.protobuf.FloatValue",
          },
        },
      });
      t.field("doubleValue", {
        type: nullable("Float"),
        extensions: {
          protobufField: {
            name: "double_value",
            typeFullName: "google.protobuf.DoubleValue",
          },
        },
      });
      t.field("boolValue", {
        type: nullable("Boolean"),
        extensions: {
          protobufField: {
            name: "bool_value",
            typeFullName: "google.protobuf.BoolValue",
          },
        },
      });
      t.field("stringValue", {
        type: nullable("String"),
        extensions: {
          protobufField: {
            name: "string_value",
            typeFullName: "google.protobuf.StringValue",
          },
        },
      });
      t.field("bytesValue", {
        type: nullable("Byte"),
        extensions: {
          protobufField: {
            name: "bytes_value",
            typeFullName: "google.protobuf.BytesValue",
          },
        },
      });
      t.field("requiredTimestamp", {
        type: nonNull("DateTime"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "required_timestamp",
            typeFullName: "google.protobuf.Timestamp",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.wktypes.Message",
        name: "Message",
        package: "testapis.wktypes",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      if (input.timestamp != null) {
        output.setTimestamp(
          getTransformer("google.protobuf.Timestamp").gqlToProto(
            input.timestamp,
          ),
        );
      }
      if (input.int32Value != null) {
        output.setInt32Value(
          getTransformer("google.protobuf.Int32Value").gqlToProto(
            input.int32Value,
          ),
        );
      }
      if (input.int64Value != null) {
        output.setInt64Value(
          getTransformer("google.protobuf.Int64Value").gqlToProto(
            input.int64Value,
          ),
        );
      }
      if (input.uint32Value != null) {
        output.setUint32Value(
          getTransformer("google.protobuf.UInt32Value").gqlToProto(
            input.uint32Value,
          ),
        );
      }
      if (input.uint64Value != null) {
        output.setUint64Value(
          getTransformer("google.protobuf.UInt64Value").gqlToProto(
            input.uint64Value,
          ),
        );
      }
      if (input.floatValue != null) {
        output.setFloatValue(
          getTransformer("google.protobuf.FloatValue").gqlToProto(
            input.floatValue,
          ),
        );
      }
      if (input.doubleValue != null) {
        output.setDoubleValue(
          getTransformer("google.protobuf.DoubleValue").gqlToProto(
            input.doubleValue,
          ),
        );
      }
      if (input.boolValue != null) {
        output.setBoolValue(
          getTransformer("google.protobuf.BoolValue").gqlToProto(
            input.boolValue,
          ),
        );
      }
      if (input.stringValue != null) {
        output.setStringValue(
          getTransformer("google.protobuf.StringValue").gqlToProto(
            input.stringValue,
          ),
        );
      }
      if (input.bytesValue != null) {
        output.setBytesValue(
          getTransformer("google.protobuf.BytesValue").gqlToProto(
            input.bytesValue,
          ),
        );
      }
      output.setRequiredTimestamp(
        getTransformer("google.protobuf.Timestamp").gqlToProto(
          input.requiredTimestamp,
        ),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        timestamp: {
          type: nullable("DateTime"),
          extensions: {
            protobufField: {
              name: "timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
        int32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "int32_value",
              typeFullName: "google.protobuf.Int32Value",
            },
          },
        },
        int64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "int64_value",
              typeFullName: "google.protobuf.Int64Value",
            },
          },
        },
        uint32Value: {
          type: nullable("Int"),
          extensions: {
            protobufField: {
              name: "uint32_value",
              typeFullName: "google.protobuf.UInt32Value",
            },
          },
        },
        uint64Value: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "uint64_value",
              typeFullName: "google.protobuf.UInt64Value",
            },
          },
        },
        floatValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "float_value",
              typeFullName: "google.protobuf.FloatValue",
            },
          },
        },
        doubleValue: {
          type: nullable("Float"),
          extensions: {
            protobufField: {
              name: "double_value",
              typeFullName: "google.protobuf.DoubleValue",
            },
          },
        },
        boolValue: {
          type: nullable("Boolean"),
          extensions: {
            protobufField: {
              name: "bool_value",
              typeFullName: "google.protobuf.BoolValue",
            },
          },
        },
        stringValue: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "string_value",
              typeFullName: "google.protobuf.StringValue",
            },
          },
        },
        bytesValue: {
          type: nullable("Byte"),
          extensions: {
            protobufField: {
              name: "bytes_value",
              typeFullName: "google.protobuf.BytesValue",
            },
          },
        },
        requiredTimestamp: {
          type: nonNull("DateTime"),
          extensions: {
            protobufField: {
              name: "required_timestamp",
              typeFullName: "google.protobuf.Timestamp",
            },
          },
        },
      },
    },
  },
);
",
    "name": "testapis/wktypes/well_known_types_pb_nexus.ts",
  },
]
`;
