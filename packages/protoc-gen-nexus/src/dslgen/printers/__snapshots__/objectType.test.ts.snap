// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`createObjectTypeCode > google-protobuf > 'generates code for a message with nesâ€¦' 1`] = `
"import { Message as Message1 } from "@testapis/google-protobuf/testapis/primitives/primitives_pb";
import { list, nonNull, nullable, objectType } from "nexus";

export type testapis$primitives$Message = Message1;
export const Message = objectType({
  "name": "Message",
  "definition": (t) => {
    t.field("requiredPrimitives", {
      "type": nonNull("Primitives"),
      "description": "Required.",
      "resolve": (source) => {
        const value = source.getRequiredPrimitives();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": {
        "protobufField": { "name": "required_primitives", "typeFullName": "testapis.primitives.Primitives" },
      },
    });
    t.field("optionalPrimitives", {
      "type": nullable("Primitives"),
      "description": "Optional.",
      "resolve": (source) => {
        const value = source.getOptionalPrimitives();
        if (value == null) {
          return null;
        }
        return value;
      },
      "extensions": {
        "protobufField": { "name": "optional_primitives", "typeFullName": "testapis.primitives.Primitives" },
      },
    });
    t.field("requiredPrimitivesList", {
      "type": nonNull(list(nonNull("Primitives"))),
      "description": "Required.",
      "resolve": (source) => {
        return source.getRequiredPrimitivesListList().map((value) => {
          return value;
        });
      },
      "extensions": {
        "protobufField": { "name": "required_primitives_list", "typeFullName": "testapis.primitives.Primitives" },
      },
    });
    t.field("optionalPrimitivesList", {
      "type": nullable(list(nonNull("Primitives"))),
      "description": "Optional.",
      "resolve": (source) => {
        return source.getOptionalPrimitivesListList().map((value) => {
          return value;
        });
      },
      "extensions": {
        "protobufField": { "name": "optional_primitives_list", "typeFullName": "testapis.primitives.Primitives" },
      },
    });
  },
  "isTypeOf": (data: unknown) => {
    return data instanceof Message1;
  },
  "sourceType": { "module": __filename, "export": "testapis$primitives$Message" },
  "extensions": {
    "protobufMessage": {
      "fullName": "testapis.primitives.Message",
      "name": "Message",
      "package": "testapis.primitives",
    },
  },
});
"
`;

exports[`createObjectTypeCode > google-protobuf > 'generates code for a simple message' 1`] = `
"import { Primitives as Primitives1 } from "@testapis/google-protobuf/testapis/primitives/primitives_pb";
import { list, nonNull, objectType } from "nexus";

export type testapis$primitives$Primitives = Primitives1;
export const Primitives = objectType({
  "name": "Primitives",
  "definition": (t) => {
    t.field("requiredDoubleValue", {
      "type": nonNull("Float"),
      "resolve": (source) => {
        const value = source.getRequiredDoubleValue();
        return value;
      },
      "extensions": { "protobufField": { "name": "required_double_value", "typeFullName": "double" } },
    });
    t.field("requiredFloatValue", {
      "type": nonNull("Float"),
      "resolve": (source) => {
        const value = source.getRequiredFloatValue();
        return value;
      },
      "extensions": { "protobufField": { "name": "required_float_value", "typeFullName": "float" } },
    });
    t.field("requiredInt32Value", {
      "type": nonNull("Int"),
      "resolve": (source) => {
        const value = source.getRequiredInt32Value();
        return value;
      },
      "extensions": { "protobufField": { "name": "required_int32_value", "typeFullName": "int32" } },
    });
    t.field("requiredInt64Value", {
      "type": nonNull("Int64"),
      "resolve": (source) => {
        const value = source.getRequiredInt64Value();
        return value.toString();
      },
      "extensions": { "protobufField": { "name": "required_int64_value", "typeFullName": "int64" } },
    });
    t.field("requiredUint32Value", {
      "type": nonNull("Int"),
      "resolve": (source) => {
        const value = source.getRequiredUint32Value();
        return value;
      },
      "extensions": { "protobufField": { "name": "required_uint32_value", "typeFullName": "uint32" } },
    });
    t.field("requiredUint64Value", {
      "type": nonNull("Int64"),
      "resolve": (source) => {
        const value = source.getRequiredUint64Value();
        return value.toString();
      },
      "extensions": { "protobufField": { "name": "required_uint64_value", "typeFullName": "uint64" } },
    });
    t.field("requiredSint32Value", {
      "type": nonNull("Int"),
      "resolve": (source) => {
        const value = source.getRequiredSint32Value();
        return value;
      },
      "extensions": { "protobufField": { "name": "required_sint32_value", "typeFullName": "sint32" } },
    });
    t.field("requiredSint64Value", {
      "type": nonNull("Int64"),
      "resolve": (source) => {
        const value = source.getRequiredSint64Value();
        return value.toString();
      },
      "extensions": { "protobufField": { "name": "required_sint64_value", "typeFullName": "sint64" } },
    });
    t.field("requiredFixed32Value", {
      "type": nonNull("Int"),
      "resolve": (source) => {
        const value = source.getRequiredFixed32Value();
        return value;
      },
      "extensions": { "protobufField": { "name": "required_fixed32_value", "typeFullName": "fixed32" } },
    });
    t.field("requiredFixed64Value", {
      "type": nonNull("Int64"),
      "resolve": (source) => {
        const value = source.getRequiredFixed64Value();
        return value.toString();
      },
      "extensions": { "protobufField": { "name": "required_fixed64_value", "typeFullName": "fixed64" } },
    });
    t.field("requiredSfixed32Value", {
      "type": nonNull("Int"),
      "resolve": (source) => {
        const value = source.getRequiredSfixed32Value();
        return value;
      },
      "extensions": { "protobufField": { "name": "required_sfixed32_value", "typeFullName": "sfixed32" } },
    });
    t.field("requiredSfixed64Value", {
      "type": nonNull("Int64"),
      "resolve": (source) => {
        const value = source.getRequiredSfixed64Value();
        return value.toString();
      },
      "extensions": { "protobufField": { "name": "required_sfixed64_value", "typeFullName": "sfixed64" } },
    });
    t.field("requiredBoolValue", {
      "type": nonNull("Boolean"),
      "resolve": (source) => {
        const value = source.getRequiredBoolValue();
        return value;
      },
      "extensions": { "protobufField": { "name": "required_bool_value", "typeFullName": "bool" } },
    });
    t.field("requiredStringValue", {
      "type": nonNull("String"),
      "resolve": (source) => {
        const value = source.getRequiredStringValue();
        return value;
      },
      "extensions": { "protobufField": { "name": "required_string_value", "typeFullName": "string" } },
    });
    t.field("requiredBytesValue", {
      "type": nonNull("Byte"),
      "resolve": (source) => {
        const value = source.getRequiredBytesValue();
        return value;
      },
      "extensions": { "protobufField": { "name": "required_bytes_value", "typeFullName": "bytes" } },
    });
    t.field("requiredDoubleValues", {
      "type": nonNull(list(nonNull("Float"))),
      "resolve": (source) => {
        return source.getRequiredDoubleValuesList().map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_double_values", "typeFullName": "double" } },
    });
    t.field("requiredFloatValues", {
      "type": nonNull(list(nonNull("Float"))),
      "resolve": (source) => {
        return source.getRequiredFloatValuesList().map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_float_values", "typeFullName": "float" } },
    });
    t.field("requiredInt32Values", {
      "type": nonNull(list(nonNull("Int"))),
      "resolve": (source) => {
        return source.getRequiredInt32ValuesList().map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_int32_values", "typeFullName": "int32" } },
    });
    t.field("requiredInt64Values", {
      "type": nonNull(list(nonNull("Int64"))),
      "resolve": (source) => {
        return source.getRequiredInt64ValuesList().map((value) => {
          return value.toString();
        });
      },
      "extensions": { "protobufField": { "name": "required_int64_values", "typeFullName": "int64" } },
    });
    t.field("requiredUint32Values", {
      "type": nonNull(list(nonNull("Int"))),
      "resolve": (source) => {
        return source.getRequiredUint32ValuesList().map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_uint32_values", "typeFullName": "uint32" } },
    });
    t.field("requiredUint64Values", {
      "type": nonNull(list(nonNull("Int64"))),
      "resolve": (source) => {
        return source.getRequiredUint64ValuesList().map((value) => {
          return value.toString();
        });
      },
      "extensions": { "protobufField": { "name": "required_uint64_values", "typeFullName": "uint64" } },
    });
    t.field("requiredSint32Values", {
      "type": nonNull(list(nonNull("Int"))),
      "resolve": (source) => {
        return source.getRequiredSint32ValuesList().map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_sint32_values", "typeFullName": "sint32" } },
    });
    t.field("requiredSint64Values", {
      "type": nonNull(list(nonNull("Int64"))),
      "resolve": (source) => {
        return source.getRequiredSint64ValuesList().map((value) => {
          return value.toString();
        });
      },
      "extensions": { "protobufField": { "name": "required_sint64_values", "typeFullName": "sint64" } },
    });
    t.field("requiredFixed32Values", {
      "type": nonNull(list(nonNull("Int"))),
      "resolve": (source) => {
        return source.getRequiredFixed32ValuesList().map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_fixed32_values", "typeFullName": "fixed32" } },
    });
    t.field("requiredFixed64Values", {
      "type": nonNull(list(nonNull("Int64"))),
      "resolve": (source) => {
        return source.getRequiredFixed64ValuesList().map((value) => {
          return value.toString();
        });
      },
      "extensions": { "protobufField": { "name": "required_fixed64_values", "typeFullName": "fixed64" } },
    });
    t.field("requiredSfixed32Values", {
      "type": nonNull(list(nonNull("Int"))),
      "resolve": (source) => {
        return source.getRequiredSfixed32ValuesList().map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_sfixed32_values", "typeFullName": "sfixed32" } },
    });
    t.field("requiredSfixed64Values", {
      "type": nonNull(list(nonNull("Int64"))),
      "resolve": (source) => {
        return source.getRequiredSfixed64ValuesList().map((value) => {
          return value.toString();
        });
      },
      "extensions": { "protobufField": { "name": "required_sfixed64_values", "typeFullName": "sfixed64" } },
    });
    t.field("requiredBoolValues", {
      "type": nonNull(list(nonNull("Boolean"))),
      "resolve": (source) => {
        return source.getRequiredBoolValuesList().map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_bool_values", "typeFullName": "bool" } },
    });
    t.field("requiredStringValues", {
      "type": nonNull(list(nonNull("String"))),
      "resolve": (source) => {
        return source.getRequiredStringValuesList().map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_string_values", "typeFullName": "string" } },
    });
    t.field("requiredBytesValues", {
      "type": nonNull(list(nonNull("Byte"))),
      "resolve": (source) => {
        return source.getRequiredBytesValuesList().map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_bytes_values", "typeFullName": "bytes" } },
    });
  },
  "isTypeOf": (data: unknown) => {
    return data instanceof Primitives1;
  },
  "sourceType": { "module": __filename, "export": "testapis$primitives$Primitives" },
  "extensions": {
    "protobufMessage": {
      "fullName": "testapis.primitives.Primitives",
      "name": "Primitives",
      "package": "testapis.primitives",
    },
  },
});
"
`;

exports[`createObjectTypeCode > protobufjs > 'generates code for a message with nesâ€¦' 1`] = `
"import { testapis } from "@testapis/protobufjs/testapis/primitives";
import { list, nonNull, nullable, objectType } from "nexus";

export type testapis$primitives$Message = testapis.primitives.Message;
export const Message = objectType({
  "name": "Message",
  "definition": (t) => {
    t.field("requiredPrimitives", {
      "type": nonNull("Primitives"),
      "description": "Required.",
      "resolve": (source) => {
        const value = source.requiredPrimitives;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": {
        "protobufField": { "name": "required_primitives", "typeFullName": "testapis.primitives.Primitives" },
      },
    });
    t.field("optionalPrimitives", {
      "type": nullable("Primitives"),
      "description": "Optional.",
      "resolve": (source) => {
        const value = source.optionalPrimitives;
        if (value == null) {
          return null;
        }
        return value;
      },
      "extensions": {
        "protobufField": { "name": "optional_primitives", "typeFullName": "testapis.primitives.Primitives" },
      },
    });
    t.field("requiredPrimitivesList", {
      "type": nonNull(list(nonNull("Primitives"))),
      "description": "Required.",
      "resolve": (source) => {
        return source.requiredPrimitivesList.map((value) => {
          return value;
        });
      },
      "extensions": {
        "protobufField": { "name": "required_primitives_list", "typeFullName": "testapis.primitives.Primitives" },
      },
    });
    t.field("optionalPrimitivesList", {
      "type": nullable(list(nonNull("Primitives"))),
      "description": "Optional.",
      "resolve": (source) => {
        return source.optionalPrimitivesList.map((value) => {
          return value;
        });
      },
      "extensions": {
        "protobufField": { "name": "optional_primitives_list", "typeFullName": "testapis.primitives.Primitives" },
      },
    });
  },
  "isTypeOf": (data: unknown) => {
    return data instanceof testapis.primitives.Message;
  },
  "sourceType": { "module": __filename, "export": "testapis$primitives$Message" },
  "extensions": {
    "protobufMessage": {
      "fullName": "testapis.primitives.Message",
      "name": "Message",
      "package": "testapis.primitives",
    },
  },
});
"
`;

exports[`createObjectTypeCode > protobufjs > 'generates code for a message with oneâ€¦' 1`] = `
"import { testapis } from "@testapis/protobufjs/testapis/oneof";
import { nonNull, nullable, objectType } from "nexus";

export type testapis$oneof$OneofParent = testapis.oneof.OneofParent;
export const OneofParent = objectType({
  "name": "OneofParent",
  "definition": (t) => {
    t.field("normalField", {
      "type": nonNull("String"),
      "resolve": (source) => {
        const value = source.normalField;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": { "protobufField": { "name": "normal_field", "typeFullName": "string" } },
    });
    t.field("requiredOneofMembers", {
      "type": nonNull("OneofParentRequiredOneofMembers"),
      "description": "Required. disallow not_set.",
      "resolve": (source) => {
        const value = source;
        if (value.requiredMessage1 != null) {
          return value.requiredMessage1;
        }
        if (value.requiredMessage2 != null) {
          return value.requiredMessage2;
        }
        throw new Error("One of the following fields must be non-null: required_message1, required_message2");
      },
      "extensions": { "protobufField": { "name": "required_oneof_members" } },
    });
    t.field("optionalOneofMembers", {
      "type": nullable("OneofParentOptionalOneofMembers"),
      "resolve": (source) => {
        const value = source;
        if (value.optoinalMessage1 != null) {
          return value.optoinalMessage1;
        }
        if (value.optoinalMessage2 != null) {
          return value.optoinalMessage2;
        }
        return null;
      },
      "extensions": { "protobufField": { "name": "optional_oneof_members" } },
    });
  },
  "isTypeOf": (data: unknown) => {
    return data instanceof testapis.oneof.OneofParent;
  },
  "sourceType": { "module": __filename, "export": "testapis$oneof$OneofParent" },
  "extensions": {
    "protobufMessage": { "fullName": "testapis.oneof.OneofParent", "name": "OneofParent", "package": "testapis.oneof" },
  },
});
"
`;

exports[`createObjectTypeCode > protobufjs > 'generates code for a simple message' 1`] = `
"import { testapis } from "@testapis/protobufjs/testapis/primitives";
import { list, nonNull, objectType } from "nexus";

export type testapis$primitives$Primitives = testapis.primitives.Primitives;
export const Primitives = objectType({
  "name": "Primitives",
  "definition": (t) => {
    t.field("requiredDoubleValue", {
      "type": nonNull("Float"),
      "resolve": (source) => {
        const value = source.requiredDoubleValue;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": { "protobufField": { "name": "required_double_value", "typeFullName": "double" } },
    });
    t.field("requiredFloatValue", {
      "type": nonNull("Float"),
      "resolve": (source) => {
        const value = source.requiredFloatValue;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": { "protobufField": { "name": "required_float_value", "typeFullName": "float" } },
    });
    t.field("requiredInt32Value", {
      "type": nonNull("Int"),
      "resolve": (source) => {
        const value = source.requiredInt32Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": { "protobufField": { "name": "required_int32_value", "typeFullName": "int32" } },
    });
    t.field("requiredInt64Value", {
      "type": nonNull("Int64"),
      "resolve": (source) => {
        const value = source.requiredInt64Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      "extensions": { "protobufField": { "name": "required_int64_value", "typeFullName": "int64" } },
    });
    t.field("requiredUint32Value", {
      "type": nonNull("Int"),
      "resolve": (source) => {
        const value = source.requiredUint32Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": { "protobufField": { "name": "required_uint32_value", "typeFullName": "uint32" } },
    });
    t.field("requiredUint64Value", {
      "type": nonNull("Int64"),
      "resolve": (source) => {
        const value = source.requiredUint64Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      "extensions": { "protobufField": { "name": "required_uint64_value", "typeFullName": "uint64" } },
    });
    t.field("requiredSint32Value", {
      "type": nonNull("Int"),
      "resolve": (source) => {
        const value = source.requiredSint32Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": { "protobufField": { "name": "required_sint32_value", "typeFullName": "sint32" } },
    });
    t.field("requiredSint64Value", {
      "type": nonNull("Int64"),
      "resolve": (source) => {
        const value = source.requiredSint64Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      "extensions": { "protobufField": { "name": "required_sint64_value", "typeFullName": "sint64" } },
    });
    t.field("requiredFixed32Value", {
      "type": nonNull("Int"),
      "resolve": (source) => {
        const value = source.requiredFixed32Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": { "protobufField": { "name": "required_fixed32_value", "typeFullName": "fixed32" } },
    });
    t.field("requiredFixed64Value", {
      "type": nonNull("Int64"),
      "resolve": (source) => {
        const value = source.requiredFixed64Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      "extensions": { "protobufField": { "name": "required_fixed64_value", "typeFullName": "fixed64" } },
    });
    t.field("requiredSfixed32Value", {
      "type": nonNull("Int"),
      "resolve": (source) => {
        const value = source.requiredSfixed32Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": { "protobufField": { "name": "required_sfixed32_value", "typeFullName": "sfixed32" } },
    });
    t.field("requiredSfixed64Value", {
      "type": nonNull("Int64"),
      "resolve": (source) => {
        const value = source.requiredSfixed64Value;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value.toString();
      },
      "extensions": { "protobufField": { "name": "required_sfixed64_value", "typeFullName": "sfixed64" } },
    });
    t.field("requiredBoolValue", {
      "type": nonNull("Boolean"),
      "resolve": (source) => {
        const value = source.requiredBoolValue;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": { "protobufField": { "name": "required_bool_value", "typeFullName": "bool" } },
    });
    t.field("requiredStringValue", {
      "type": nonNull("String"),
      "resolve": (source) => {
        const value = source.requiredStringValue;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": { "protobufField": { "name": "required_string_value", "typeFullName": "string" } },
    });
    t.field("requiredBytesValue", {
      "type": nonNull("Byte"),
      "resolve": (source) => {
        const value = source.requiredBytesValue;
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      "extensions": { "protobufField": { "name": "required_bytes_value", "typeFullName": "bytes" } },
    });
    t.field("requiredDoubleValues", {
      "type": nonNull(list(nonNull("Float"))),
      "resolve": (source) => {
        return source.requiredDoubleValues.map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_double_values", "typeFullName": "double" } },
    });
    t.field("requiredFloatValues", {
      "type": nonNull(list(nonNull("Float"))),
      "resolve": (source) => {
        return source.requiredFloatValues.map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_float_values", "typeFullName": "float" } },
    });
    t.field("requiredInt32Values", {
      "type": nonNull(list(nonNull("Int"))),
      "resolve": (source) => {
        return source.requiredInt32Values.map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_int32_values", "typeFullName": "int32" } },
    });
    t.field("requiredInt64Values", {
      "type": nonNull(list(nonNull("Int64"))),
      "resolve": (source) => {
        return source.requiredInt64Values.map((value) => {
          return value.toString();
        });
      },
      "extensions": { "protobufField": { "name": "required_int64_values", "typeFullName": "int64" } },
    });
    t.field("requiredUint32Values", {
      "type": nonNull(list(nonNull("Int"))),
      "resolve": (source) => {
        return source.requiredUint32Values.map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_uint32_values", "typeFullName": "uint32" } },
    });
    t.field("requiredUint64Values", {
      "type": nonNull(list(nonNull("Int64"))),
      "resolve": (source) => {
        return source.requiredUint64Values.map((value) => {
          return value.toString();
        });
      },
      "extensions": { "protobufField": { "name": "required_uint64_values", "typeFullName": "uint64" } },
    });
    t.field("requiredSint32Values", {
      "type": nonNull(list(nonNull("Int"))),
      "resolve": (source) => {
        return source.requiredSint32Values.map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_sint32_values", "typeFullName": "sint32" } },
    });
    t.field("requiredSint64Values", {
      "type": nonNull(list(nonNull("Int64"))),
      "resolve": (source) => {
        return source.requiredSint64Values.map((value) => {
          return value.toString();
        });
      },
      "extensions": { "protobufField": { "name": "required_sint64_values", "typeFullName": "sint64" } },
    });
    t.field("requiredFixed32Values", {
      "type": nonNull(list(nonNull("Int"))),
      "resolve": (source) => {
        return source.requiredFixed32Values.map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_fixed32_values", "typeFullName": "fixed32" } },
    });
    t.field("requiredFixed64Values", {
      "type": nonNull(list(nonNull("Int64"))),
      "resolve": (source) => {
        return source.requiredFixed64Values.map((value) => {
          return value.toString();
        });
      },
      "extensions": { "protobufField": { "name": "required_fixed64_values", "typeFullName": "fixed64" } },
    });
    t.field("requiredSfixed32Values", {
      "type": nonNull(list(nonNull("Int"))),
      "resolve": (source) => {
        return source.requiredSfixed32Values.map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_sfixed32_values", "typeFullName": "sfixed32" } },
    });
    t.field("requiredSfixed64Values", {
      "type": nonNull(list(nonNull("Int64"))),
      "resolve": (source) => {
        return source.requiredSfixed64Values.map((value) => {
          return value.toString();
        });
      },
      "extensions": { "protobufField": { "name": "required_sfixed64_values", "typeFullName": "sfixed64" } },
    });
    t.field("requiredBoolValues", {
      "type": nonNull(list(nonNull("Boolean"))),
      "resolve": (source) => {
        return source.requiredBoolValues.map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_bool_values", "typeFullName": "bool" } },
    });
    t.field("requiredStringValues", {
      "type": nonNull(list(nonNull("String"))),
      "resolve": (source) => {
        return source.requiredStringValues.map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_string_values", "typeFullName": "string" } },
    });
    t.field("requiredBytesValues", {
      "type": nonNull(list(nonNull("Byte"))),
      "resolve": (source) => {
        return source.requiredBytesValues.map((value) => {
          return value;
        });
      },
      "extensions": { "protobufField": { "name": "required_bytes_values", "typeFullName": "bytes" } },
    });
  },
  "isTypeOf": (data: unknown) => {
    return data instanceof testapis.primitives.Primitives;
  },
  "sourceType": { "module": __filename, "export": "testapis$primitives$Primitives" },
  "extensions": {
    "protobufMessage": {
      "fullName": "testapis.primitives.Primitives",
      "name": "Primitives",
      "package": "testapis.primitives",
    },
  },
});
"
`;

exports[`createObjectTypeCode > with extensions > 'generates code for message with fieldâ€¦' 1`] = `
"import {
  EnumWillRename,
  PrefixedEnum,
  PrefixedMessage,
} from "@testapis/google-protobuf/testapis/extensions/extensions_pb";
import { list, nonNull, nullable, objectType } from "nexus";

export type testapis$extensions$PrefixedMessage = PrefixedMessage;
export const TestPrefixPrefixedMessage = objectType({
  "name": "TestPrefixPrefixedMessage",
  "definition": (t) => {
    t.field("id", {
      "type": nonNull("Int64"),
      "description": "Output only.",
      "resolve": (source) => {
        const value = source.getId();
        return value.toString();
      },
      "extensions": { "protobufField": { "name": "id", "typeFullName": "uint64" } },
    });
    t.field("body", {
      "type": nonNull("String"),
      "resolve": (source) => {
        const value = source.getBody();
        return value;
      },
      "extensions": { "protobufField": { "name": "body", "typeFullName": "string" } },
    });
    t.field("prefixedEnum", {
      "type": nullable("TestPrefixPrefixedEnum"),
      "resolve": (source) => {
        const value = source.getPrefixedEnum();
        if (value == null) {
          return null;
        }
        if (value === PrefixedEnum.PREFIXED_ENUM_UNSPECIFIED) {
          return null;
        }
        if (value === PrefixedEnum.PREFIXED_IGNORED) {
          return null;
        }
        return value;
      },
      "extensions": {
        "protobufField": { "name": "prefixed_enum", "typeFullName": "testapis.extensions.PrefixedEnum" },
      },
    });
    t.field("notIgnoredMessage", {
      "type": nullable("TestPrefixIgnoredMessageNotIgnored"),
      "resolve": (source) => {
        const value = source.getNotIgnoredMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      "extensions": {
        "protobufField": {
          "name": "not_ignored_message",
          "typeFullName": "testapis.extensions.IgnoredMessage.NotIgnored",
        },
      },
    });
    t.field("squashedMessage", {
      "type": nullable("TestPrefixPrefixedMessageSquashedMessage"),
      "resolve": (source) => {
        const value = source.getSquashedMessage();
        if (value == null) {
          return null;
        }
        switch (value.getSquashedMessageCase()) {
          case PrefixedMessage.SquashedMessage.SquashedMessageCase.ONEOF_FIELD: {
            return value.getOneofField()!;
          }

          case PrefixedMessage.SquashedMessage.SquashedMessageCase.ONEOF_FIELD_2: {
            return value.getOneofField2()!;
          }

          default: {
            return null;
          }
        }
      },
      "extensions": {
        "protobufField": {
          "name": "squashed_message",
          "typeFullName": "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("thisFieldWasRenamed", {
      "type": nonNull("String"),
      "resolve": (source) => {
        const value = source.getThisFieldWillBeRenamed();
        return value;
      },
      "extensions": {
        "protobufField": {
          "name": "this_field_will_be_renamed",
          "typeFullName": "string",
          "options": { "[graphql.field]": { "name": "thisFieldWasRenamed" } },
        },
      },
    });
    t.field("skipResolver", {
      "type": nonNull("String"),
      "resolve": (source) => {
        throw new Error("not implemented");
      },
      "extensions": {
        "protobufField": {
          "name": "skip_resolver",
          "typeFullName": "string",
          "options": { "[graphql.field]": { "skipResolver": true } },
        },
      },
    });
    t.field("squashedMessages", {
      "type": nullable(list(nonNull("TestPrefixPrefixedMessageSquashedMessage"))),
      "resolve": (source) => {
        return source.getSquashedMessagesList().map((value) => {
          switch (value.getSquashedMessageCase()) {
            case PrefixedMessage.SquashedMessage.SquashedMessageCase.ONEOF_FIELD: {
              return value.getOneofField()!;
            }

            case PrefixedMessage.SquashedMessage.SquashedMessageCase.ONEOF_FIELD_2: {
              return value.getOneofField2()!;
            }

            default: {
              throw new Error("One of the following fields must be non-null: oneof_field, oneof_field_2");
            }
          }
        });
      },
      "extensions": {
        "protobufField": {
          "name": "squashed_messages",
          "typeFullName": "testapis.extensions.PrefixedMessage.SquashedMessage",
        },
      },
    });
    t.field("renamedMessage", {
      "type": nullable("TestPrefixRenamedMessage"),
      "resolve": (source) => {
        const value = source.getRenamedMessage();
        if (value == null) {
          return null;
        }
        return value;
      },
      "extensions": {
        "protobufField": { "name": "renamed_message", "typeFullName": "testapis.extensions.MessageWillRename" },
      },
    });
    t.field("renamedEnum", {
      "type": nullable("TestPrefixRenamedEnum"),
      "resolve": (source) => {
        const value = source.getRenamedEnum();
        if (value == null) {
          return null;
        }
        if (value === EnumWillRename.ENUM_WILL_RENAME_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      "extensions": {
        "protobufField": { "name": "renamed_enum", "typeFullName": "testapis.extensions.EnumWillRename" },
      },
    });
    t.field("partialIgnoreOneof", {
      "type": nullable("TestPrefixPrefixedMessagePartialIgnoreOneof"),
      "resolve": (source) => {
        const value = source;
        switch (value.getPartialIgnoreOneofCase()) {
          case PrefixedMessage.PartialIgnoreOneofCase.ONEOF_NOT_IGNORED_FIELD: {
            return value.getOneofNotIgnoredField()!;
          }

          default: {
            return null;
          }
        }
      },
      "extensions": { "protobufField": { "name": "partial_ignore_oneof" } },
    });
  },
  "isTypeOf": (data: unknown) => {
    return data instanceof PrefixedMessage;
  },
  "sourceType": { "module": __filename, "export": "testapis$extensions$PrefixedMessage" },
  "extensions": {
    "protobufMessage": {
      "fullName": "testapis.extensions.PrefixedMessage",
      "name": "PrefixedMessage",
      "package": "testapis.extensions",
    },
  },
});
"
`;
