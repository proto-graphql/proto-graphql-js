// Generated by scripts/build-proto.ts. DO NOT EDIT.

export const fileDescriptorSetBins = {
  "testapis.custom_types": "CuECCiB0ZXN0YXBpcy9jdXN0b21fdHlwZXMvZGF0ZS5wcm90bxIVdGVzdGFwaXMuY3VzdG9tX3R5cGVzIkIKBERhdGUSEgoEeWVhchgBIAEoDVIEeWVhchIUCgVtb250aBgCIAEoDVIFbW9udGgSEAoDZGF5GAMgASgNUgNkYXlK2QEKBhIEAAAIAQoICgEMEgMAABIKCAoBAhIDAgAeCgoKAgQAEgQEAAgBCgoKAwQAARIDBAgMCgsKBAQAAgASAwUCEgoMCgUEAAIABRIDBQIICgwKBQQAAgABEgMFCQ0KDAoFBAACAAMSAwUQEQoLCgQEAAIBEgMGAhMKDAoFBAACAQUSAwYCCAoMCgUEAAIBARIDBgkOCgwKBQQAAgEDEgMGERIKCwoEBAACAhIDBwIRCgwKBQQAAgIFEgMHAggKDAoFBAACAgESAwcJDAoMCgUEAAICAxIDBw8QYgZwcm90bzMKjwMKIHRlc3RhcGlzL2N1c3RvbV90eXBlcy9wb3N0LnByb3RvEhV0ZXN0YXBpcy5jdXN0b21fdHlwZXMaIHRlc3RhcGlzL2N1c3RvbV90eXBlcy9kYXRlLnByb3RvImAKBFBvc3QSFAoFdGl0bGUYASABKAlSBXRpdGxlEkIKDnB1Ymxpc2hlZF9kYXRlGAIgASgLMhsudGVzdGFwaXMuY3VzdG9tX3R5cGVzLkRhdGVSDXB1Ymxpc2hlZERhdGVKxwEKBhIEAAALAQoICgEMEgMAABIKCAoBAhIDAgAeCgkKAgMAEgMEACoKCgoCBAASBAYACwEKCgoDBAABEgMGCAwKGAoEBAACABIDCAITGgsgUmVxdWlyZWQuCgoMCgUEAAIABRIDCAIICgwKBQQAAgABEgMICQ4KDAoFBAACAAMSAwgREgoYCgQEAAIBEgMKAhoaCyBPcHRpb25hbC4KCgwKBQQAAgEGEgMKAgYKDAoFBAACAQESAwoHFQoMCgUEAAIBAxIDChgZYgZwcm90bzM=",
  "testapis.deprecation": "CoQSCiZ0ZXN0YXBpcy9kZXByZWNhdGlvbi9kZXByZWNhdGlvbi5wcm90bxIUdGVzdGFwaXMuZGVwcmVjYXRpb24ijAEKEURlcHJlY2F0ZWRNZXNzYWdlEhIKBGJvZHkYASABKAlSBGJvZHkSOwoEZW51bRgCIAEoDjInLnRlc3RhcGlzLmRlcHJlY2F0aW9uLk5vdERlcHJlY2F0ZWRFbnVtUgRlbnVtGiIKDElubmVyTWVzc2FnZRISCgRib2R5GAEgASgJUgRib2R5OgIYASKqBAoUTm90RGVwcmVjYXRlZE1lc3NhZ2USFgoEYm9keRgBIAEoCUICGAFSBGJvZHkSOAoEZW51bRgCIAEoDjIkLnRlc3RhcGlzLmRlcHJlY2F0aW9uLkRlcHJlY2F0ZWRFbnVtUgRlbnVtElIKBG1zZzEYAyABKAsyOC50ZXN0YXBpcy5kZXByZWNhdGlvbi5Ob3REZXByZWNhdGVkTWVzc2FnZS5Jbm5lck1lc3NhZ2UxQgIYAUgAUgRtc2cxEk4KBG1zZzIYBCABKAsyOC50ZXN0YXBpcy5kZXByZWNhdGlvbi5Ob3REZXByZWNhdGVkTWVzc2FnZS5Jbm5lck1lc3NhZ2UySABSBG1zZzISUgoEbXNnMxgFIAEoCzI4LnRlc3RhcGlzLmRlcHJlY2F0aW9uLk5vdERlcHJlY2F0ZWRNZXNzYWdlLklubmVyTWVzc2FnZTFCAhgBSAFSBG1zZzMSUgoEbXNnNBgGIAEoCzI4LnRlc3RhcGlzLmRlcHJlY2F0aW9uLk5vdERlcHJlY2F0ZWRNZXNzYWdlLklubmVyTWVzc2FnZTJCAhgBSAFSBG1zZzQaIwoNSW5uZXJNZXNzYWdlMRISCgRib2R5GAEgASgJUgRib2R5GiMKDUlubmVyTWVzc2FnZTISEgoEYm9keRgBIAEoCVIEYm9keUIWChRub3RfZGVwcmVjYXRlZF9vbmVvZkISChBkZXByZWNhdGVkX29uZW9mKmgKEU5vdERlcHJlY2F0ZWRFbnVtEiMKH05PVF9ERVBSRUNBVEVEX0VOVU1fVU5TUEVDSUZJRUQQABIWChJOT1RfREVQUkVDQVRFRF9GT08QARIWCg5ERVBSRUNBVEVEX0JBUhACGgIIASpdCg5EZXByZWNhdGVkRW51bRIfChtERVBSRUNB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",
  "testapis.edgecases.import_from_same_pkg": "CvcBCjN0ZXN0YXBpcy9lZGdlY2FzZXMvaW1wb3J0X2Zyb21fc2FtZV9wa2cvY2hpbGQucHJvdG8SJ3Rlc3RhcGlzLmVkZ2VjYXNlcy5pbXBvcnRfZnJvbV9zYW1lX3BrZyIiCgxDaGlsZE1lc3NhZ2USEgoEYm9keRgBIAEoCVIEYm9keUprCgYSBAAABgEKCAoBDBIDAAASCggKAQISAwIAMAoKCgIEABIEBAAGAQoKCgMEAAESAwQIFAoLCgQEAAIAEgMFAhIKDAoFBAACAAUSAwUCCAoMCgUEAAIAARIDBQkNCgwKBQQAAgADEgMFEBFiBnByb3RvMwryAgo0dGVzdGFwaXMvZWRnZWNhc2VzL2ltcG9ydF9mcm9tX3NhbWVfcGtnL3BhcmVudC5wcm90bxIndGVzdGFwaXMuZWRnZWNhc2VzLmltcG9ydF9mcm9tX3NhbWVfcGtnGjN0ZXN0YXBpcy9lZGdlY2FzZXMvaW1wb3J0X2Zyb21fc2FtZV9wa2cvY2hpbGQucHJvdG8iXAoNUGFyZW50TWVzc2FnZRJLCgVjaGlsZBgBIAEoCzI1LnRlc3RhcGlzLmVkZ2VjYXNlcy5pbXBvcnRfZnJvbV9zYW1lX3BrZy5DaGlsZE1lc3NhZ2VSBWNoaWxkSnYKBhIEAAAIAQoICgEMEgMAABIKCAoBAhIDAgAwCgkKAgMAEgMEAD0KCgoCBAASBAYACAEKCgoDBAABEgMGCBUKCwoEBAACABIDBwJBCgwKBQQAAgAGEgMHAjYKDAoFBAACAAESAwc3PAoMCgUEAAIAAxIDBz9AYgZwcm90bzM=",
  "testapis.edgecases.import_oneof_member_from_other_file": "",
  "testapis.edgecases.import_squashed_union": "",
  "testapis.edgecases.import_squashed_union.pkg1": "",
  "testapis.edgecases.import_squashed_union.pkg2": "",
  "testapis.empty_types": "CoYBCiB0ZXN0YXBpcy9lbXB0eV90eXBlcy9lbXB0eS5wcm90bxIUdGVzdGFwaXMuZW1wdHlfdHlwZXMiDgoMRW1wdHlNZXNzYWdlSjQKBhIEAAAFAQoICgEMEgMAABIKCAoBAhIDAgAdCgoKAgQAEgQEAAUBCgoKAwQAARIDBAgUYgZwcm90bzM=",
  "testapis.enums": "CogQChp0ZXN0YXBpcy9lbnVtcy9lbnVtcy5wcm90bxINdGVzdGFwaS5lbnVtcyKCBgoQTWVzc2FnZVdpdGhFbnVtcxI/ChByZXF1aXJlZF9teV9lbnVtGAEgASgOMhUudGVzdGFwaS5lbnVtcy5NeUVudW1SDnJlcXVpcmVkTXlFbnVtEj8KEG9wdGlvbmFsX215X2VudW0YAiABKA4yFS50ZXN0YXBpLmVudW1zLk15RW51bVIOb3B0aW9uYWxNeUVudW0SdwokcmVxdWlyZWRfbXlfZW51bV93aXRob3V0X3Vuc3BlY2lmaWVkGAMgASgOMicudGVzdGFwaS5lbnVtcy5NeUVudW1XaXRob3V0VW5zcGVjaWZpZWRSIHJlcXVpcmVkTXlFbnVtV2l0aG91dFVuc3BlY2lmaWVkEncKJG9wdGlvbmFsX215X2VudW1fd2l0aG91dF91bnNwZWNpZmllZBgEIAEoDjInLnRlc3RhcGkuZW51bXMuTXlFbnVtV2l0aG91dFVuc3BlY2lmaWVkUiBvcHRpb25hbE15RW51bVdpdGhvdXRVbnNwZWNpZmllZBJBChFyZXF1aXJlZF9teV9lbnVtcxgFIAMoDjIVLnRlc3RhcGkuZW51bXMuTXlFbnVtUg9yZXF1aXJlZE15RW51bXMSQQoRb3B0aW9uYWxfbXlfZW51bXMYBiADKA4yFS50ZXN0YXBpLmVudW1zLk15RW51bVIPb3B0aW9uYWxNeUVudW1zEnkKJXJlcXVpcmVkX215X2VudW1fd2l0aG91dF91bnNwZWNpZmllZHMYByADKA4yJy50ZXN0YXBpLmVudW1zLk15RW51bVdpdGhvdXRVbnNwZWNpZmllZFIhcmVxdWlyZWRNeUVudW1XaXRob3V0VW5zcGVjaWZpZWRzEnkKJW9wdGlvbmFsX215X2VudW1fd2l0aG91dF91bnNwZWNpZmllZHMYCCADKA4yJy50ZXN0YXBpLmVudW1zLk15RW51bVdpdGhvdXRVbnNwZWNpZmllZFIhb3B0aW9uYWxNeUVudW1XaXRob3V0VW5zcGVjaWZpZWRzKlQKBk15RW51bRIXChNNWV9FTlVNX1VOU1BFQ0lGSUVEEAASDwoLTVlfRU5VTV9GT08QARIPCgtNWV9FTlVNX0JBUhACEg8KC01ZX0VOVU1fQkFaEAMqiQEKGE15RW51bVdpdGhvdXRVbnNwZWNpZmllZBIjCh9NWV9FTlVNX1dJVEhPVVRfVU5TUEVDSUZJRURfRk9PEAASIwofTVlfRU5VTV9XSVRIT1VUX1VOU1BFQ0lGSUVEX0JBUhABEiMKH01ZX0VOVU1fV0lUSE9VVF9VTlNQRUNJRklFRF9CQVoQAkrrBwoGEgQAACQBCggKAQwSAwAAEgoICgECEgMCABYKCgoCBAASBAQAFQEKCgoDBAABEgMECBgKGAoEBAACABIDBgIeGgsgUmVxdWlyZWQuCgoMCgUEAAIABhIDBgIICgwKBQQAAgABEgMGCRkKDAoFBAACAAMSAwYcHQoYCgQEAAIBEgMIAh4aCyBPcHRpb25hbC4KCgwKBQQAAgEGEgMIAggKDAoFBAACAQESAwgJGQoMCgUEAAIBAxIDCBwdChgKBAQAAgISAwoCRBoLIFJlcXVpcmVkLgoKDAoFBAACAgYSAwoCGgoMCgUEAAICARIDChs/CgwKBQQAAgIDEgMKQkMKGAoEBAACAxIDDAJEGgsgT3B0aW9uYWwuCgoMCgUEAAIDBhIDDAIaCgwKBQQAAgMBEgMMGz8KDAoFBAACAwMSAwxCQwoYCgQEAAIEEgMOAigaCyBSZXF1aXJlZC4KCgwKBQQAAgQEEgMOAgoKDAoFBAACBAYSAw4LEQoMCgUEAAIEARIDDhIjCgwKBQQAAgQDEgMOJicKGAoEBAACBRIDEAIoGgsgT3B0aW9uYWwuCgoMCgUEAAIFBBIDEAIKCgwKBQQAAgUGEgMQCxEKDAoFBAACBQESAxASIwoMCgUEAAIFAxIDECYnChgKBAQAAgYSAxICThoLIFJlcXVpcmVkLgoKDAoFBAACBgQSAxICCgoMCgUEAAIGBhIDEgsjCgwKBQQAAgYBEgMSJEkKDAoFBAACBgMSAxJMTQoYCgQEAAIHEgMUAk4aCyBPcHRpb25hbC4KCgwKBQQAAgcEEgMUAgoKDAoFBAACBwYSAxQLIwoMCgUEAAIHARIDFCRJCgwKBQQAAgcDEgMUTE0KCgoCBQASBBcAHQEKCgoDBQABEgMXBQsKCwoEBQACABIDGAIaCgwKBQUAAgABEgMYAhUKDAoFBQACAAISAxgYGQoLCgQFAAIBEgMZAhIKDAoFBQACAQESAxkCDQoMCgUFAAIBAhIDGRARChsKBAUAAgISAxsCEhoOIFRoaXMgaXMgQmFyLgoKDAoFBQACAgESAxsCDQoMCgUFAAICAhIDGxARCgsKBAUAAgMSAxwCEgoMCgUFAAIDARIDHAINCgwKBQUAAgMCEgMcEBEKCgoCBQESBCAAJAEKCgoDBQEBEgMgBR0KCwoEBQECABIDIQElCgwKBQUBAgABEgMhASAKDAoFBQECAAISAyEjJAoLCgQFAQIBEgMiASUKDAoFBQECAQESAyIBIAoMCgUFAQIBAhIDIiMkCgsKBAUBAgISAyMBJQoMCgUFAQICARIDIwEgCgwKBQUBAgICEgMjIyRiBnByb3RvMw==",
  "testapis.extensions": "",
  "testapis.extensions.field_nullability": "",
  "testapis.extensions.no_partial": "",
  "testapis.field_behavior": "CpwMCiZ0ZXN0YXBpcy9maWVsZF9iZWhhdmlvci9jb21tZW50cy5wcm90bxIUdGVzdGFwaXMuZGVwcmVjYXRpb24irgYKG0ZpZWxkQmVoYXZpb3JDb21lbnRzTWVzc2FnZRJdCg5yZXF1aXJlZF9maWVsZBgBIAEoCzI2LnRlc3RhcGlzLmRlcHJlY2F0aW9uLkZpZWxkQmVoYXZpb3JDb21lbnRzTWVzc2FnZS5Qb3N0Ug1yZXF1aXJlZEZpZWxkEnMKGnJlcXVpcmVkX291dHB1dF9vbmx5X2ZpZWxkGAIgASgLMjYudGVzdGFwaXMuZGVwcmVjYXRpb24uRmllbGRCZWhhdmlvckNvbWVudHNNZXNzYWdlLlBvc3RSF3JlcXVpcmVkT3V0cHV0T25seUZpZWxkEnMKGm91dHB1dF9vbmx5X3JlcXVpcmVkX2ZpZWxkGAMgASgLMjYudGVzdGFwaXMuZGVwcmVjYXRpb24uRmllbGRCZWhhdmlvckNvbWVudHNNZXNzYWdlLlBvc3RSF291dHB1dE9ubHlSZXF1aXJlZEZpZWxkEmIKEW91dHB1dF9vbmx5X2ZpZWxkGAQgASgLMjYudGVzdGFwaXMuZGVwcmVjYXRpb24uRmllbGRCZWhhdmlvckNvbWVudHNNZXNzYWdlLlBvc3RSD291dHB1dE9ubHlGaWVsZBJxChlyZXF1aXJlZF9pbnB1dF9vbmx5X2ZpZWxkGAUgASgLMjYudGVzdGFwaXMuZGVwcmVjYXRpb24uRmllbGRCZWhhdmlvckNvbWVudHNNZXNzYWdlLlBvc3RSFnJlcXVpcmVkSW5wdXRPbmx5RmllbGQScQoZaW5wdXRfb25seV9yZXF1aXJlZF9maWVsZBgGIAEoCzI2LnRlc3RhcGlzLmRlcHJlY2F0aW9uLkZpZWxkQmVoYXZpb3JDb21lbnRzTWVzc2FnZS5Qb3N0UhZpbnB1dE9ubHlSZXF1aXJlZEZpZWxkEmAKEGlucHV0X29ubHlfZmllbGQYByABKAsyNi50ZXN0YXBpcy5kZXByZWNhdGlvbi5GaWVsZEJlaGF2aW9yQ29tZW50c01lc3NhZ2UuUG9zdFIOaW5wdXRPbmx5RmllbGQaGgoEUG9zdBISCgRib2R5GAEgASgJUgRib2R5SqIFCgYSBAAAFwEKCAoBDBIDAAASCggKAQISAwIAHQoKCgIEABIEBAAXAQoKCgMEAAESAwQIIwoMCgQEAAMAEgQFAgcDCgwKBQQAAwABEgMFCg4KDQoGBAADAAIAEgMGBBQKDgoHBAADAAIABRIDBgQKCg4KBwQAAwACAAESAwYLDwoOCgcEAAMAAgADEgMGEhMKGAoEBAACABIDCgIaGgsgUmVxdWlyZWQuCgoMCgUEAAIABhIDCgIGCgwKBQQAAgABEgMKBxUKDAoFBAACAAMSAwoYGQolCgQEAAIBEgMMAiYaGCBSZXF1aXJlZC4gT3V0cHV0IG9ubHkuCgoMCgUEAAIBBhIDDAIGCgwKBQQAAgEBEgMMByEKDAoFBAACAQMSAwwkJQolCgQEAAICEgMOAiYaGCBPdXRwdXQgb25seS4gUmVxdWlyZWQuCgoMCgUEAAICBhIDDgIGCgwKBQQAAgIBEgMOByEKDAoFBAACAgMSAw4kJQobCgQEAAIDEgMQAh0aDiBPdXRwdXQgb25seS4KCgwKBQQAAgMGEgMQAgYKDAoFBAACAwESAxAHGAoMCgUEAAIDAxIDEBscCiQKBAQAAgQSAxICJRoXIFJlcXVpcmVkLiBJbnB1dCBvbmx5LgoKDAoFBAACBAYSAxICBgoMCgUEAAIEARIDEgcgCgwKBQQAAgQDEgMSIyQKJAoEBAACBRIDFAIlGhcgSW5wdXQgb25seS4gUmVxdWlyZWQuCgoMCgUEAAIFBhIDFAIGCgwKBQQAAgUBEgMUByAKDAoFBAACBQMSAxQjJAoaCgQEAAIGEgMWAhwaDSBJbnB1dCBvbmx5LgoKDAoFBAACBgYSAxYCBgoMCgUEAAIGARIDFgcXCgwKBQQAAgYDEgMWGhtiBnByb3RvMw==",
  "testapis.multipkgs": "Cq8DCiZ0ZXN0YXBpcy9tdWx0aXBrZ3Mvc3VicGtnMS90eXBlcy5wcm90bxIadGVzdGFwaXMubXVsdGlwa2dzLnN1YnBrZzEiIwoNU3VicGtnTWVzc2FnZRISCgRib2R5GAEgASgJUgRib2R5KjsKClN1YnBrZ0VudW0SGwoXU1VCUEtHX0VOVU1fVU5TUEVDSUZJRUQQABIHCgNGT08QARIHCgNCQVIQAkr+AQoGEgQAAAwBCggKAQwSAwAAEgoICgECEgMCACMKCgoCBAASBAQABgEKCgoDBAABEgMECBUKCwoEBAACABIDBQISCgwKBQQAAgAFEgMFAggKDAoFBAACAAESAwUJDQoMCgUEAAIAAxIDBRARCgoKAgUAEgQIAAwBCgoKAwUAARIDCAUPCgsKBAUAAgASAwkCHgoMCgUFAAIAARIDCQIZCgwKBQUAAgACEgMJHB0KCwoEBQACARIDCgIKCgwKBQUAAgEBEgMKAgUKDAoFBQACAQISAwoICQoLCgQFAAICEgMLAgoKDAoFBQACAgESAwsCBQoMCgUFAAICAhIDCwgJYgZwcm90bzMKuwMKJnRlc3RhcGlzL211bHRpcGtncy9zdWJwa2cyL3R5cGVzLnByb3RvEhp0ZXN0YXBpcy5tdWx0aXBrZ3Muc3VicGtnMRomdGVzdGFwaXMvbXVsdGlwa2dzL3N1YnBrZzEvdHlwZXMucHJvdG8ilAEKEU1lc3NhZ2VXaXRoU3VicGtnEkMKB21lc3NhZ2UYASABKAsyKS50ZXN0YXBpcy5tdWx0aXBrZ3Muc3VicGtnMS5TdWJwa2dNZXNzYWdlUgdtZXNzYWdlEjoKBGVudW0YAiABKA4yJi50ZXN0YXBpcy5tdWx0aXBrZ3Muc3VicGtnMS5TdWJwa2dFbnVtUgRlbnVtSq0BCgYSBAAACQEKCAoBDBIDAAASCggKAQISAwIAIwoJCgIDABIDBAAwCgoKAgQAEgQGAAkBCgoKAwQAARIDBggZCgsKBAQAAgASAwcCNwoMCgUEAAIABhIDBwIqCgwKBQQAAgABEgMHKzIKDAoFBAACAAMSAwc1NgoLCgQEAAIBEgMIAjEKDAoFBAACAQYSAwgCJwoMCgUEAAIBARIDCCgsCgwKBQQAAgEDEgMILzBiBnByb3RvMw==",
  "testapis.multipkgs.subpkg1": "Cq8DCiZ0ZXN0YXBpcy9tdWx0aXBrZ3Mvc3VicGtnMS90eXBlcy5wcm90bxIadGVzdGFwaXMubXVsdGlwa2dzLnN1YnBrZzEiIwoNU3VicGtnTWVzc2FnZRISCgRib2R5GAEgASgJUgRib2R5KjsKClN1YnBrZ0VudW0SGwoXU1VCUEtHX0VOVU1fVU5TUEVDSUZJRUQQABIHCgNGT08QARIHCgNCQVIQAkr+AQoGEgQAAAwBCggKAQwSAwAAEgoICgECEgMCACMKCgoCBAASBAQABgEKCgoDBAABEgMECBUKCwoEBAACABIDBQISCgwKBQQAAgAFEgMFAggKDAoFBAACAAESAwUJDQoMCgUEAAIAAxIDBRARCgoKAgUAEgQIAAwBCgoKAwUAARIDCAUPCgsKBAUAAgASAwkCHgoMCgUFAAIAARIDCQIZCgwKBQUAAgACEgMJHB0KCwoEBQACARIDCgIKCgwKBQUAAgEBEgMKAgUKDAoFBQACAQISAwoICQoLCgQFAAICEgMLAgoKDAoFBQACAgESAwsCBQoMCgUFAAICAhIDCwgJYgZwcm90bzM=",
  "testapis.multipkgs.subpkg2": "Cq8DCiZ0ZXN0YXBpcy9tdWx0aXBrZ3Mvc3VicGtnMS90eXBlcy5wcm90bxIadGVzdGFwaXMubXVsdGlwa2dzLnN1YnBrZzEiIwoNU3VicGtnTWVzc2FnZRISCgRib2R5GAEgASgJUgRib2R5KjsKClN1YnBrZ0VudW0SGwoXU1VCUEtHX0VOVU1fVU5TUEVDSUZJRUQQABIHCgNGT08QARIHCgNCQVIQAkr+AQoGEgQAAAwBCggKAQwSAwAAEgoICgECEgMCACMKCgoCBAASBAQABgEKCgoDBAABEgMECBUKCwoEBAACABIDBQISCgwKBQQAAgAFEgMFAggKDAoFBAACAAESAwUJDQoMCgUEAAIAAxIDBRARCgoKAgUAEgQIAAwBCgoKAwUAARIDCAUPCgsKBAUAAgASAwkCHgoMCgUFAAIAARIDCQIZCgwKBQUAAgACEgMJHB0KCwoEBQACARIDCgIKCgwKBQUAAgEBEgMKAgUKDAoFBQACAQISAwoICQoLCgQFAAICEgMLAgoKDAoFBQACAgESAwsCBQoMCgUFAAICAhIDCwgJYgZwcm90bzMKuwMKJnRlc3RhcGlzL211bHRpcGtncy9zdWJwa2cyL3R5cGVzLnByb3RvEhp0ZXN0YXBpcy5tdWx0aXBrZ3Muc3VicGtnMRomdGVzdGFwaXMvbXVsdGlwa2dzL3N1YnBrZzEvdHlwZXMucHJvdG8ilAEKEU1lc3NhZ2VXaXRoU3VicGtnEkMKB21lc3NhZ2UYASABKAsyKS50ZXN0YXBpcy5tdWx0aXBrZ3Muc3VicGtnMS5TdWJwa2dNZXNzYWdlUgdtZXNzYWdlEjoKBGVudW0YAiABKA4yJi50ZXN0YXBpcy5tdWx0aXBrZ3Muc3VicGtnMS5TdWJwa2dFbnVtUgRlbnVtSq0BCgYSBAAACQEKCAoBDBIDAAASCggKAQISAwIAIwoJCgIDABIDBAAwCgoKAgQAEgQGAAkBCgoKAwQAARIDBggZCgsKBAQAAgASAwcCNwoMCgUEAAIABhIDBwIqCgwKBQQAAgABEgMHKzIKDAoFBAACAAMSAwc1NgoLCgQEAAIBEgMIAjEKDAoFBAACAQYSAwgCJwoMCgUEAAIBARIDCCgsCgwKBQQAAgEDEgMILzBiBnByb3RvMw==",
  "testapis.nested": "Cr4GChx0ZXN0YXBpcy9uZXN0ZWQvbmVzdGVkLnByb3RvEg90ZXN0YXBpcy5uZXN0ZWQipAIKDVBhcmVudE1lc3NhZ2USEgoEYm9keRgBIAEoCVIEYm9keRJECgZuZXN0ZWQYAiABKAsyLC50ZXN0YXBpcy5uZXN0ZWQuUGFyZW50TWVzc2FnZS5OZXN0ZWRNZXNzYWdlUgZuZXN0ZWQSSgoLbmVzdGVkX2VudW0YAyABKA4yKS50ZXN0YXBpcy5uZXN0ZWQuUGFyZW50TWVzc2FnZS5OZXN0ZWRFbnVtUgpuZXN0ZWRFbnVtGjAKDU5lc3RlZE1lc3NhZ2USHwoLbmVzdGVkX2JvZHkYASABKAlSCm5lc3RlZEJvZHkiOwoKTmVzdGVkRW51bRIbChdORVNURURfRU5VTV9VTlNQRUNJRklFRBAAEgcKA0ZPTxABEgcKA0JBUhACSt0DCgYSBAAAEgEKCAoBDBIDAAASCggKAQISAwIAGAoKCgIEABIEBAASAQoKCgMEAAESAwQIFQoMCgQEAAMAEgQFAgcDCgwKBQQAAwABEgMFChcKDQoGBAADAAIAEgMGBBsKDgoHBAADAAIABRIDBgQKCg4KBwQAAwACAAESAwYLFgoOCgcEAAMAAgADEgMGGRoKDAoEBAAEABIECQINAwoMCgUEAAQAARIDCQcRCg0KBgQABAACABIDCgQgCg4KBwQABAACAAESAwoEGwoOCgcEAAQAAgACEgMKHh8KDQoGBAAEAAIBEgMLBAwKDgoHBAAEAAIBARIDCwQHCg4KBwQABAACAQISAwsKCwoNCgYEAAQAAgISAwwEDAoOCgcEAAQAAgIBEgMMBAcKDgoHBAAEAAICAhIDDAoLCgsKBAQAAgASAw8CEgoMCgUEAAIABRIDDwIICgwKBQQAAgABEgMPCQ0KDAoFBAACAAMSAw8QEQoLCgQEAAIBEgMQAhsKDAoFBAACAQYSAxACDwoMCgUEAAIBARIDEBAWCgwKBQQAAgEDEgMQGRoKCwoEBAACAhIDEQIdCgwKBQQAAgIGEgMRAgwKDAoFBAACAgESAxENGAoMCgUEAAICAxIDERscYgZwcm90bzM=",
  "testapis.oneof": "CokJChp0ZXN0YXBpcy9vbmVvZi9vbmVvZi5wcm90bxIOdGVzdGFwaXMub25lb2YitAMKC09uZW9mUGFyZW50EiEKDG5vcm1hbF9maWVsZBgBIAEoCVILbm9ybWFsRmllbGQSUgoRcmVxdWlyZWRfbWVzc2FnZTEYAiABKAsyIy50ZXN0YXBpcy5vbmVvZi5PbmVvZk1lbWJlck1lc3NhZ2UxSABSEHJlcXVpcmVkTWVzc2FnZTESUgoRcmVxdWlyZWRfbWVzc2FnZTIYAyABKAsyIy50ZXN0YXBpcy5vbmVvZi5PbmVvZk1lbWJlck1lc3NhZ2UySABSEHJlcXVpcmVkTWVzc2FnZTISUgoRb3B0b2luYWxfbWVzc2FnZTEYBCABKAsyIy50ZXN0YXBpcy5vbmVvZi5PbmVvZk1lbWJlck1lc3NhZ2UxSAFSEG9wdG9pbmFsTWVzc2FnZTESUgoRb3B0b2luYWxfbWVzc2FnZTIYBSABKAsyIy50ZXN0YXBpcy5vbmVvZi5PbmVvZk1lbWJlck1lc3NhZ2UySAFSEG9wdG9pbmFsTWVzc2FnZTJCGAoWcmVxdWlyZWRfb25lb2ZfbWVtYmVyc0IYChZvcHRpb25hbF9vbmVvZl9tZW1iZXJzIikKE09uZW9mTWVtYmVyTWVzc2FnZTESEgoEYm9keRgBIAEoCVIEYm9keSIyChNPbmVvZk1lbWJlck1lc3NhZ2UyEhsKCWltYWdlX3VybBgBIAEoCVIIaW1hZ2VVcmxKvAQKBhIEAAAZAQoICgEMEgMAABIKCAoBAhIDAgAXCgoKAgQAEgQEABEBCgoKAwQAARIDBAgTCgsKBAQAAgASAwUCGgoMCgUEAAIABRIDBQIICgwKBQQAAgABEgMFCRUKDAoFBAACAAMSAwUYGQorCgQEAAgAEgQIAgsDGh0gUmVxdWlyZWQuIGRpc2FsbG93IG5vdF9zZXQuCgoMCgUEAAgAARIDCAgeCgsKBAQAAgESAwkELgoMCgUEAAIBBhIDCQQXCgwKBQQAAgEBEgMJGCkKDAoFBAACAQMSAwksLQoLCgQEAAICEgMKBC4KDAoFBAACAgYSAwoEFwoMCgUEAAICARIDChgpCgwKBQQAAgIDEgMKLC0KDAoEBAAIARIEDQIQAwoMCgUEAAgBARIDDQgeCgsKBAQAAgMSAw4ELgoMCgUEAAIDBhIDDgQXCgwKBQQAAgMBEgMOGCkKDAoFBAACAwMSAw4sLQoLCgQEAAIEEgMPBC4KDAoFBAACBAYSAw8EFwoMCgUEAAIEARIDDxgpCgwKBQQAAgQDEgMPLC0KCgoCBAESBBMAFQEKCgoDBAEBEgMTCBsKCwoEBAECABIDFAISCgwKBQQBAgAFEgMUAggKDAoFBAECAAESAxQJDQoMCgUEAQIAAxIDFBARCgoKAgQCEgQXABkBCgoKAwQCARIDFwgbCgsKBAQCAgASAxgCFwoMCgUEAgIABRIDGAIICgwKBQQCAgABEgMYCRIKDAoFBAICAAMSAxgVFmIGcHJvdG8z",
  "testapis.primitives": "Cq0hCiR0ZXN0YXBpcy9wcmltaXRpdmVzL3ByaW1pdGl2ZXMucHJvdG8SE3Rlc3RhcGlzLnByaW1pdGl2ZXMi4wIKB01lc3NhZ2USUAoTcmVxdWlyZWRfcHJpbWl0aXZlcxgBIAEoCzIfLnRlc3RhcGlzLnByaW1pdGl2ZXMuUHJpbWl0aXZlc1IScmVxdWlyZWRQcmltaXRpdmVzElAKE29wdGlvbmFsX3ByaW1pdGl2ZXMYAiABKAsyHy50ZXN0YXBpcy5wcmltaXRpdmVzLlByaW1pdGl2ZXNSEm9wdGlvbmFsUHJpbWl0aXZlcxJZChhyZXF1aXJlZF9wcmltaXRpdmVzX2xpc3QYAyADKAsyHy50ZXN0YXBpcy5wcmltaXRpdmVzLlByaW1pdGl2ZXNSFnJlcXVpcmVkUHJpbWl0aXZlc0xpc3QSWQoYb3B0aW9uYWxfcHJpbWl0aXZlc19saXN0GAQgAygLMh8udGVzdGFwaXMucHJpbWl0aXZlcy5QcmltaXRpdmVzUhZvcHRpb25hbFByaW1pdGl2ZXNMaXN0IsIMCgpQcmltaXRpdmVzEjIKFXJlcXVpcmVkX2RvdWJsZV92YWx1ZRgBIAEoAVITcmVxdWlyZWREb3VibGVWYWx1ZRIwChRyZXF1aXJlZF9mbG9hdF92YWx1ZRgCIAEoAlIScmVxdWlyZWRGbG9hdFZhbHVlEjAKFHJlcXVpcmVkX2ludDMyX3ZhbHVlGAMgASgFUhJyZXF1aXJlZEludDMyVmFsdWUSMAoUcmVxdWlyZWRfaW50NjRfdmFsdWUYBCABKANSEnJlcXVpcmVkSW50NjRWYWx1ZRIyChVyZXF1aXJlZF91aW50MzJfdmFsdWUYBSABKA1SE3JlcXVpcmVkVWludDMyVmFsdWUSMgoVcmVxdWlyZWRfdWludDY0X3ZhbHVlGAYgASgEUhNyZXF1aXJlZFVpbnQ2NFZhbHVlEjIKFXJlcXVpcmVkX3NpbnQzMl92YWx1ZRgHIAEoEVITcmVxdWlyZWRTaW50MzJWYWx1ZRIyChVyZXF1aXJlZF9zaW50NjRfdmFsdWUYCCABKBJSE3JlcXVpcmVkU2ludDY0VmFsdWUSNAoWcmVxdWlyZWRfZml4ZWQzMl92YWx1ZRgJIAEoB1IUcmVxdWlyZWRGaXhlZDMyVmFsdWUSNAoWcmVxdWlyZWRfZml4ZWQ2NF92YWx1ZRgKIAEoBlIUcmVxdWlyZWRGaXhlZDY0VmFsdWUSNgoXcmVxdWlyZWRfc2ZpeGVkMzJfdmFsdWUYCyABKA9SFXJlcXVpcmVkU2ZpeGVkMzJWYWx1ZRI2ChdyZXF1aXJlZF9zZml4ZWQ2NF92YWx1ZRgMIAEoEFIVcmVxdWlyZWRTZml4ZWQ2NFZhbHVlEi4KE3JlcXVpcmVkX2Jvb2xfdmFsdWUYDSABKAhSEXJlcXVpcmVkQm9vbFZhbHVlEjIKFXJlcXVpcmVkX3N0cmluZ192YWx1ZRgOIAEoCVITcmVxdWlyZWRTdHJpbmdWYWx1ZRIwChRyZXF1aXJlZF9ieXRlc192YWx1ZRgPIAEoDFIScmVxdWlyZWRCeXRlc1ZhbHVlEjQKFnJlcXVpcmVkX2RvdWJsZV92YWx1ZXMYZSADKAFSFHJlcXVpcmVkRG91YmxlVmFsdWVzEjIKFXJlcXVpcmVkX2Zsb2F0X3ZhbHVlcxhmIAMoAlITcmVxdWlyZWRGbG9hdFZhbHVlcxIyChVyZXF1aXJlZF9pbnQzMl92YWx1ZXMYZyADKAVSE3JlcXVpcmVkSW50MzJWYWx1ZXMSMgoVcmVxdWlyZWRfaW50NjRfdmFsdWVzGGggAygDUhNyZXF1aXJlZEludDY0VmFsdWVzEjQKFnJlcXVpcmVkX3VpbnQzMl92YWx1ZXMYaSADKA1SFHJlcXVpcmVkVWludDMyVmFsdWVzEjQKFnJlcXVpcmVkX3VpbnQ2NF92YWx1ZXMYaiADKARSFHJlcXVpcmVkVWludDY0VmFsdWVzEjQKFnJlcXVpcmVkX3NpbnQzMl92YWx1ZXMYayADKBFSFHJlcXVpcmVkU2ludDMyVmFsdWVzEjQKFnJlcXVpcmVkX3NpbnQ2NF92YWx1ZXMYbCADKBJSFHJlcXVpcmVkU2ludDY0VmFsdWVzEjYKF3JlcXVpcmVkX2ZpeGVkMzJfdmFsdWVzGG0gAygHUhVyZXF1aXJlZEZpeGVkMzJWYWx1ZXMSNgoXcmVxdWlyZWRfZml4ZWQ2NF92YWx1ZXMYbiADKAZSFXJlcXVpcmVkRml4ZWQ2NFZhbHVlcxI4ChhyZXF1aXJlZF9zZml4ZWQzMl92YWx1ZXMYbyADKA9SFnJlcXVpcmVkU2Zp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",
  "testapis.proto3_optional": "CpgDCi50ZXN0YXBpcy9wcm90bzNfb3B0aW9uYWwvcHJvdG8zX29wdGlvbmFsLnByb3RvEhh0ZXN0YXBpcy5wcm90bzNfb3B0aW9uYWwikAEKB01lc3NhZ2USMgoVcmVxdWlyZWRfc3RyaW5nX3ZhbHVlGAEgASgJUhNyZXF1aXJlZFN0cmluZ1ZhbHVlEjcKFW9wdGlvbmFsX3N0cmluZ192YWx1ZRgCIAEoCUgAUhNvcHRpb25hbFN0cmluZ1ZhbHVliAEBQhgKFl9vcHRpb25hbF9zdHJpbmdfdmFsdWVKsAEKBhIEAAAHAQoICgEMEgMAABIKCAoBAhIDAgAhCgoKAgQAEgQEAAcBCgoKAwQAARIDBAgPCgsKBAQAAgASAwUCIwoMCgUEAAIABRIDBQIICgwKBQQAAgABEgMFCR4KDAoFBAACAAMSAwUhIgoLCgQEAAIBEgMGAiwKDAoFBAACAQQSAwYCCgoMCgUEAAIBBRIDBgsRCgwKBQQAAgEBEgMGEicKDAoFBAACAQMSAwYqK2IGcHJvdG8z",
  "testapis.wktypes": "",
};