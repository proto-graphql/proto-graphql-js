#!/usr/bin/env -S pnpm exec tsx

import { exec as _exec } from "node:child_process";
import { mkdir, writeFile } from "node:fs/promises";
import { dirname, join, relative } from "node:path";
import { promisify } from "node:util";

import { glob } from "glob";

const exec = promisify(_exec);

const rootDir = dirname(__dirname);
const protoDir = join(rootDir, "proto");

const ignoredDirs = new Set([".", "testapis", "testapis/edgecases"]);

async function main() {
  const protoPaths = await glob("**/", { cwd: protoDir });

  const fdSets = await Promise.all(
    protoPaths
      .filter((p) => !ignoredDirs.has(p))
      .sort()
      .map(async (protoPath) => {
        const bin = await exec(
          `buf build --as-file-descriptor-set --path ${protoPath} --output -`,
          { cwd: protoDir, encoding: "buffer" },
        );
        return {
          pkg: protoPath.replace(/\/$/, "").replace(/\//g, "."),
          bin: bin.stdout,
        };
      }),
  );

  const lines: string[] = [];
  lines.push(`// Generated by ${relative(rootDir, __filename)}. DO NOT EDIT.`);
  lines.push("");
  lines.push("export const fileDescriptorSetBins = {");
  for (const { pkg, bin } of fdSets) {
    lines.push(`  "${pkg}": "${bin.toString("base64")}",`);
  }
  lines.push("};");

  const outDir = join(rootDir, "src", "__generated__");
  await mkdir(outDir, { recursive: true });

  await writeFile(join(outDir, "fileDescriptorSetBins.ts"), lines.join("\n"));
}

main();
